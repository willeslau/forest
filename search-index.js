var searchIndex = JSON.parse('{\
"actor_interface":{"doc":"","t":[4,4,7,17,7,17,17,3,4,7,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,0,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,5,5,5,5,11,11,0,0,0,11,11,11,12,0,0,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,6,4,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,7,6,4,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,7,6,4,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,7,4,3,4,3,4,6,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,12,12,11,12,12,12,11,11,11,12,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,4,6,3,3,4,3,3,3,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,12,11,12,11,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,11,12,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,12,12,11,12,12,6,4,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,7,3,6,4,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,7,6,4,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,7,6,4,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["ActorVersion","Array","BURNT_FUNDS_ACTOR_ADDR","CHAIN_FINALITY","CHAOS_ACTOR_ADDR","EPOCHS_IN_DAY","EPOCH_DURATION_SECONDS","FilterEstimate","Map","RESERVE_ADDRESS","V0","V0","V0","V2","V2","V2","V3","V3","V3","V4","V4","V4","V5","V5","V5","account","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","contains_key","count","cron","default","delete","delete","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","eq","flush","flush","fmt","for_each","for_each","from","from","from","from","from","from","from","from","from","from","from","get","get","init","init","init","init","init","into","into","into","into","is_account_actor","is_builtin_actor","is_miner_actor","is_singleton_actor","load","load","market","miner","multisig","ne","new","new","position","power","reward","set","set","store","system","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","velocity","vzip","vzip","vzip","vzip","Method","State","V0","V2","V3","V4","V5","borrow","borrow_mut","deref","deref_mut","drop","from","init","into","load","pubkey_address","serialize","try_from","try_into","type_id","vzip","ADDRESS","Method","State","V0","V2","V3","V4","V5","borrow","borrow_mut","deref","deref_mut","drop","from","init","into","load","serialize","try_from","try_into","type_id","vzip","ADDRESS","Method","State","V0","V2","V3","V4","V5","borrow","borrow_mut","deref","deref_mut","drop","from","init","into","into_network_name","load","map_address_to_new_id","resolve_address","serialize","try_from","try_into","type_id","vzip","ADDRESS","BalanceTable","DealProposal","DealProposals","DealState","DealStates","Method","State","V0","V0","V0","V0","V2","V2","V2","V2","V3","V3","V3","V3","V4","V4","V4","V4","V5","V5","V5","V5","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","client","client_collateral","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","end_epoch","escrow_table","for_each","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get","get","init","init","init","init","init","init","into","into","into","into","into","into","label","last_updated_epoch","load","locked_table","piece_cid","piece_size","proposals","provider","provider_collateral","sector_start_epoch","serialize","serialize","serialize","slash_epoch","start_epoch","states","storage_price_per_epoch","total_locked","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","verified_deal","verify_deals_for_activation","vzip","vzip","vzip","vzip","vzip","vzip","Deadline","Method","MinerInfo","MinerPower","Partition","SectorOnChainInfo","SectorPreCommitInfo","SectorPreCommitOnChainInfo","State","V0","V0","V0","V2","V2","V2","V3","V3","V3","V4","V4","V4","V5","V5","V5","activation","active_sectors","all_sectors","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","consensus_fault_elapsed","control_addresses","deadline_info","deal_ids","deal_ids","deal_weight","deal_weight","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","disputable_proof_count","drop","drop","drop","drop","drop","drop","drop","drop","eq","expected_day_reward","expected_storage_pledge","expiration","expiration","faulty_sectors","fee_debt","fmt","for_each","for_each_deadline","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get_precommitted_sector","get_sector","has_min_power","info","info","init","init","init","init","init","init","init","init","initial_pledge","into","into","into","into","into","into","into","into","live_sectors","load","load_deadline","load_sectors","miner_power","multiaddrs","ne","new_worker","num_deadlines","owner","partitions_posted","peer_id","pre_commit_deposit","pre_commit_epoch","recovering_sectors","replace_capacity","replace_sector_deadline","replace_sector_number","replace_sector_partition","seal_proof","seal_proof","seal_rand_epoch","sealed_cid","sealed_cid","sector_number","sector_number","sector_size","sector_size","serialize","serialize","serialize","serialize","serialize","serialize","total_power","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","verified_deal_weight","verified_deal_weight","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","window_post_partition_sectors","window_post_proof_type","worker","worker","worker_change_epoch","Method","State","V0","V2","V3","V4","V5","borrow","borrow_mut","deref","deref_mut","drop","from","init","into","load","serialize","try_from","try_into","type_id","vzip","ADDRESS","Claim","Method","State","V0","V2","V3","V4","V5","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","default","deref","deref","deref_mut","deref_mut","deserialize","drop","drop","fmt","from","from","from","from","from","from","from","init","init","into","into","into_total_locked","into_total_quality_adj_power","list_all_miners","load","miner_nominal_power_meets_consensus_minimum","miner_power","quality_adj_power","raw_byte_power","serialize","serialize","to_owned","total_locked","total_power","total_power_smoothed","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","ADDRESS","Method","State","V0","V2","V3","V4","V5","borrow","borrow_mut","deref","deref_mut","drop","from","init","initial_pledge_for_power","into","into_total_storage_power_reward","load","pre_commit_deposit_for_power","serialize","try_from","try_into","type_id","vzip","ADDRESS","Method","State","V0","V2","V3","V4","V5","borrow","borrow_mut","deref","deref_mut","drop","from","init","into","load","serialize","try_from","try_into","type_id","vzip"],"q":["actor_interface","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","actor_interface::account","","","","","","","","","","","","","","","","","","","","","","actor_interface::cron","","","","","","","","","","","","","","","","","","","","","","actor_interface::init","","","","","","","","","","","","","","","","","","","","","","","","","actor_interface::market","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","actor_interface::mineractor_interface::multisig","","","","","","","","","","","","","","","","","","","","","actor_interface::power","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","actor_interface::reward","","","","","","","","","","","","","","","","","","","","","","","","","actor_interface::system","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns <code>true</code> if a value exists for the given key in the …","Gets count of elements added in the <code>Array</code>.","","","Delete item from <code>Array</code> at index","Removes a key from the <code>Map</code>, returning the value at the …","","","","","","","","","","","","","","flush root and return Cid used as key in block store","Flush root and return Cid for <code>Map</code>","","Iterates over each value in the <code>Array</code> and runs a function …","Iterates over each KV in the <code>Map</code> and runs a function on …","","","","","","","","","","","","Get value at index of <code>Array</code>","Returns a reference to the value corresponding to the key.","","","","","","","","","","Returns true if the code belongs to an account actor.","Returns true if the code belongs to a builtin actor.","Returns true if the code belongs to a miner actor.","Returns true if the code belongs to a singleton actor.","Load map with root","Load map with root","","","","","","","","","","Set value at index","Inserts a key-value pair into the <code>Map</code>.","Returns a reference to the underlying store of the <code>Map</code>.","","","","","","","","","","","","","","","","","","","","Account actor method.","Account actor state.","","","","","","","","","","","","","","","","","","","","","Cron actor address.","Cron actor method.","Cron actor state.","","","","","","","","","","","","","","","","","","","","Init actor address.","Init actor method.","Init actor state.","","","","","","","","","","","","","","","","Allocates a new ID address and stores a mapping of the …","ResolveAddress resolves an address to an ID-address, if …","","","","","","Market actor address.","","","","","","Market actor method.","Market actor state.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Loads escrow table","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Loads locked funds table","","","Deal proposals","","","","","","","","","Deal proposal meta data.","","Consume state to return just total funds locked","","","","","","","","","","","","","","","","","","","","Validates a collection of deal dealProposals for …","","","","","","","Deadline holds the state for all sectors due at a …","Miner actor method.","Static information about miner","","","","","","Miner actor state.","","","","","","","","","","","","","","","","Epoch during which the sector proof was accepted","","","","","","","","","","","","","","","","","","","","","Loads deadline at index for a miner’s state","","","Integral of active deals over sector lifetime","Integral of active deals over sector lifetime, 0 if …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Expected one day projection of reward for sector computed …","Expected twenty day projection of reward for sector …","Epoch during which the sector expires","","","Gets fee debt of miner state","","For each partition of the deadline","Loads deadlines for a miner’s state","","","","","","","","","","","","","","","","","","","","","","","","Gets pre committed on chain info","Loads a specific sector number","","","","","","","","","","","","Pledge collected to commit this sector","","","","","","","","","","","Loads deadline at index for a miner’s state","Loads sectors corresponding to the bitfield. If no …","","","","","Number of post period deadlines.","","","","","","","Whether to replace a “committed capacity” no-deal …","The committed capacity sector to replace, and its …","","","The seal proof type implies the PoSt proofs","","","CommR","CommR","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Integral of active verified deals over sector lifetime","Integral of active verified deals over sector lifetime","","","","","","","","","","","","","","Multisig actor method.","Multisig actor state.","","","","","","","","","","","","","","","","","","","","Power actor address. TODO: Select based on actors version","","Power actor method. TODO: Select based on actor version","Power actor state.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Consume state to return total locked funds","Consume state to return just total quality adj power","Loads power for a given miner, if exists.","","Checks power actor state for if miner meets minimum …","Loads power for a given miner, if exists.","Sum of quality adjusted power for a miner’s sectors.","Sum of raw byte power for a miner’s sectors.","","","","Returns total locked funds","Returns the total power claim.","Returns this_epoch_qa_power_smoothed from the state.","","","","","","","","","Reward actor address.","Reward actor method.","Reward actor state.","","","","","","","","","","","","","","","Consume state to return just storage power reward","","","","","","","","System actor address.","System actor method.","System actor state.","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,0,1,2,3,4,1,2,3,4,4,4,2,1,0,4,1,2,1,2,3,4,1,2,3,4,1,2,3,4,4,1,2,4,1,2,1,2,3,3,3,4,4,4,4,4,4,1,2,0,1,2,3,4,1,2,3,4,0,0,0,0,1,2,0,0,0,4,1,2,4,0,0,1,2,2,0,4,1,2,3,4,1,2,3,4,1,2,3,4,4,1,2,3,4,0,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,8,9,10,11,8,9,10,11,8,9,10,11,8,9,10,11,8,9,10,11,8,9,10,11,12,13,8,9,10,11,12,13,12,12,8,9,10,11,12,13,8,9,10,11,12,13,8,9,10,11,12,13,12,11,9,8,9,10,11,12,12,12,12,12,12,13,13,13,13,13,13,8,10,8,9,10,11,12,13,8,9,10,11,12,13,12,13,11,11,12,12,11,12,12,13,11,12,13,13,12,11,12,11,8,9,10,11,12,13,8,9,10,11,12,13,8,9,10,11,12,13,12,11,8,9,10,11,12,13,0,0,0,0,0,0,0,0,0,14,15,16,14,15,16,14,15,16,14,15,16,14,15,16,17,15,15,14,15,16,18,19,17,20,21,14,15,16,18,19,17,20,21,18,18,16,17,21,17,20,14,15,16,18,19,17,20,21,14,15,16,18,19,17,20,21,19,21,14,14,15,16,18,19,17,20,21,18,17,17,17,21,15,16,18,14,16,14,15,16,18,19,17,17,17,17,17,17,20,20,20,20,20,20,21,21,21,21,21,21,16,16,19,16,20,14,15,16,18,19,17,20,21,17,14,15,16,18,19,17,20,21,15,16,16,16,19,18,18,18,16,18,14,18,20,20,15,21,21,21,21,17,21,21,17,21,17,21,18,18,16,18,19,17,20,21,19,14,15,16,18,19,17,20,21,14,15,16,18,19,17,20,21,14,15,16,18,19,17,20,21,17,20,14,15,16,18,19,17,20,21,18,18,18,18,18,0,0,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,0,0,0,0,23,23,23,23,23,23,24,23,24,24,24,24,23,24,23,24,24,23,24,24,23,24,24,24,24,24,24,23,24,23,24,23,23,23,23,23,23,24,24,23,24,24,23,23,23,23,24,23,24,23,24,23,24,0,0,0,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,0,0,0,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["filterestimate",3]],[[]],[[],[["bool",15],["box",3,["error"]],["result",4,["bool","box"]]]],[[],["u64",15]],null,[[],["filterestimate",3]],[[["u64",15]],[["bool",15],["box",3,["error"]],["result",4,["bool","box"]]]],[[],[["result",4,["option","box"]],["option",4],["box",3,["error"]]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["filterestimate",3]],["bool",15]],[[],[["box",3,["error"]],["cid",3],["result",4,["cid","box"]]]],[[],[["box",3,["error"]],["cid",3],["result",4,["cid","box"]]]],[[["formatter",3]],["result",6]],[[],[["box",3,["error"]],["result",4,["box"]]]],[[],[["box",3,["error"]],["result",4,["box"]]]],[[]],[[]],[[]],[[["networkversion",4]]],[[["statetreeversion",4]]],[[]],[[["filterestimate",3]]],[[["filterestimate",3]]],[[["filterestimate",3]]],[[["filterestimate",3]]],[[["filterestimate",3]]],[[["u64",15]],[["result",4,["option","box"]],["option",4],["box",3,["error"]]]],[[],[["result",4,["option","box"]],["option",4],["box",3,["error"]]]],null,[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[["cid",3]],["bool",15]],[[["cid",3]],["bool",15]],[[["cid",3]],["bool",15]],[[["cid",3]],["bool",15]],[[["actorversion",4],["cid",3]],[["box",3,["error"]],["result",4,["box"]]]],[[["actorversion",4],["cid",3]],[["box",3,["error"]],["result",4,["box"]]]],null,null,null,[[["filterestimate",3]],["bool",15]],[[["actorversion",4]]],[[["actorversion",4]]],null,null,null,[[["u64",15]],[["box",3,["error"]],["result",4,["box"]]]],[[["byteskey",3]],[["box",3,["error"]],["result",4,["box"]]]],[[]],null,[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],[[["actorstate",3]],[["box",3,["error"]],["result",4,["state","box"]],["state",4]]],[[],["address",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,null,null,null,null,[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],[[["actorstate",3]],[["box",3,["error"]],["result",4,["state","box"]],["state",4]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,null,null,null,null,[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],[[],["string",3]],[[["actorstate",3]],[["box",3,["error"]],["result",4,["state","box"]],["state",4]]],[[["address",3]],[["box",3,["error"]],["result",4,["address","box"]],["address",3]]],[[["address",3]],[["result",4,["option","box"]],["box",3,["error"]],["option",4,["address"]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],null,[[],[["box",3,["error"]],["result",4,["balancetable","box"]],["balancetable",4]]],[[],[["box",3,["error"]],["result",4,["box"]]]],[[]],[[]],[[]],[[]],[[]],[[["dealproposal",3]]],[[["dealproposal",3]]],[[["dealproposal",3]]],[[["dealproposal",3]]],[[["dealproposal",3]]],[[["dealstate",3]]],[[["dealstate",3]]],[[["dealstate",3]]],[[["dealstate",3]]],[[["dealstate",3]]],[[]],[[["address",3]],[["tokenamount",6],["result",4,["tokenamount","box"]],["box",3,["error"]]]],[[["u64",15]],[["box",3,["error"]],["result",4,["option","box"]],["option",4,["dealstate"]]]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[["actorstate",3]],[["result",4,["state","box"]],["box",3,["error"]],["state",4]]],[[],[["box",3,["error"]],["result",4,["balancetable","box"]],["balancetable",4]]],null,null,[[],[["result",4,["dealproposals","box"]],["dealproposals",4],["box",3,["error"]]]],null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],null,null,[[],[["box",3,["error"]],["result",4,["dealstates","box"]],["dealstates",4]]],null,[[],["tokenamount",6]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,[[["chainepoch",6],["address",3]],[["box",3,["error"]],["result",4,["box"]]]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["bitfield",3]],[[],["bitfield",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[["chainepoch",6]],["deadlineinfo",3]],null,null,null,null,[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[],["result",4]],[[],[["result",4,["usize","box"]],["usize",15],["box",3,["error"]]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["minerinfo",3]],["bool",15]],null,null,null,null,[[],["bitfield",3]],[[],["tokenamount",6]],[[["formatter",3]],["result",6]],[[],[["box",3,["error"]],["result",4,["box"]]]],[[],[["box",3,["error"]],["result",4,["box"]]]],[[]],[[]],[[]],[[]],[[]],[[["sectoronchaininfo",3]]],[[["sectoronchaininfo",3]]],[[["sectoronchaininfo",3]]],[[["sectoronchaininfo",3]]],[[["sectoronchaininfo",3]]],[[]],[[["sectorprecommitonchaininfo",3]]],[[]],[[["sectorprecommitonchaininfo",3]]],[[["sectorprecommitonchaininfo",3]]],[[["sectorprecommitonchaininfo",3]]],[[["sectorprecommitonchaininfo",3]]],[[]],[[["sectorprecommitinfo",3]]],[[["sectorprecommitinfo",3]]],[[["sectorprecommitinfo",3]]],[[["sectorprecommitinfo",3]]],[[["sectorprecommitinfo",3]]],[[["sectornumber",6]],[["result",4,["option","box"]],["box",3,["error"]],["option",4,["sectorprecommitonchaininfo"]]]],[[["u64",15]],[["result",4,["option","box"]],["box",3,["error"]],["option",4,["sectoronchaininfo"]]]],null,[[],[["box",3,["error"]],["result",4,["minerinfo","box"]],["minerinfo",3]]],null,[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bitfield",3]],[[["actorstate",3]],[["result",4,["state","box"]],["box",3,["error"]],["state",4]]],[[["u64",15]],[["deadline",4],["box",3,["error"]],["result",4,["deadline","box"]]]],[[["option",4,["bitfield"]],["bitfield",3]],[["vec",3,["sectoronchaininfo"]],["box",3,["error"]],["result",4,["vec","box"]]]],null,null,[[["minerinfo",3]],["bool",15]],null,[[],["u64",15]],null,[[],["bitfield",3]],null,null,null,[[],["bitfield",3]],null,null,null,null,null,null,null,null,null,null,null,[[],["sectorsize",4]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[],["address",3]],null,null,null,null,null,null,null,null,null,[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],[[["actorstate",3]],[["box",3,["error"]],["state",4],["result",4,["state","box"]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["claim",3]],[[]],[[],["claim",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[]],[[["claim",3]]],[[]],[[["claim",3]]],[[["claim",3]]],[[["claim",3]]],[[["claim",3]]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[],["tokenamount",6]],[[],["storagepower",6]],[[],[["result",4,["vec","box"]],["vec",3,["address"]],["box",3,["error"]]]],[[["actorstate",3]],[["state",4],["result",4,["state","box"]],["box",3,["error"]]]],[[["address",3]],[["bool",15],["box",3,["error"]],["result",4,["bool","box"]]]],[[["address",3]],[["box",3,["error"]],["result",4,["option","box"]],["option",4,["claim"]]]],null,null,[[],["result",4]],[[],["result",4]],[[]],[[],["tokenamount",6]],[[],["claim",3]],[[],["filterestimate",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],null,null,null,null,null,null,null,null,[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[["storagepower",6],["tokenamount",6],["filterestimate",3]],["tokenamount",6]],[[]],[[],["storagepower",6]],[[["actorstate",3]],[["state",4],["result",4,["state","box"]],["box",3,["error"]]]],[[["storagepower",6],["filterestimate",3]],["tokenamount",6]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,null,null,null,null,[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],[[["actorstate",3]],[["box",3,["error"]],["state",4],["result",4,["state","box"]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]]],"p":[[4,"Array"],[4,"Map"],[4,"ActorVersion"],[3,"FilterEstimate"],[4,"State"],[4,"State"],[4,"State"],[4,"BalanceTable"],[4,"DealProposals"],[4,"DealStates"],[4,"State"],[3,"DealProposal"],[3,"DealState"],[4,"Deadline"],[4,"Partition"],[4,"State"],[3,"SectorOnChainInfo"],[3,"MinerInfo"],[3,"MinerPower"],[3,"SectorPreCommitOnChainInfo"],[3,"SectorPreCommitInfo"],[4,"State"],[4,"State"],[3,"Claim"],[4,"State"],[4,"State"]]},\
"auth":{"doc":"","t":[7,4,13,17,13,13,13,7,7,7,11,11,5,11,11,11,11,11,5,5,11,11,11,11,11,11,5,11],"n":["ADMIN","Error","InvalidPermissions","JWT_IDENTIFIER","MethodParam","NoAuthHeader","Other","READ","SIGN","WRITE","borrow","borrow_mut","create_token","deserialize","erased_serialize","fmt","fmt","from","generate_priv_key","has_perms","into","serialize","to_string","try_from","try_into","type_id","verify_token","vzip"],"q":["auth","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Admin permissions","Error Enum for Authentication","Invalid permissions to use specified method","constant string that is used to identify the JWT secret …","Filecoin Method does not exist","Missing authentication header","","Reading permissions","Signing permissions","Writing permissions","","","Create a new JWT Token","","","","","","","Check whether or not header has required permissions","","","","","","","Verify JWT Token and return the allowed permissions from …",""],"i":[0,0,1,0,1,1,1,0,0,0,1,1,0,1,1,1,1,1,0,0,1,1,1,1,1,1,0,1],"f":[null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[["vec",3,["string"]],["string",3]],[["string",3],["jwtresult",6,["string"]]]],[[],["result",4]],[[["serializer",8]],[["error",3],["result",4,["ok","error"]],["ok",3]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[],["keyinfo",3]],[[["str",15],["string",3]],[["jsonrpcerror",4],["result",4,["jsonrpcerror"]]]],[[]],[[],["result",4]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["str",15]],[["jwtresult",6,["vec"]],["vec",3,["string"]]]],[[]]],"p":[[4,"Error"]]},\
"beacon":{"doc":"","t":[12,8,3,3,3,3,3,3,3,17,3,12,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,12,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,12,12,3,3,11,11,11,11,5,11,11,11,11,11,5,11,11,11,11,11,11,11,11,0,11,11,5,5],"n":["0","Beacon","BeaconEntryJson","BeaconPoint","BeaconSchedule","ChainInfo","DrandBeacon","DrandConfig","DrandPublic","IGNORE_DRAND_VAR","MockBeacon","beacon","beacon_entries","beacon_entries_for_block","beacon_for_epoch","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chain_info","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","coefficient","default","deserialize","deserialize","deserialize","entry","entry","entry","eq","fmt","fmt","fmt","from","from","from","from","from","from","from","from","genesis_time","group_hash","hash","height","into","into","into","into","into","into","into","into","key","max_beacon_round_for_epoch","max_beacon_round_for_epoch","max_beacon_round_for_epoch","ne","new","new","period","public_key","round_time","serialize","serialize","serialize","server","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","verify_entry","verify_entry","verify_entry","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","BeaconEntry","borrow","borrow_mut","clone","clone_into","data","default","deserialize","eq","fmt","from","from","into","json","ne","new","round","serialize","to_owned","try_from","try_into","type_id","vzip","0","0","BeaconEntryJson","BeaconEntryJsonRef","borrow","borrow","borrow_mut","borrow_mut","deserialize","deserialize","from","from","into","into","serialize","serialize","serialize","try_from","try_from","try_into","try_into","type_id","type_id","vec","vzip","vzip","deserialize","serialize"],"q":["beacon","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","beacon::beacon_entries","","","","","","","","","","","","","","","","","","","","","","","beacon::beacon_entries::json","","","","","","","","","","","","","","","","","","","","","","","","","","beacon::beacon_entries::json::vec",""],"d":["","Trait used as the interface to be able to retrieve bytes …","Json beacon entry format. This matches the drand round …","Contains height at which the beacon is activated, as well …","Contains the vector of BeaconPoints, which are mappings …","Contains all the info about a Drand beacon chain. API …","Drand randomness beacon that can be used to generate …","Config used when initializing a Drand beacon.","Coeffiencients of the publicly available Drand keys. This …","Enviromental Variable to ignore Drand. Lotus parallel is …","Mock beacon used for testing. Deterministic based on an …","","","Returns the beacon entries for a given epoch. When the …","","","","","","","","","","","","","","","","","","Info about the beacon chain, used to verify correctness …","","","","","","","","","Public key used to verify beacon entries.","","","","","Returns a BeaconEntry given a round. It fetches the …","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the public key for the Drand beacon.","Returns the most recent beacon round for the given …","","","","Construct a new DrandBeacon.","","","","","","","","Url endpoint to send JSON http requests to.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Verify a new beacon entry against the most recent one …","","","","","","","","","","","The result from getting an entry from Drand. The entry …","","","","","The signature of message H(prev_round, prev_round.data, …","","","","","","","","","","","Returns the current round number.","","","","","","","","","Wrapper for serializing and deserializing a BeaconEntry …","Wrapper for serializing a BeaconEntry reference to JSON.","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[1,0,0,0,0,0,0,0,0,0,0,2,0,1,1,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,6,5,6,7,8,5,6,7,8,5,7,5,7,8,9,3,4,7,5,7,8,1,2,3,4,5,6,7,8,7,7,7,2,1,2,3,4,5,6,7,8,5,9,3,4,7,3,4,7,7,4,5,7,8,6,5,6,7,8,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,9,3,4,1,2,3,4,5,6,7,8,0,10,10,10,10,10,10,10,10,10,10,10,10,0,10,10,10,10,10,10,10,10,10,11,12,0,0,11,12,11,12,0,11,11,12,11,12,0,11,12,11,12,11,12,11,12,0,11,12,0,0],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,[[["beaconentry",3],["chainepoch",6]]],[[["chainepoch",6]],[["box",3,["error"]],["result",4,["box"]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["drandpublic",3]],[[],["drandconfig",3]],[[],["chaininfo",3]],[[],["beaconentryjson",3]],[[]],[[]],[[]],[[]],null,[[],["chaininfo",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["u64",15]],[["pin",3,["box"]],["box",3,["future"]]]],[[["u64",15]],[["pin",3,["box"]],["box",3,["future"]]]],[[["u64",15]],[["box",3,["future"]],["pin",3,["box"]]]],[[["chaininfo",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["publickey",3],["error",4],["result",4,["publickey","error"]]]],[[["chainepoch",6]],["u64",15]],[[["chainepoch",6]],["u64",15]],[[["i64",15]],["u64",15]],[[["chaininfo",3]],["bool",15]],[[["u64",15],["drandconfig",3]]],[[["duration",3]]],null,null,[[],["duration",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["beaconentry",3],["beaconentry",3]],[["pin",3,["box"]],["box",3,["future"]]]],[[["beaconentry",3],["beaconentry",3]],[["pin",3,["box"]],["box",3,["future"]]]],[[["beaconentry",3],["beaconentry",3]],[["pin",3,["box"]],["box",3,["future"]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[]],[[]],[[],["beaconentry",3]],[[]],[[]],[[],["beaconentry",3]],[[],["result",4]],[[["beaconentry",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["beaconentryjson",3]]],[[]],[[]],null,[[["beaconentry",3]],["bool",15]],[[["u64",15],["vec",3,["u8"]],["u8",15]]],[[],["u64",15]],[[],["result",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,[[]],[[]],[[]],[[]],[[],[["result",4,["beaconentry"]],["beaconentry",3]]],[[],["result",4]],[[]],[[]],[[]],[[]],[[["beaconentry",3]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,[[]],[[]],[[],[["result",4,["vec"]],["vec",3,["beaconentry"]]]],[[],["result",4]]],"p":[[3,"BeaconSchedule"],[3,"BeaconPoint"],[3,"DrandBeacon"],[3,"MockBeacon"],[3,"DrandPublic"],[3,"DrandConfig"],[3,"ChainInfo"],[3,"BeaconEntryJson"],[8,"Beacon"],[3,"BeaconEntry"],[3,"BeaconEntryJson"],[3,"BeaconEntryJsonRef"]]},\
"chain":{"doc":"","t":[13,17,17,13,3,13,13,13,13,4,4,17,3,13,13,13,17,17,13,13,13,11,0,5,5,11,11,11,11,11,11,11,11,11,11,11,5,12,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,5,11,11,11,5,0,11,11,11,11,11,11,11,11,11,11,5,11,5,11,11,11,5,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,17,17,17,3,17,17,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,13,13,4,13,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Apply","BASE_FEE_MAX_CHANGE_DENOM","BLOCK_GAS_TARGET","Blockchain","ChainStore","Cid","Current","DB","Encoding","Error","HeadChange","INITIAL_BASE_FEE","MINIMUM_BASE_FEE","NoBlocks","NotFound","Other","PACKING_EFFICIENCY_DENOM","PACKING_EFFICIENCY_NUM","Revert","State","UndefinedKey","add_to_tipset_tracker","base_fee","block_messages","block_messages_from_cids","block_msgs_for_tipset","blockstore","blockstore_cloned","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","compute_base_fee","db","deref","deref","deref","deref_mut","deref_mut","deref_mut","draw_randomness","drop","drop","drop","export","fill_tipset","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","genesis","genesis","get_beacon_randomness","get_beacon_randomness_looking_backward","get_beacon_randomness_looking_forward","get_chain_message","get_chain_randomness","get_chain_randomness_looking_backward","get_chain_randomness_looking_forward","get_parent_reciept","headchange_json","heaviest_tipset","init","init","init","into","into","into","is_block_validated","latest_beacon_entry","mark_block_as_validated","messages_for_tipset","messages_for_tipset","messages_from_cids","miner_load_actor_tsk","new","next_head_change","persist_objects","publisher","put_tipset","read_msg_cids","set_genesis","set_genesis","set_heaviest_tipset","source","sub_head_changes","tipset_by_height","tipset_from_keys","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","weight","BASE_FEE_MAX_CHANGE_DENOM","BLOCK_GAS_TARGET","INITIAL_BASE_FEE","MINIMUM_BASE_FEE","PACKING_EFFICIENCY_DENOM","PACKING_EFFICIENCY_NUM","borrow","borrow_mut","compute_base_fee","deref","deref","deref_mut","drop","from","init","initialize","into","try_from","try_into","type_id","vzip","Apply","Current","HeadChangeJson","Revert","SubscriptionHeadChange","borrow","borrow_mut","deref","deref_mut","deserialize","drop","fmt","from","from","init","into","serialize","try_from","try_into","type_id","vzip"],"q":["chain","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","chain::base_fee","","","","","","","","","","","","","","","","","","","","","chain::headchange_json","","","","","","","","","","","","","","","","","","","",""],"d":["","Limits gas base fee change to 12.5% of the change.","Used in calculating the base fee change.","Error originating constructing blockchain structures","Stores chain data such as heaviest tipset and cached …","Error originating from Cid creation","","Error originating from key-value store","Error originating from encoding arbitrary data","Chain error","Enum for pubsub channel that defines message type variant …","Genesis base fee.","Minimum base fee amount allowed for the given Tipset.","Tipset contains no blocks","Key not found in database","Other chain error","","","","Amt error","Key was not found","Adds a BlockHeader to the tipset tracker, which tracks …","","Returns a Tuple of bls messages of type UnsignedMessage …","Returns a tuple of UnsignedMessage and SignedMessages …","Retrieves block messages to be passed through the VM.","Returns key-value store instance.","Clones blockstore <code>Arc</code>.","","","","","","","","","","key-value datastore.","","","","","","","Computes a pseudorandom 32 byte Vec.","","","","Exports a range of tipsets, as well as the state roots …","Constructs and returns a full tipset if messages from …","","","","","","","","","","","","","","","Returns the genesis block from storage.","Returns genesis BlockHeader from the store based on a …","Gets 32 bytes of randomness for ChainRand paramaterized …","","","Attempts to deserialize to unsigend message or signed …","Gets 32 bytes of randomness for ChainRand paramaterized …","","","Returns parent message receipt given block_header and …","","Returns the currently tracked heaviest tipset.","","","","","","","Checks store if block has already been validated. Key …","Finds the latest beacon entry given a tipset up to 20 …","Marks block as validated in the store. This is retrieved …","Given a tipset this function will return all unique …","Retrieves ordered valid messages from a <code>Tipset</code>. This will …","Returns messages from key-value store based on a slice of …","get miner state given address and tipsetkeys","","","Persists slice of serializable objects to blockstore.","Returns a reference to the publisher of head changes.","Writes tipset block headers to data store and updates …","Returns a tuple of cids for both Unsigned and Signed …","Sets the genesis key in the BlockStore. Be careful if …","Writes genesis to blockstore.","Sets heaviest tipset within ChainStore and store its …","","Subscribes to head changes. This function will send the …","Returns the tipset behind <code>tsk</code> at a given <code>height</code>. If the …","Returns Tipset from key-value store from provided cids","","","","","","","","","","","","","","","Returns the weight of provided Tipset. This function will …","Limits gas base fee change to 12.5% of the change.","Used in calculating the base fee change.","Genesis base fee.","Minimum base fee amount allowed for the given Tipset.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[1,0,0,2,0,2,1,2,2,0,0,0,0,2,2,2,0,0,1,2,2,3,0,0,0,3,3,3,3,1,2,3,1,2,1,1,0,3,3,1,2,3,1,2,0,3,1,2,3,3,1,2,2,3,1,2,2,2,2,2,2,2,2,2,0,3,3,3,3,0,3,3,3,0,0,3,3,1,2,3,1,2,3,3,3,0,3,0,3,3,3,0,3,3,0,0,3,3,2,3,3,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,0,0,0,0,0,0,0,4,4,0,4,4,4,4,4,4,4,4,4,4,4,4,5,5,0,5,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["blockheader",3]]],null,[[["blockheader",3]],[["error",4],["result",4,["error"]]]],[[],[["error",4],["result",4,["error"]]]],[[["tipset",3]],[["vec",3,["blockmessages"]],["error",4],["result",4,["vec","error"]]]],[[]],[[],["arc",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["headchange",4]],[[]],[[["tipset",3]],[["bigint",3],["result",4,["bigint","error"]],["error",4]]],null,[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["domainseparationtag",4],["chainepoch",6]],[["result",4,["box"]],["box",3,["error"]]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["tipset",3],["bool",15],["chainepoch",6]]],[[["tipset",3]],[["option",4,["fulltipset"]],["fulltipset",3]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["serdeerr",3]],["error",4]],[[["dberr",4]]],[[["box",3,["stderror"]],["stderror",8]]],[[["ciderr",4]]],[[["encerr",3]],["error",4]],[[["string",3]]],[[["blkerr",4]]],[[]],[[["amterr",4]],["error",4]],[[],[["result",4,["option","error"]],["option",4,["blockheader"]],["error",4]]],[[],[["result",4,["option","error"]],["option",4,["blockheader"]],["error",4]]],[[["domainseparationtag",4],["tipsetkeys",3],["bool",15],["chainepoch",6]]],[[["domainseparationtag",4],["tipsetkeys",3],["chainepoch",6]]],[[["domainseparationtag",4],["tipsetkeys",3],["chainepoch",6]]],[[["cid",3]],[["result",4,["chainmessage","error"]],["error",4],["chainmessage",4]]],[[["domainseparationtag",4],["tipsetkeys",3],["bool",15],["chainepoch",6]]],[[["domainseparationtag",4],["tipsetkeys",3],["chainepoch",6]]],[[["domainseparationtag",4],["tipsetkeys",3],["chainepoch",6]]],[[["usize",15],["blockheader",3]],[["option",4,["messagereceipt"]],["error",4],["result",4,["option","error"]]]],null,[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[["cid",3]],[["error",4],["result",4,["bool","error"]],["bool",15]]],[[["tipset",3]]],[[["cid",3]],[["result",4,["error"]],["error",4]]],[[["tipset",3]],[["result",4,["vec","error"]],["vec",3,["chainmessage"]],["error",4]]],[[["tipset",3]],[["result",4,["vec","error"]],["vec",3,["chainmessage"]],["error",4]]],[[],[["result",4,["vec","error"]],["error",4],["vec",3]]],[[["address",3],["tipsetkeys",3]]],[[["arc",3]]],[[["i64",15]]],[[],[["result",4,["error"]],["error",4]]],[[],["publisher",3]],[[["tipset",3]]],[[["cid",3]],[["error",4],["result",4,["error"]]]],[[["blockheader",3]],[["error",4],["result",4,["cid","error"]],["cid",3]]],[[["blockheader",3]],[["error",4],["result",4,["cid","error"]],["cid",3]]],[[["tipset",3],["arc",3,["tipset"]]]],[[],[["option",4,["error"]],["error",8]]],[[]],[[["chainepoch",6],["tipset",3],["bool",15],["arc",3,["tipset"]]]],[[["tipsetkeys",3]]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[["tipset",3]],[["bigint",3],["result",4,["bigint","string"]],["string",3]]],null,null,null,null,null,null,[[]],[[]],[[["tipset",3]],[["bigint",3],["result",4,["bigint","error"]],["error",4]]],[[["usize",15]]],[[],["bigint",3]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,null,[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[]],[[["headchange",4]]],[[],["usize",15]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]]],"p":[[4,"HeadChange"],[4,"Error"],[3,"ChainStore"],[3,"MINIMUM_BASE_FEE"],[4,"HeadChangeJson"]]},\
"chain_sync":{"doc":"","t":[12,3,3,13,13,13,13,13,13,3,4,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["0","BadBlockCache","ChainMuxer","Complete","Error","Headers","Idle","Messages","PersistHeaders","SyncConfig","SyncStage","SyncState","TipsetValidator","bad_blocks_cloned","base","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","compute_msg_root","default","default","default","default","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","epoch","eq","eq","error","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","get","get_elapsed_time","init","init","init","init","init","init","init","inlined_clone","into","into","into","into","into","into","into_future","into_future","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","ne","new","new","new","peek","poll","put","req_window","serialize","serialize","set_epoch","set_stage","stage","sync_state_cloned","target","tipset_sample_size","to_owned","to_owned","to_owned","to_string","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","validate","validate_epoch","validate_msg_root","vzip","vzip","vzip","vzip","vzip","vzip"],"q":["chain_sync","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Threadsafe cache for tracking bad blocks. This cache is …","The ChainMuxer handles events from the p2p network and …","ChainSync completed and is following chain.","Error has occured while syncing.","Syncing headers from the heaviest tipset to genesis.","Idle state.","Syncing messages and performing state transitions.","Persisting headers on chain from heaviest to genesis.","Struct that defines syncing configuration options","Current state of the ChainSyncer using the ChainExchange …","State of the node’s syncing process. This state is …","","Returns a clone of the bad blocks cache to be used …","Return a reference to the base Tipset","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return the current ChainEpoch","","","Sets error for the sync.","","","","","","","","","","","","","","","","","","Returns <code>Some</code> with the reason if the block cid is in bad …","Get the elapsed time of the current syncing process. …","","","","","","","Initializes the syncing state with base and target …","","","","","","","","","","","","","","","","","","","","Returns <code>Some</code> with the reason if the block cid is in bad …","","Puts a bad block Cid in the cache with a given reason.","Request window length for tipsets during chain exchange","","","Sets epoch of the sync.","Sets the sync stage for the syncing state. If setting to …","Get the current SyncStage of the Syncer","Returns a cloned <code>Arc</code> of the sync worker state.","Returns the current Tipset","Sample size of tipsets to acquire before determining what …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[1,0,0,2,2,2,2,2,2,0,0,0,0,3,4,3,1,5,6,2,4,3,1,5,6,2,4,6,2,4,6,2,4,1,5,6,2,4,3,1,5,6,2,4,3,1,5,6,2,4,6,2,4,3,1,5,6,2,4,4,2,4,4,5,6,2,2,4,3,1,5,6,2,4,3,1,5,6,2,4,5,4,3,1,5,6,2,4,4,2,3,1,5,6,2,4,3,3,3,1,5,6,2,4,4,3,5,6,5,3,5,6,2,4,4,4,4,3,4,6,6,2,4,2,3,1,5,6,2,4,3,1,5,6,2,4,3,1,5,6,2,4,3,1,5,6,2,4,3,1,5,6,2,4,1,1,1,3,1,5,6,2,4],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,[[],[["badblockcache",3],["arc",3,["badblockcache"]]]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["syncconfig",3]],[[],["syncstage",4]],[[],["syncstate",3]],[[]],[[]],[[]],[[],[["tipsetvalidationerror",4],["result",4,["cid","tipsetvalidationerror"]],["cid",3]]],[[]],[[]],[[]],[[],["syncstate",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["chainepoch",6]],[[["syncstage",4]],["bool",15]],[[["syncstate",3]],["bool",15]],[[["string",3]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["cid",3]]],[[],[["option",4,["duration"]],["duration",3]]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[["arc",3,["tipset"]],["tipset",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["syncstate",3]],["bool",15]],[[["arc",3,["beaconschedule"]],["tipset",3],["receiver",3,["arc"]],["statemanager",3],["beaconschedule",3],["arc",3,["tipset"]],["networkevent",4],["arc",3,["statemanager"]],["sender",3,["arc"]],["syncconfig",3],["sender",3,["networkmessage"]],["networkmessage",4],["messagepool",3],["receiver",3,["networkevent"]],["arc",3,["messagepool"]]],[["chainmuxererror",4],["result",4,["chainmuxererror"]]]],[[["usize",15]]],[[["usize",15],["i64",15]]],[[["cid",3]]],[[["context",3],["pin",3]],["poll",4]],[[["string",3],["cid",3]]],null,[[],["result",4]],[[],["result",4]],[[["chainepoch",6]]],[[["syncstage",4]]],[[],["syncstage",4]],[[],[["rwlock",3,["syncstate"]],["arc",3,["rwlock"]]]],[[],["option",4]],null,[[]],[[]],[[]],[[],["string",3]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["badblockcache",3],["chainstore",3],["arc",3,["chainstore"]],["arc",3,["badblockcache"]],["arc",3,["tipset"]],["tipset",3]]],[[["arc",3,["tipset"]],["tipset",3]],[["tipsetvalidationerror",4],["result",4,["tipsetvalidationerror"]]]],[[["block",3]],[["tipsetvalidationerror",4],["result",4,["tipsetvalidationerror"]]]],[[]],[[]],[[]],[[]],[[]],[[]]],"p":[[3,"TipsetValidator"],[4,"SyncStage"],[3,"ChainMuxer"],[3,"SyncState"],[3,"BadBlockCache"],[3,"SyncConfig"]]},\
"commcid":{"doc":"","t":[6,5,5,5,5,5,5,5,5],"n":["Commitment","cid_to_commitment","cid_to_data_commitment_v1","cid_to_piece_commitment_v1","cid_to_replica_commitment_v1","commitment_to_cid","data_commitment_v1_to_cid","piece_commitment_v1_to_cid","replica_commitment_v1_to_cid"],"q":["commcid","","","","","","","",""],"d":["","CIDToCommitment extracts the raw commitment bytes, the …","cid_to_data_commitment_v1 extracts the raw data …","cid_to_piece_commitment_v1 converts a CID to a comm_p – …","cid_to_replica_commitment_v1 extracts the raw replica …","CommitmentToCID converts a raw commitment hash to a CID …","DataCommitmentV1ToCID converts a raw data commitment to a …","piece_commitment_v1_to_cid converts a comm_p to a CID – …","ReplicaCommitmentV1ToCID converts a raw data commitment …"],"i":[0,0,0,0,0,0,0,0,0],"f":[null,[[["cid",3]],[["str",15],["result",4,["str"]]]],[[["cid",3]],[["str",15],["result",4,["commitment","str"]],["commitment",6]]],[[["cid",3]],[["str",15],["result",4,["commitment","str"]],["commitment",6]]],[[["cid",3]],[["str",15],["result",4,["commitment","str"]],["commitment",6]]],[[["u64",15],["commitment",6]],[["str",15],["result",4,["cid","str"]],["cid",3]]],[[["commitment",6]],[["str",15],["result",4,["cid","str"]],["cid",3]]],[[["commitment",6]],[["str",15],["result",4,["cid","str"]],["cid",3]]],[[["commitment",6]],[["str",15],["result",4,["cid","str"]],["cid",3]]]],"p":[]},\
"conformance_tests":{"doc":"","t":[],"n":[],"q":[],"d":[],"i":[],"f":[],"p":[]},\
"fil_clock":{"doc":"","t":[6,17,17],"n":["ChainEpoch","EPOCH_DURATION_SECONDS","EPOCH_UNDEFINED"],"q":["fil_clock","",""],"d":["Epoch number of a chain. This acts as a proxy for time …","Duration of each tipset epoch.","Const used within the VM to denote an unset <code>ChainEpoch</code>"],"i":[0,0,0],"f":[null,null,null],"p":[]},\
"fil_types":{"doc":"","t":[12,12,12,17,6,17,17,3,17,3,17,18,8,4,3,3,17,3,3,3,4,17,3,18,17,3,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,17,3,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,12,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,12,11,11,11,11,11,11,11,11,11,11,11,11,5,3,3,13,13,13,4,3,13,13,4,3,13,3,13,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,12,11,11,11,11,11,11,11,3,17,3,11,11,11,11,12,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,13,3,4,3,13,3,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,3,3,6,13,13,13,17,4,4,4,6,3,3,3,6,6,4,13,6,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,6,13,13,13,13,13,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,12,0,12,12,12,11,11,12,12,12,11,12,11,11,12,12,12,12,12,12,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,3,3,6,3,3,3,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,5,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,5,5,4,4,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["0","0","0","ALLOWABLE_CLOCK_DRIFT","ActorID","BLOCKS_PER_EPOCH","BLOCK_GAS_LIMIT","DefaultNetworkParams","FILECOIN_PRECISION","FIL_RESERVED","HAMT_BIT_WIDTH","MINING_REWARD_TOTAL","NetworkParams","NetworkVersion","PaddedPieceSize","PieceInfo","RANDOMNESS_LENGTH","Randomness","StateInfo0","StateRoot","StateTreeVersion","TICKET_RANDOMNESS_LOOKBACK","TOTAL_FILECOIN","TOTAL_FILECOIN","TOTAL_FILECOIN_BASE","UnpaddedPieceSize","V0","V0","V1","V1","V10","V11","V12","V13","V2","V2","V3","V3","V4","V4","V5","V6","V7","V8","V9","WINNING_POST_SECTOR_SET_LOOKBACK","ZERO_ADDRESS","actors","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build_version","cid","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","deadlines","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from_fil","genesis","info","init","init","init","init","init","init","init","init","init","init","init","init","initial_reward_balance","initialize","initialize","initialize","into","into","into","into","into","into","into","into","into","into","into","into","ne","ne","ne","ne","padded","partial_cmp","partial_cmp","sector","serialize","serialize","serialize","serialize","serialize","serialize","serialize","size","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unpadded","validate","validate","verifier","version","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","zero_piece_commitment","APIVersion","BUILD_TYPE","Build2k","BuildDebug","BuildDefault","BuildType","CURRENT_COMMIT","Full","Miner","NodeType","RUNNING_NODE_TYPE","Unknown","Version","Worker","api_version","block_delay","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","eq","fmt","fmt","from","from","from","from","from","from","from","from_i64","from_i64","from_u64","from_u64","init","init","init","init","init","init","init","initialize","initialize","initialize","into","into","into","into","into","into","into","serialize","serialize","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","user_version","version","vzip","vzip","vzip","vzip","vzip","vzip","vzip","DeadlineInfo","NO_QUANTIZATION","QuantSpec","borrow","borrow","borrow_mut","borrow_mut","challenge","clone","clone","clone_into","clone_into","close","current_epoch","default","deref","deref","deref_mut","deref_mut","deserialize","drop","drop","eq","fault_cutoff","fault_cutoff_passed","fmt","from","from","has_elapsed","index","init","init","into","into","is_open","last","ne","new","next_not_elapsed","next_open","next_period_start","offset","open","period_elapsed","period_end","period_start","period_started","quant_spec","quantize_down","quantize_up","serialize","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","unit","vzip","vzip","Account","Actor","ActorType","Miner","MultiSig","Template","accounts","actor_type","balance","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","from","from","from","from","init","init","init","init","into","into","into","into","market_balance","miners","network_name","new","owner","owner","peer_id","power_balance","sector_size","serialize","serialize","serialize","serialize","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","worker","AggregateSealVerifyInfo","AggregateSealVerifyProofAndInfos","InteractiveSealRandomness","Invalid","Invalid","Invalid","MAX_SECTOR_NUMBER","RegisteredAggregateProof","RegisteredPoStProof","RegisteredSealProof","SealRandomness","SealVerifyInfo","SealVerifyParams","SectorID","SectorNumber","SectorQuality","SectorSize","SnarkPackV1","Spacetime","StackedDRG2KiBV1","StackedDRG2KiBV1P1","StackedDRG32GiBV1","StackedDRG32GiBV1P1","StackedDRG512MiBV1","StackedDRG512MiBV1P1","StackedDRG64GiBV1","StackedDRG64GiBV1P1","StackedDRG8MiBV1","StackedDRG8MiBV1P1","StackedDRGWindow2KiBV1","StackedDRGWindow32GiBV1","StackedDRGWindow512MiBV1","StackedDRGWindow64GiBV1","StackedDRGWindow8MiBV1","StackedDRGWinning2KiBV1","StackedDRGWinning32GiBV1","StackedDRGWinning512MiBV1","StackedDRGWinning64GiBV1","StackedDRGWinning8MiBV1","StoragePower","_2KiB","_32GiB","_512MiB","_64GiB","_8MiB","aggregate_proof","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","deal_ids","deal_ids","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from_i64","from_sector_size","from_u64","hash","hash","hash","infos","init","init","init","init","init","init","init","init","init","interactive_epoch","interactive_randomness","interactive_randomness","into","into","into","into","into","into","into","into","into","miner","miner","ne","ne","ne","ne","ne","ne","ne","ne","number","post","proof","proof","proof","proof_size","proof_size","randomness","randomness","registered_proof","registered_seal_proof","registered_seal_proof","registered_window_post_proof","registered_winning_post_proof","seal_proof","seal_rand_epoch","sealed_cid","sealed_cid","sealed_cid","sector_id","sector_maximum_lifetime","sector_num","sector_number","sector_size","sector_size","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unsealed_cid","unsealed_cid","update_to_v1","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","window_post_partitions_sector","window_post_partitions_sector","OnChainWindowPoStVerifyInfo","PoStProof","PoStRandomness","SectorInfo","WindowPoStVerifyInfo","WinningPoStVerifyInfo","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","challenge_sectors","challenged_sectors","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","default","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","init","init","init","init","init","into","into","into","into","into","json","ne","ne","ne","ne","ne","post_proof","proof","proof_bytes","proofs","proofs","proofs","prover","prover","randomness","randomness","sealed_cid","sector_number","serialize","serialize","serialize","serialize","serialize","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","0","0","PoStProofJson","PoStProofJsonRef","SectorInfoJson","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","drop","from","from","from","from","init","init","init","into","into","into","proof","sealed_cid","sector_number","serialize","serialize","serialize","serialize","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vec","vzip","vzip","vzip","deserialize","serialize","FullVerifier","MockVerifier","ProofVerifier","borrow","borrow","borrow_mut","borrow_mut","deref","deref","deref_mut","deref_mut","drop","drop","from","from","generate_winning_post_sector_challenge","generate_winning_post_sector_challenge","init","init","into","into","try_from","try_from","try_into","try_into","type_id","type_id","verify_aggregate_seals","verify_seal","verify_seal","verify_window_post","verify_window_post","verify_winning_post","verify_winning_post","vzip","vzip"],"q":["fil_typesfil_types::build_version","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fil_types::deadlines","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fil_types::genesis","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fil_types::sectorfil_types::sector::post","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fil_types::sector::post::json","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fil_types::sector::post::json::vec","","fil_types::verifier","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","Allowable clock drift in validations.","Identifier for Actors, includes builtin and initialized …","The expected number of block producers in each epoch.","Total gas limit allowed per block. This is shared across …","Params for the network. This is now continued on into …","Ratio of integer values to token value.","Amount of total Filecoin reserved in a static ID address.","Default bit width for the hamt in the filecoin protocol.","Available rewards for mining.","Config trait which handles different network …","Specifies the network version","Size of a piece in bytes with padding.","Piece information for part or a whole file.","","String of random bytes usually generated from a …","Empty state tree information. This is serialized as an …","State root information. Contains information about the …","Specifies the version of the state tree","Lookback height for retrieving ticket randomness.","Total Filecoin available to the network.","Total filecoin available to network.","Total Filecoin supply.","Size of a piece in bytes.","Corresponds to actors < v2","genesis (specs-actors v0.9.3)","Corresponds to actors = v2","breeze (specs-actors v0.9.7)","actors v3 (specs-actors v3.0.x)","norwegian (specs-actor v3.1.x)","actors v3 (specs-actor v4.0.x)","reserved","Corresponds to actors = v3","smoke (specs-actors v0.9.8)","Corresponds to actors = v4","ignition (specs-actors v0.9.11)","Corresponds to actors >= v5","actors v2 (specs-actors v2.0.x)","tape (increases max prove commit size by 10x)","kumquat (specs-actors v2.2.0)","calico (specs-actors v2.3.2)","persian (post-2.3.2 behaviour transition)","orange","Epochs to look back for verifying PoSt proofs.","Zero address used to avoid allowing it to be used for …","Actors tree. The structure depends on the state root …","","","","","","","","","","","","","","","","","","","","","","","","","","Content identifier for piece.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Convert integer value of tokens into BigInt based on the …","","Info. The structure depends on the state root version.","","","","","","","","","","","","","Initial reward actor balance. This function is only …","","","","","","","","","","","","","","","","","","","","Converts unpadded piece size into padded piece size.","","","","","","","","","","","Size in nodes. For BLS12-381 (capacity 254 bits), must be …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Converts padded piece size into an unpadded piece size.","Validates piece size.","Validates piece size.","","State tree version","","","","","","","","","","","","","Returns a zero piece commitment based on the amount of …","Represents the current version of the API.","","","","","Build type for the node. This shares which build type the …","","","","The type of node that is running.","","","Integer based value on version information. Highest order …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Gets the formatted current user version.","","","","","","","","","Deadline calculations with respect to a current epoch. “…","Constant defining the QuantSpec which performs no …","A spec for quantization.","","","","","Epoch at which to sample the chain for challenge (< Open).","","","","","First epoch from which a proof may no longer be submitted …","Epoch at which this info was calculated.","","","","","","","","","","First epoch at which a fault declaration is rejected (< …","Whether the deadline’s fault cutoff has passed.","","","","Whether the current deadline has already closed.","Current deadline index, in […","","","","","Whether the current deadline is currently open.","The last epoch during which a proof may be submitted.","","","Returns the next instance of this deadline that has not …","Epoch at which the subsequent deadline opens.","The first epoch in the next proving period.","The offset from zero from which to base the modulus","First epoch from which a proof may be submitted (>= …","Whether the proving period has elapsed.","The last epoch in the proving period.","First epoch of the proving period (<= CurrentEpoch).","Whether the proving period has begun.","","","Rounds <code>epoch</code> to the nearest exact multiple of the …","","","","","","","","","","The unit of quantization","","","","All information needed to initialize an actor in genesis.","Different account variants. This is used with genesis …","Defines all information needed for a miner in genesis.","","Format of genesis file.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Information needed to verify an aggregated seal proof.","","Randomness used when verifying a seal proof. This is just …","","","","The maximum assignable sector number. Raising this would …","Seal proof type which defines the version and sector size.","Proof of spacetime type, indicating version and sector …","Seal proof type which defines the version and sector size.","Randomness used for Seal proofs.","Information needed to verify a seal proof.","SealVerifyParams is the structure of information that …","Sector ID which contains the sector number and the actor …","SectorNumber is a numeric identifier for a sector. It is …","Unit of sector quality","SectorSize indicates one of a set of possible sizes in …","","The unit of spacetime committed to the network","","","","","","","","","","","","","","","","","","","","","Unit of storage power (measured in bytes)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns registered seal proof for given sector size","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Proof size for each SealProof type","Proof size for each PoStProof type","","","","RegisteredSealProof produces the seal-specific …","","Produces the windowed PoSt-specific RegisteredProof …","Produces the winning PoSt-specific RegisteredProof …","","","","","","","The maximum duration a sector sealed with this proof may …","","","Returns the sector size of the proof type, which is …","Returns the sector size of the proof type, which is …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Convert the original proof type to the v1 proof added in …","","","","","","","","","","Returns the partition size, in sectors, associated with a …","Returns the partition size, in sectors, associated with a …","Information submitted by a miner to provide a Window PoSt.","Proof of spacetime data stored on chain.","Randomness type used for generating PoSt proof randomness.","Information about a sector necessary for PoSt verification","Information needed to verify a Window PoSt submitted …","Information needed to verify a Winning PoSt attached to a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Used when sealing - needs to be mapped to PoSt registered …","","","","","Used to derive 32-byte prover ID","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Wrapper for serializing a PoStProof to JSON.","Wrapper for serializing a PoStProof reference to JSON.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Full verification implementation. This will verify all …","Mock verifier. This does no-op verification of any proofs.","Functionality for verification of seal, winning PoSt and …","","","","","","","","","","","","","","Generates sector challenge indexes for use in winning …","","","","","","","","","","","","","Verify seal proof for sectors. This proof verifies that a …","","Verifies window proof of spacetime. These proofs are …","","Verifies winning proof of spacetime. These proofs are …","",""],"i":[1,2,3,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,4,0,0,5,6,5,6,6,6,6,6,5,6,5,6,5,6,6,6,6,6,6,0,0,7,8,1,2,9,3,5,7,10,6,11,12,13,8,1,2,9,3,5,7,10,6,11,12,13,0,9,1,2,9,3,5,6,1,2,9,3,5,6,0,3,10,8,1,2,9,3,5,7,10,6,11,11,12,12,13,13,8,1,2,9,3,5,7,10,6,11,12,13,2,9,3,5,7,10,8,1,2,9,3,5,7,10,6,11,12,13,1,2,9,3,5,6,1,2,3,5,6,8,1,2,9,3,5,7,10,6,11,12,13,4,0,7,8,1,2,9,3,5,7,10,6,11,12,13,4,11,12,13,8,1,2,9,3,5,7,10,6,11,12,13,1,2,9,3,1,5,6,0,2,9,3,5,7,10,6,9,1,2,9,3,5,6,8,1,2,9,3,5,7,10,6,11,12,13,8,1,2,9,3,5,7,10,6,11,12,13,8,1,2,9,3,5,7,10,6,11,12,13,2,1,2,0,7,8,1,2,9,3,5,7,10,6,11,12,13,0,0,0,14,14,14,0,0,15,15,0,0,15,0,15,16,16,17,18,19,16,20,14,15,17,18,19,16,20,14,15,17,17,18,18,19,19,16,20,14,15,17,18,19,16,20,14,15,17,18,19,16,20,14,15,20,20,15,17,18,19,16,20,14,15,14,15,14,15,17,18,19,16,20,14,15,17,18,19,17,18,19,16,20,14,15,16,20,20,15,17,18,19,16,20,20,14,15,17,18,19,16,20,14,15,17,18,19,16,20,14,15,0,16,17,18,19,16,20,14,15,0,0,0,21,22,21,22,22,21,22,21,22,22,22,22,21,22,21,22,22,21,22,22,22,22,22,21,22,22,22,21,22,21,22,22,22,22,22,22,22,22,21,22,22,22,22,22,22,21,21,22,21,22,21,22,21,22,21,22,21,21,22,23,0,0,0,23,0,24,25,25,23,25,26,24,23,25,26,24,23,25,26,24,23,25,26,24,23,25,26,24,23,25,26,24,23,25,26,24,23,25,26,24,23,25,26,24,26,24,24,24,25,26,26,26,26,23,25,26,24,23,25,26,24,23,25,26,24,23,25,26,24,23,25,26,24,26,0,0,0,27,28,29,0,0,0,0,0,0,0,0,0,0,0,29,0,27,27,27,27,27,27,27,27,27,27,28,28,28,28,28,28,28,28,28,28,0,30,30,30,30,30,31,27,28,29,32,33,34,31,30,35,27,28,29,32,33,34,31,30,35,27,28,29,32,33,34,31,30,35,27,28,29,32,33,34,31,30,35,32,33,35,27,28,29,32,33,34,31,30,35,27,28,29,32,33,34,31,30,35,27,28,29,32,33,34,31,30,35,27,28,29,32,33,34,31,30,35,27,28,29,32,33,34,31,30,35,27,28,29,32,33,34,31,30,30,35,27,27,28,28,29,29,32,33,34,31,30,35,30,27,30,27,28,29,31,27,28,29,32,33,34,31,30,35,33,32,34,27,28,29,32,33,34,31,30,35,31,35,27,28,29,32,33,34,31,35,35,0,32,33,31,27,28,32,34,32,28,33,27,27,31,33,32,33,34,32,27,33,34,27,28,27,28,29,32,33,34,31,30,35,27,28,29,32,33,34,31,30,35,30,27,28,29,32,33,34,31,30,35,27,28,29,32,33,34,31,30,35,27,28,29,32,33,34,31,30,35,32,34,27,27,28,29,32,33,34,31,30,35,27,28,0,0,0,0,0,0,36,37,38,39,40,36,37,38,39,40,38,39,36,37,38,39,40,36,37,38,39,40,38,39,40,36,37,38,39,40,36,37,38,39,40,36,37,38,39,40,36,37,38,39,40,36,37,38,39,40,36,37,38,39,40,36,37,37,38,39,40,36,37,38,39,40,36,37,38,39,40,0,36,37,38,39,40,37,36,37,38,39,40,38,39,38,39,36,36,36,37,38,39,40,36,37,38,39,40,36,37,38,39,40,36,37,38,39,40,36,37,38,39,40,36,37,38,39,40,41,42,0,0,0,41,42,43,41,42,43,43,43,41,42,43,41,42,43,0,41,43,41,42,43,41,42,43,43,41,42,43,41,42,43,43,43,43,0,41,42,43,43,41,42,43,41,42,43,41,42,43,0,41,42,43,0,0,0,0,0,44,45,44,45,44,45,44,45,44,45,44,45,44,46,44,45,44,45,44,45,44,45,44,45,46,44,46,44,46,44,46,44,45],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[],["unpaddedpiecesize",3]],[[],["paddedpiecesize",3]],[[],["pieceinfo",3]],[[],["randomness",3]],[[],["statetreeversion",4]],[[],["networkversion",4]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["randomness",3]],[[],["stateinfo0",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["bigint",3]],[[["usize",15]]],[[],["bigint",3]],[[["usize",15]]],[[],["address",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["unpaddedpiecesize",3]],["bool",15]],[[["paddedpiecesize",3]],["bool",15]],[[["pieceinfo",3]],["bool",15]],[[["randomness",3]],["bool",15]],[[["statetreeversion",4]],["bool",15]],[[["networkversion",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["i64",15]],["bigint",3]],null,null,[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["bigint",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["unpaddedpiecesize",3]],["bool",15]],[[["paddedpiecesize",3]],["bool",15]],[[["pieceinfo",3]],["bool",15]],[[["randomness",3]],["bool",15]],[[],["paddedpiecesize",3]],[[["statetreeversion",4]],[["option",4,["ordering"]],["ordering",4]]],[[["networkversion",4]],[["option",4,["ordering"]],["ordering",4]]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["unpaddedpiecesize",3]],[[],[["result",4,["str"]],["str",15]]],[[],[["result",4,["str"]],["str",15]]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["paddedpiecesize",3]],["commitment",6]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[["usize",15]]],[[],["rwlock",3]],[[["usize",15]]],[[],["rwlock",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["bool",15]],[[["formatter",3]],["fmtresult",6]],[[["formatter",3]],["fmtresult",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["nodetype",4]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,[[]],[[]],[[]],[[]],null,[[],["quantspec",3]],[[],["deadlineinfo",3]],[[]],[[]],null,null,[[],["deadlineinfo",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[["usize",15]]],[[["usize",15]]],[[["deadlineinfo",3]],["bool",15]],null,[[],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["bool",15]],null,[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[],["bool",15]],[[],["chainepoch",6]],[[["deadlineinfo",3]],["bool",15]],[[["u64",15],["chainepoch",6]]],[[]],[[],["chainepoch",6]],[[],["chainepoch",6]],null,null,[[],["bool",15]],[[],["chainepoch",6]],null,[[],["bool",15]],[[],["quantspec",3]],[[["chainepoch",6]],["chainepoch",6]],[[["chainepoch",6]],["chainepoch",6]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,[[]],[[]],null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],null,null,null,[[["string",3]],["template",3]],null,null,null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["registeredsealproof",4]],[[],["registeredpostproof",4]],[[],["registeredaggregateproof",4]],[[],["sealverifyinfo",3]],[[],["sealverifyparams",3]],[[],["aggregatesealverifyinfo",3]],[[],["aggregatesealverifyproofandinfos",3]],[[],["sectorsize",4]],[[],["sectorid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[],["sectorid",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["registeredsealproof",4]],["bool",15]],[[["registeredpostproof",4]],["bool",15]],[[["registeredaggregateproof",4]],["bool",15]],[[["sealverifyinfo",3]],["bool",15]],[[["sealverifyparams",3]],["bool",15]],[[["aggregatesealverifyinfo",3]],["bool",15]],[[["aggregatesealverifyproofandinfos",3]],["bool",15]],[[["sectorsize",4]],["bool",15]],[[["sectorid",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["i64",15]]],[[]],[[["i64",15]]],[[]],[[["i64",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["i64",15]],["option",4]],[[["sectorsize",4],["networkversion",4]]],[[["u64",15]],["option",4]],[[]],[[]],[[]],null,[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[["registeredsealproof",4]],["bool",15]],[[["registeredpostproof",4]],["bool",15]],[[["registeredaggregateproof",4]],["bool",15]],[[["sealverifyinfo",3]],["bool",15]],[[["sealverifyparams",3]],["bool",15]],[[["aggregatesealverifyinfo",3]],["bool",15]],[[["aggregatesealverifyproofandinfos",3]],["bool",15]],[[["sectorid",3]],["bool",15]],null,null,null,null,null,[[],[["usize",15],["result",4,["usize","string"]],["string",3]]],[[],[["usize",15],["result",4,["usize","string"]],["string",3]]],null,null,null,[[],[["result",4,["registeredsealproof","string"]],["registeredsealproof",4],["string",3]]],null,[[],[["result",4,["registeredpostproof","string"]],["registeredpostproof",4],["string",3]]],[[],[["result",4,["registeredpostproof","string"]],["registeredpostproof",4],["string",3]]],null,null,null,null,null,null,[[],["chainepoch",6]],null,null,[[],[["sectorsize",4],["result",4,["sectorsize","string"]],["string",3]]],[[],[["sectorsize",4],["result",4,["sectorsize","string"]],["string",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["u64",15],["string",3],["result",4,["u64","string"]]]],[[],[["u64",15],["string",3],["result",4,["u64","string"]]]],null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[],["sectorinfo",3]],[[],["postproof",3]],[[],["winningpostverifyinfo",3]],[[],["windowpostverifyinfo",3]],[[],["onchainwindowpostverifyinfo",3]],[[]],[[]],[[]],[[]],[[]],[[],["winningpostverifyinfo",3]],[[],["windowpostverifyinfo",3]],[[],["onchainwindowpostverifyinfo",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["sectorinfo",3]],["bool",15]],[[["postproof",3]],["bool",15]],[[["winningpostverifyinfo",3]],["bool",15]],[[["windowpostverifyinfo",3]],["bool",15]],[[["onchainwindowpostverifyinfo",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["postproofjson",3]]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],null,[[["sectorinfo",3]],["bool",15]],[[["postproof",3]],["bool",15]],[[["winningpostverifyinfo",3]],["bool",15]],[[["windowpostverifyinfo",3]],["bool",15]],[[["onchainwindowpostverifyinfo",3]],["bool",15]],null,null,null,null,null,null,null,null,null,null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["sectorinfojson",3]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],[["postproof",3],["result",4,["postproof"]]]],[[],["result",4]],[[],["result",4]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[["sectorinfo",3]]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],null,null,null,[[["postproof",3]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,[[]],[[]],[[]],[[],[["result",4,["vec"]],["vec",3,["postproof"]]]],[[],["result",4]],null,null,null,[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[["u64",15],["randomness",3],["registeredpostproof",4]],[["box",3,["stderror"]],["vec",3,["u64"]],["result",4,["vec","box"]]]],[[["u64",15],["randomness",3],["registeredpostproof",4]],[["box",3,["stderror"]],["vec",3,["u64"]],["result",4,["vec","box"]]]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[["aggregatesealverifyproofandinfos",3]],[["box",3,["stderror"]],["result",4,["box"]]]],[[["sealverifyinfo",3]],[["box",3,["stderror"]],["result",4,["box"]]]],[[["sealverifyinfo",3]],[["box",3,["stderror"]],["result",4,["box"]]]],[[["u64",15],["randomness",3]],[["box",3,["stderror"]],["result",4,["box"]]]],[[["u64",15],["randomness",3]],[["box",3,["stderror"]],["result",4,["box"]]]],[[["u64",15],["randomness",3]],[["box",3,["stderror"]],["result",4,["box"]]]],[[["u64",15],["randomness",3]],[["box",3,["stderror"]],["result",4,["box"]]]],[[]],[[]]],"p":[[3,"UnpaddedPieceSize"],[3,"PaddedPieceSize"],[3,"Randomness"],[8,"NetworkParams"],[4,"StateTreeVersion"],[4,"NetworkVersion"],[3,"StateRoot"],[3,"DefaultNetworkParams"],[3,"PieceInfo"],[3,"StateInfo0"],[3,"TOTAL_FILECOIN"],[3,"FIL_RESERVED"],[3,"ZERO_ADDRESS"],[4,"BuildType"],[4,"NodeType"],[3,"APIVersion"],[3,"CURRENT_COMMIT"],[3,"BUILD_TYPE"],[3,"RUNNING_NODE_TYPE"],[3,"Version"],[3,"QuantSpec"],[3,"DeadlineInfo"],[4,"ActorType"],[3,"Template"],[3,"Actor"],[3,"Miner"],[4,"RegisteredSealProof"],[4,"RegisteredPoStProof"],[4,"RegisteredAggregateProof"],[4,"SectorSize"],[3,"AggregateSealVerifyProofAndInfos"],[3,"SealVerifyInfo"],[3,"SealVerifyParams"],[3,"AggregateSealVerifyInfo"],[3,"SectorID"],[3,"SectorInfo"],[3,"PoStProof"],[3,"WinningPoStVerifyInfo"],[3,"WindowPoStVerifyInfo"],[3,"OnChainWindowPoStVerifyInfo"],[3,"PoStProofJson"],[3,"PoStProofJsonRef"],[3,"SectorInfoJson"],[4,"MockVerifier"],[4,"FullVerifier"],[8,"ProofVerifier"]]},\
"forest":{"doc":"","t":[0,0,0,5,0,13,13,3,3,13,13,13,13,13,4,13,13,0,11,11,11,5,5,11,11,11,11,11,11,0,11,11,11,11,11,11,5,12,0,12,11,11,11,11,11,11,11,11,11,12,0,11,5,11,11,11,11,11,11,11,11,11,12,0,5,12,12,11,11,11,11,11,11,11,11,11,12,12,12,0,0,12,11,11,11,12,5,5,5,5,5,12,12,11,11,11,12,0,0,12,12,11,5,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,13,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,12,12,13,4,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,3,11,11,11,11,12,11,11,11,11,11,12,12,11,11,11,12,11,11,11,12,12,11,12,12,11,12,12,12,12,11,11,11,11,11,11,11,11,3,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,5,11,11,11,11,11,11,11,11,12,11,11,17,13,4,13,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,4,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,13,13,13,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,13,13,13,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,13,13,13,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,13,13,13,13,13,13,13,13,13,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,5,5,5],"n":["cli","daemon","logger","main","subcommand","Auth","Chain","Cli","CliOpts","Fetch","Genesis","Mpool","Net","State","Subcommand","Sync","Wallet","auth_cmd","az","az","az","balance_to_fil","block_until_sigint","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","chain_cmd","checked_as","checked_as","checked_as","clap","clap","clap","cli_error_and_die","cmd","config","config","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","encrypt_keystore","fetch_params_cmd","fmt","format_vec_pretty","from","from","from","from_clap","from_clap","from_clap","from_subset","from_subset","from_subset","genesis","genesis_cmd","handle_rpc_err","import_chain","import_snapshot","init","init","init","into","into","into","is_in_subset","is_in_subset","is_in_subset","kademlia","mdns","metrics_port","mpool_cmd","net_cmd","opts","overflowing_as","overflowing_as","overflowing_as","port","print_rpc_res","print_rpc_res_bytes","print_rpc_res_cids","print_rpc_res_pretty","print_stdout","req_window","rpc","saturating_as","saturating_as","saturating_as","skip_load","state_cmd","sync_cmd","target_peer_count","tipset_sample_size","to_config","to_size_string","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","token","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","vzip","vzip","vzip","wallet_cmd","wrapping_as","wrapping_as","wrapping_as","ApiInfo","AuthCommands","CreateToken","az","borrow","borrow_mut","checked_as","clap","deref","deref_mut","drop","fmt","from","from_clap","from_subset","init","into","is_in_subset","overflowing_as","process_perms","run","saturating_as","to_subset","to_subset_unchecked","try_from","try_into","type_id","unwrapped_as","vzip","wrapping_as","perm","perm","Block","ChainCommands","Genesis","Head","Message","ReadObj","az","borrow","borrow_mut","checked_as","clap","deref","deref_mut","drop","fmt","from","from_clap","from_subset","init","into","is_in_subset","overflowing_as","run","saturating_as","to_subset","to_subset_unchecked","try_from","try_into","type_id","unwrapped_as","vzip","wrapping_as","cid","cid","cid","Config","az","borrow","borrow_mut","checked_as","data_dir","default","deref","deref_mut","deserialize","drop","enable_rpc","encrypt_keystore","fmt","from","from_subset","genesis_file","init","into","is_in_subset","metrics_port","network","overflowing_as","rpc_port","rpc_token","saturating_as","skip_load","snapshot","snapshot_path","sync","to_subset","to_subset_unchecked","try_from","try_into","type_id","unwrapped_as","vzip","wrapping_as","FetchCommands","all","az","borrow","borrow_mut","checked_as","clap","deref","deref_mut","drop","fmt","from","from_clap","from_subset","init","into","is_in_subset","keys","overflowing_as","params_size","ram_to_int","run","saturating_as","to_subset","to_subset_unchecked","try_from","try_into","type_id","unwrapped_as","verbose","vzip","wrapping_as","ACCOUNT_START","AddMiner","GenesisCommands","NewTemplate","add_miner","az","borrow","borrow_mut","checked_as","clap","deref","deref_mut","drop","fmt","from","from_clap","from_subset","init","into","is_in_subset","overflowing_as","run","saturating_as","to_subset","to_subset_unchecked","try_from","try_into","type_id","unwrapped_as","vzip","wrapping_as","file_path","genesis_path","network_name","preseal_path","MpoolCommands","Pending","Stat","az","borrow","borrow_mut","checked_as","clap","deref","deref_mut","drop","fmt","from","from_clap","from_subset","init","into","is_in_subset","overflowing_as","run","saturating_as","to_subset","to_subset_unchecked","try_from","try_into","type_id","unwrapped_as","vzip","wrapping_as","base_fee_lookback","local","Connect","Disconnect","Listen","NetCommands","Peers","az","borrow","borrow_mut","checked_as","clap","deref","deref_mut","drop","fmt","from","from_clap","from_subset","init","into","is_in_subset","overflowing_as","run","saturating_as","to_subset","to_subset_unchecked","try_from","try_into","type_id","unwrapped_as","vzip","wrapping_as","address","id","GetActor","ListMiners","Lookup","Power","StateCommands","az","borrow","borrow_mut","checked_as","clap","deref","deref_mut","drop","fmt","from","from_clap","from_subset","init","into","is_in_subset","overflowing_as","run","saturating_as","to_subset","to_subset_unchecked","try_from","try_into","type_id","unwrapped_as","vzip","wrapping_as","address","address","miner_address","reverse","CheckBad","MarkBad","Status","SyncCommands","Wait","az","borrow","borrow_mut","checked_as","clap","deref","deref_mut","drop","fmt","from","from_clap","from_subset","init","into","is_in_subset","overflowing_as","run","saturating_as","to_subset","to_subset_unchecked","try_from","try_into","type_id","unwrapped_as","vzip","wrapping_as","cid","cid","watch","Balance","Default","Export","Has","Import","List","New","SetDefault","Sign","Verify","WalletCommands","az","borrow","borrow_mut","checked_as","clap","deref","deref_mut","drop","fmt","from","from_clap","from_subset","init","into","is_in_subset","overflowing_as","run","saturating_as","to_subset","to_subset_unchecked","try_from","try_into","type_id","unwrapped_as","vzip","wrapping_as","address","address","address","address","key","key","message","message","path","signature","signature_type","start","setup_logger","process"],"q":["forest","","","","","forest::cli","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","forest::cli::auth_cmd","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","forest::cli::auth_cmd::AuthCommands","","forest::cli::chain_cmd","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","forest::cli::chain_cmd::ChainCommands","","","forest::cli::config","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","forest::cli::fetch_params_cmd","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","forest::cli::genesis_cmd","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","forest::cli::genesis_cmd::GenesisCommands","","","","forest::cli::mpool_cmd","","","","","","","","","","","","","","","","","","","","","","","","","","","","","forest::cli::mpool_cmd::MpoolCommands","","forest::cli::net_cmd","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","forest::cli::net_cmd::NetCommands","","forest::cli::state_cmd","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","forest::cli::state_cmd::StateCommands","","","","forest::cli::sync_cmd","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","forest::cli::sync_cmd::SyncCommands","","","forest::cli::wallet_cmd","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","forest::cli::wallet_cmd::WalletCommands","","","","","","","","","","","forest::daemon","forest::logger","forest::subcommand"],"d":["","","","","","","","CLI structure generated when interacting with Forest …","CLI options","","","","","","Forest binary subcommands available.","","","","","","","Convert an atto FIL balance to FIL","Blocks current thread until ctrl-c is received","","","","","","","","","","","","","","Print an error message and exit the program with an error …","","","","","","","","","","","","","","","","Format a vector to a prettified string","","","","","","","","","","","","Print a stringified JSON-RPC error and exit","","","","","","","","","","","","","","","","","","","","","","Prints a plain HTTP JSON-RPC response result","Prints a bytes HTTP JSON-RPC response result","Prints a tipset from a HTTP JSON-RPC response result","Prints a pretty HTTP JSON-RPC response result","Prints a string HTTP JSON-RPC response result to a …","","","","","","","","","","","","convert bigint to size string using byte size units (ie …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create a new Authentication token with given permission","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Retrieves and prints out the block specified by the given …","","Prints out the genesis tipset","Prints out the canonical head of the chain","Reads and prints out a message referenced by the …","Reads and prints out ipld nodes referenced by the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Skips loading import CAR file and assumes it’s already …","If this is true, then we do not validate the imported …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Converts a human readable string to a u64 size.","","","","","","","","","","","","","Adds miner to Genesis.","","Creates new genesis template","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Connects to a peer","Disconnects from a peer","Lists libp2p swarm listener addresses","","Lists libp2p swarm peers","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Starts daemon process","","Process CLI subcommand"],"i":[0,0,0,0,0,1,1,0,0,1,1,1,1,1,0,1,1,0,2,1,3,0,0,2,1,3,2,1,3,0,2,1,3,2,1,3,0,2,0,3,2,1,3,2,1,3,2,1,3,3,0,3,0,2,1,3,2,1,3,2,1,3,3,0,0,3,3,2,1,3,2,1,3,2,1,3,3,3,3,0,0,2,2,1,3,3,0,0,0,0,0,3,3,2,1,3,3,0,0,3,3,3,0,2,1,3,2,1,3,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,0,2,1,3,4,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,4,4,4,4,4,4,4,4,4,4,5,6,7,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,9,10,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,0,12,12,12,12,12,12,12,12,12,12,12,0,13,0,13,0,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,14,15,14,15,0,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,17,17,18,18,18,0,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,19,20,21,21,21,21,0,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,22,23,24,23,25,25,25,0,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,26,27,28,29,29,29,29,29,29,29,29,29,29,0,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,30,31,32,33,34,35,32,33,36,33,37,0,0,0],"f":[null,null,null,[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[["bigint",3]],[["float",3],["parsefloaterror",3],["result",4,["float","parsefloaterror"]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["app",3]],[[],["app",3]],[[],["app",3]],[[["str",15],["i32",15]]],null,null,null,[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],null,null,[[["formatter",3]],["result",6]],[[["string",3],["vec",3,["string"]]],["string",3]],[[]],[[]],[[]],[[["argmatches",3]]],[[["argmatches",3]]],[[["argmatches",3]]],[[]],[[]],[[]],null,null,[[["jsonrpcerror",4]]],null,null,[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,null,null,null,null,null,[[]],[[]],[[]],null,[[["result",4,["string","jsonrpcerror"]],["string",3],["jsonrpcerror",4]]],[[["vec",3,["u8"]],["jsonrpcerror",4],["result",4,["vec","jsonrpcerror"]]]],[[["jsonrpcerror",4],["tipsetjson",3],["result",4,["tipsetjson","jsonrpcerror"]]]],[[["serialize",8],["jsonrpcerror",4],["result",4,["jsonrpcerror"]]]],[[["string",3]]],null,null,[[]],[[]],[[]],null,null,null,null,null,[[],[["result",4,["config","error"]],["config",3],["error",3]]],[[["bigint",3]],["string",3]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[]],[[]],[[]],null,null,null,[[]],[[]],[[]],[[],["option",4]],[[],["app",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[]],[[["argmatches",3]]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[]],[[["string",3]],[["jsonrpcerror",4],["vec",3,["string"]],["result",4,["vec","jsonrpcerror"]]]],[[["config",3]]],[[]],[[],["option",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[],["option",4]],[[],["app",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[]],[[["argmatches",3]]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[]],[[]],[[]],[[],["option",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],null,null,null,null,[[]],[[]],[[]],[[],["option",4]],null,[[]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[["usize",15]]],null,null,[[["formatter",3]],["result",6]],[[]],[[]],null,[[],["usize",15]],[[]],[[],["bool",15]],null,null,[[]],null,null,[[]],null,null,null,null,[[],["option",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],null,null,[[]],[[]],[[]],[[],["option",4]],[[],["app",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[]],[[["argmatches",3]]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],null,[[]],null,[[["str",15]],[["string",3],["sectorsize",4],["result",4,["sectorsize","string"]]]],[[]],[[]],[[],["option",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,[[]],[[]],null,null,null,null,[[["string",3]],[["result",4,["box"]],["box",3,["error"]]]],[[]],[[]],[[]],[[],["option",4]],[[],["app",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[]],[[["argmatches",3]]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[]],[[]],[[]],[[],["option",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],null,null,null,null,null,null,null,[[]],[[]],[[]],[[],["option",4]],[[],["app",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[]],[[["argmatches",3]]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[]],[[]],[[]],[[],["option",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],null,null,null,null,null,null,null,[[]],[[]],[[]],[[],["option",4]],[[],["app",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[]],[[["argmatches",3]]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[]],[[]],[[]],[[],["option",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],null,null,null,null,null,null,null,[[]],[[]],[[]],[[],["option",4]],[[],["app",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[]],[[["argmatches",3]]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[]],[[]],[[]],[[],["option",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[],["option",4]],[[],["app",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[]],[[["argmatches",3]]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[]],[[]],[[]],[[],["option",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[],["option",4]],[[],["app",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[]],[[["argmatches",3]]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[]],[[]],[[]],[[],["option",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,[[["config",3]]],[[]],[[["subcommand",4],["config",3]]]],"p":[[4,"Subcommand"],[3,"Cli"],[3,"CliOpts"],[4,"AuthCommands"],[13,"CreateToken"],[13,"ApiInfo"],[4,"ChainCommands"],[13,"Block"],[13,"Message"],[13,"ReadObj"],[3,"Config"],[3,"FetchCommands"],[4,"GenesisCommands"],[13,"NewTemplate"],[13,"AddMiner"],[4,"MpoolCommands"],[13,"Stat"],[4,"NetCommands"],[13,"Connect"],[13,"Disconnect"],[4,"StateCommands"],[13,"GetActor"],[13,"Lookup"],[13,"Power"],[4,"SyncCommands"],[13,"CheckBad"],[13,"MarkBad"],[13,"Wait"],[4,"WalletCommands"],[13,"Balance"],[13,"Export"],[13,"Sign"],[13,"Verify"],[13,"Has"],[13,"SetDefault"],[13,"Import"],[13,"New"]]},\
"forest_actor":{"doc":"","t":[3,17,3,3,3,3,3,3,17,3,3,17,3,6,6,17,17,17,17,17,13,13,13,13,13,13,13,13,4,17,3,3,17,3,17,3,17,3,17,6,6,13,3,17,3,17,3,3,3,3,17,17,17,17,17,3,3,3,3,17,3,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,6,3,3,3,17,0,14,5,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,5,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,11,11,5,5,11,5,5,5,0,0,11,0,11,11,11,0,11,11,11,11,5,0,0,0,12,11,11,11,11,0,12,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,0,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,13,4,13,3,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,13,3,3,13,4,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,13,3,13,3,3,4,3,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,3,3,13,3,13,3,3,3,13,13,6,6,3,3,4,13,3,3,17,17,13,3,3,17,3,3,3,3,13,3,3,3,13,3,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,12,11,11,11,11,11,11,12,11,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,12,12,12,12,12,12,12,11,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,12,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,17,17,3,3,13,3,13,3,3,3,17,17,17,17,17,17,17,13,3,13,13,3,13,3,13,3,4,13,3,13,3,3,13,13,13,13,6,3,17,17,3,3,3,13,3,13,3,13,3,13,3,17,3,3,3,13,3,17,17,3,3,3,17,17,17,17,17,17,17,17,17,17,17,17,17,4,3,3,17,13,17,17,17,3,3,3,3,3,3,13,13,3,6,13,3,13,3,17,3,13,13,3,17,17,3,3,3,3,3,13,3,17,13,3,3,3,3,3,3,3,17,17,17,17,17,17,17,3,13,3,3,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,12,12,11,12,12,12,12,12,12,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,5,11,11,12,12,12,11,11,12,11,11,12,12,12,12,12,12,12,12,5,5,12,11,5,11,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,11,12,11,11,11,11,11,11,11,11,11,11,11,12,12,5,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,5,11,11,11,11,12,5,12,5,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,5,5,12,12,12,12,12,12,12,12,12,11,11,12,12,12,12,12,12,12,12,11,12,12,12,12,11,12,12,11,12,12,12,12,12,12,5,5,5,5,11,11,11,11,11,11,11,11,12,12,12,12,5,12,12,12,12,12,11,12,12,12,11,11,12,5,5,12,11,5,11,12,12,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,12,12,12,12,11,11,12,12,11,11,11,11,11,11,11,12,12,5,5,11,11,11,12,12,5,12,12,12,5,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,11,12,3,13,3,13,3,13,13,3,13,3,13,3,4,3,13,3,3,13,3,3,13,3,3,3,3,11,12,11,12,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,12,12,12,12,12,12,12,12,12,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,17,17,17,17,17,3,17,17,17,17,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,13,13,3,17,3,17,17,3,4,3,3,17,13,3,3,13,3,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,11,11,11,11,11,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,12,12,11,12,12,12,12,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,17,17,17,3,13,13,3,3,3,13,3,13,3,17,4,13,17,17,17,17,6,3,13,13,3,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,12,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,5,12,12,12,12,11,11,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,3,13,3,3,3,13,3,13,4,13,17,3,3,13,3,13,4,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,11,11,11,11,11,12,12,12,12,12,12,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,12,3,3,3,17,3,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,13,4,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,17,3,3,3,3,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,3,3,13,3,13,13,3,13,13,3,4,13,3,13,3,13,3,3,3,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,12,12,12,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,12,12,11,12,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,17,5,5,3,3,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,3,13,13,6,6,3,13,6,3,4,13,13,6,3,13,6,3,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11],"n":["ACCOUNT_ACTOR_CODE_ID","ACCOUNT_ACTOR_CODE_ID_NAME","ActorError","ActorState","BURNT_FUNDS_ACTOR_ADDR","CALLER_TYPES_SIGNABLE","CHAOS_ACTOR_ADDR","CHAOS_ACTOR_CODE_ID","CHAOS_ACTOR_CODE_ID_NAME","CRON_ACTOR_ADDR","CRON_ACTOR_CODE_ID","CRON_ACTOR_CODE_ID_NAME","DEAL_WEIGHT_MULTIPLIER","DealID","DealWeight","EPOCHS_IN_DAY","EPOCHS_IN_HOUR","EPOCHS_IN_YEAR","EPOCH_DURATION_SECONDS","EXPECTED_LEADERS_PER_EPOCH","ErrForbidden","ErrIllegalArgument","ErrIllegalState","ErrInsufficientFunds","ErrNotFound","ErrPlaceholder","ErrSerialization","ErrTooManyProveCommits","ExitCode","FIRST_NON_SINGLETON_ADDR","INIT_ACTOR_ADDR","INIT_ACTOR_CODE_ID","INIT_ACTOR_CODE_ID_NAME","MARKET_ACTOR_CODE_ID","MARKET_ACTOR_CODE_ID_NAME","MINER_ACTOR_CODE_ID","MINER_ACTOR_CODE_ID_NAME","MULTISIG_ACTOR_CODE_ID","MULTISIG_ACTOR_CODE_ID_NAME","Map","MethodNum","Ok","PAYCH_ACTOR_CODE_ID","PAYCH_ACTOR_CODE_ID_NAME","POWER_ACTOR_CODE_ID","POWER_ACTOR_CODE_ID_NAME","QUALITY_BASE_MULTIPLIER","RESERVE_ADDRESS","REWARD_ACTOR_ADDR","REWARD_ACTOR_CODE_ID","REWARD_ACTOR_CODE_ID_NAME","SECONDS_IN_DAY","SECONDS_IN_HOUR","SECONDS_IN_YEAR","SECTOR_QUALITY_PRECISION","STORAGE_MARKET_ACTOR_ADDR","STORAGE_POWER_ACTOR_ADDR","SYSTEM_ACTOR_ADDR","SYSTEM_ACTOR_CODE_ID","SYSTEM_ACTOR_CODE_ID_NAME","Serialized","SysErrActorPanic","SysErrForbidden","SysErrIllegalActor","SysErrIllegalArgument","SysErrInsufficientFunds","SysErrInvalidMethod","SysErrInvalidReceiver","SysErrOutOfGas","SysErrReserved2","SysErrReserved3","SysErrReserved4","SysErrReserved5","SysErrReserved6","SysErrSenderInvalid","SysErrSenderStateInvalid","TokenAmount","VERIFIED_DEAL_WEIGHT_MULTIPLIER","VERIFIED_REGISTRY_ACTOR_ADDR","VERIFREG_ACTOR_CODE_ID","VERIFREG_ACTOR_CODE_ID_NAME","account","actor_error","actor_name_by_code","balance","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bytes","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","code","consensus_miner_min_power","cron","deduct_funds","default","deposit_funds","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","equivalent","equivalent","equivalent","exit_code","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_i64","from_u64","get_hash","get_hash","hash","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","initialize","initialize","initialize","initialize","initialize","initialize","initialize","initialize","initialize","initialize","initialize","initialize","initialize","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","invoke_code","is_account_actor","is_builtin_actor","is_fatal","is_ok","is_principal","is_singleton_actor","is_success","make_empty_map","make_map_with_root","make_map_with_root_and_bitwidth","market","miner","msg","multisig","ne","ne","ne","network","new","new","new","new_fatal","parse_uint_key","paych","power","reward","sequence","serialize","serialize","serialize","serialize","singletons","state","system","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","u64_key","util","verifreg","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","wrap","Actor","Constructor","Method","PubkeyAddress","State","address","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","constructor","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","drop","drop","drop","from","from","from","from_i64","from_u64","init","init","init","into","into","into","invoke_method","pubkey_address","serialize","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","Actor","Constructor","ConstructorParams","Entry","EpochTick","Method","State","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","default","default","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","entries","entries","eq","fmt","fmt","from","from","from","from","from","from_i64","from_u64","init","init","init","init","init","into","into","into","into","into","invoke_method","method_num","ne","receiver","serialize","serialize","serialize","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","Actor","Constructor","ConstructorParams","Exec","ExecParams","ExecReturn","Method","State","address_map","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","code_cid","constructor","constructor_params","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","exec","from","from","from","from","from","from","from_i64","from_u64","id_address","init","init","init","init","init","init","into","into","into","into","into","into","invoke_method","map_address_to_new_id","network_name","network_name","new","next_id","resolve_address","robust_address","serialize","serialize","serialize","serialize","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","ActivateDeals","ActivateDealsParams","Actor","AddBalance","ClientDealProposal","ComputeDataCommitment","ComputeDataCommitmentParams","ComputeDataCommitmentParamsRef","ComputeDataCommitmentReturn","Constructor","CronTick","DealArray","DealMetaArray","DealProposal","DealState","Method","OnMinerSectorsTerminate","OnMinerSectorsTerminateParams","OnMinerSectorsTerminateParamsRef","PIECE_CID_PREFIX","PROPOSALS_AMT_BITWIDTH","PublishStorageDeals","PublishStorageDealsParams","PublishStorageDealsReturn","STATES_AMT_BITWIDTH","SectorDataSpec","SectorDeals","SectorWeights","State","VerifyDealsForActivation","VerifyDealsForActivationParams","VerifyDealsForActivationParamsRef","VerifyDealsForActivationReturn","WithdrawBalance","WithdrawBalanceParams","amount","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","client","client_balance_requirement","client_collateral","client_signature","clone","clone","clone","clone_into","clone_into","clone_into","commds","constructor","deal_ids","deal_ids","deal_ids","deal_ids","deal_ids","deal_ops_by_epoch","deal_space","deal_weight","deals","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","duration","end_epoch","epoch","epoch","eq","eq","eq","escrow_table","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_i64","from_u64","ids","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","inputs","inputs","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","invoke_method","label","last_cron","last_updated_epoch","locked_table","ne","ne","ne","new","next_id","pending_proposals","piece_cid","piece_size","proposal","proposals","provider","provider_balance_requirement","provider_collateral","provider_or_client","sector_expiry","sector_expiry","sector_start_epoch","sector_type","sectors","sectors","sectors","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","slash_epoch","start_epoch","states","storage_price_per_epoch","to_owned","to_owned","to_owned","total_client_locked_colateral","total_client_storage_fee","total_locked","total_provider_locked_colateral","total_storage_fee","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","validate_and_compute_deal_weight","validate_deals_for_activation","verified_deal","verified_deal_weight","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","weight","ADDRESSED_PARTITIONS_MAX","ADDRESSED_SECTORS_MAX","Actor","AdvanceDeadlineResult","AllowCollisions","ApplyRewardParams","ApplyRewards","BASE_PENALTY_FOR_DISPUTED_WINDOW_POST","BASE_REWARD_FOR_DISPUTED_WINDOW_POST","BitFieldQueue","CHAIN_FINALITY","CONSENSUS_FAULT_INELIGIBILITY_DURATION","CONSENSUS_FAULT_REPORTER_DEFAULT_SHARE","CONTINUED_FAULT_PROJECTION_PERIOD","CRON_EVENT_PROCESS_EARLY_TERMINATIONS","CRON_EVENT_PROVING_DEADLINE","CRON_EVENT_WORKER_KEY_CHANGE","ChangeMultiaddrs","ChangeMultiaddrsParams","ChangeOwnerAddress","ChangePeerID","ChangePeerIDParams","ChangeWorkerAddress","ChangeWorkerAddressParams","CheckSectorProven","CheckSectorProvenParams","CollisionPolicy","CompactPartitions","CompactPartitionsParams","CompactSectorNumbers","CompactSectorNumbersParams","ConfirmSectorProofsParams","ConfirmSectorProofsValid","ConfirmUpdateWorkerKey","Constructor","ControlAddresses","CronEvent","CronEventPayload","DEAL_LIMIT_DENOMINATOR","DELCARATIONS_MAX","Deadline","DeadlineSectorMap","Deadlines","DeclareFaults","DeclareFaultsParams","DeclareFaultsRecovered","DeclareFaultsRecoveredParams","DenyCollisions","DisputeInfo","DisputeWindowedPoSt","DisputeWindowedPoStParams","EXPIRED_PRE_COMMIT_CLEAN_UP_DELAY","ExpirationExtension","ExpirationQueue","ExpirationSet","ExtendSectorExpiration","ExtendSectorExpirationParams","FAULT_DECLARATION_CUTOFF","FAULT_MAX_AGE","Fault","FaultDeclaration","GetControlAddressesReturn","INITIAL_PLEDGE_PROJECTION_PERIOD","MAX_AGGREGATED_PROOF_SIZE","MAX_AGGREGATED_SECTORS","MAX_CONTROL_ADDRESSES","MAX_MULTIADDR_DATA","MAX_PARTITIONS_PER_DEADLINE","MAX_PEER_ID_LENGTH","MAX_PRE_COMMIT_RANDOMNESS_LOOKBACK","MAX_PROVE_COMMIT_SIZE_V4","MAX_PROVE_COMMIT_SIZE_V5","MAX_SECTOR_EXPIRATION_EXTENSION","MIN_AGGREGATED_SECTORS","MIN_SECTOR_EXPIRATION","Method","MinerConstructorParams","MinerInfo","NEW_SECTORS_PER_PERIOD_MAX","OnDeferredCronEvent","PRE_COMMIT_CHALLENGE_DELAY","PRE_COMMIT_DEPOSIT_PROJECTION_PERIOD","PRE_COMMIT_SECTOR_BATCH_MAX_SIZE","Partition","PartitionKey","PartitionSectorMap","PoStPartition","PoStResult","PowerPair","PreCommitSector","PreCommitSectorBatch","PreCommitSectorBatchParams","PreCommitSectorParams","ProveCommitAggregate","ProveCommitAggregateParams","ProveCommitSector","ProveCommitSectorParams","REWARD_VESTING_SPEC","RecoveryDeclaration","RepayDebt","ReportConsensusFault","ReportConsensusFaultParams","SEALED_CID_PREFIX","SECTORS_MAX","SectorOnChainInfo","SectorPreCommitInfo","SectorPreCommitOnChainInfo","Sectors","State","SubmitWindowedPoSt","SubmitWindowedPoStParams","TERMINATION_LIFETIME_CAP","TerminateSectors","TerminateSectorsParams","TerminateSectorsReturn","TerminationDeclaration","TerminationResult","VestSpec","VestingFund","VestingFunds","WORKER_KEY_CHANGE_DELAY","WPOST_CHALLENGE_LOOKBACK","WPOST_CHALLENGE_WINDOW","WPOST_DISPUTE_WINDOW","WPOST_MAX_CHAIN_COMMIT_AGE","WPOST_PERIOD_DEADLINES","WPOST_PROVING_PERIOD","WindowedPoSt","WithdrawBalance","WithdrawBalanceParams","WorkerKeyChange","activate_unproven","activation","active_power","active_power","active_sectors","add","add","add","add_active_sectors","add_assign","add_assign","add_expiration_partitions","add_faults","add_initial_pledge","add_locked_funds","add_locked_funds","add_many_to_queue_values","add_pre_commit_clean_ups","add_pre_commit_deposit","add_sectors","add_sectors","add_to_queue","add_to_queue_values","add_values","add_values","advance_deadline","aggregate_network_fee","aggregate_proof","all_sector_nos","allocate_sector_numbers","allocated_sectors","amount","amount_requested","amt","amt","amt","apply_penalty","assign_deadlines","assign_sectors_to_deadlines","below_limit","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","can_extend_seal_proof_type","can_pre_commit_seal_proof","chain_commit_epoch","chain_commit_rand","check","check_balance_invariants","check_sector_health","check_vested_funds","cleanup_expired_pre_commits","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","consensus_fault_elapsed","consensus_fault_penalty","constructor","continue_deadline_cron","control_addresses","control_addresses","control_addresses","count","count","current_deadline","current_proving_period_start","cut","deadline","deadline","deadline","deadline","deadline","deadline","deadline","deadline","deadline_available_for_compaction","deadline_available_for_optimistic_post_dispute","deadline_cron_active","deadline_info","deadline_is_mutable","deadlines","deadlines","deal_ids","deal_ids","deal_weight","deal_weight","declare_faults_recovered","declare_faults_recovered","default","default","default","default","default","default","delete_precommitted_sectors","delete_sectors","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","detected_faulty_power","disputed_power","disputed_sectors","done","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","due","early_sectors","early_terminated","early_terminations","early_terminations","effective_at","empty","epoch","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","event_type","expected_day_reward","expected_reward_for_power","expected_storage_pledge","expiration","expiration","expirations_epochs","expirations_epochs","extensions","fault","faults","faults","faulty_power","faulty_power","faulty_power","fee_debt","find_precommitted_sectors","find_sector","find_sector","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","for_each","for_each","for_each_sector","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_i64","from_u64","funds","get","get_all_precommitted_sectors","get_available_balance","get_info","get_precommitted_sector","get_sector","get_unlocked_balance","has_sector_number","header1","header2","header_extra","ignored_sector_nos","ignored_sectors","index","info","info","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","initial_delay","initial_pledge","initial_pledge","initial_pledge_for_power","initialize","initialize","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","invoke_method","is_empty","is_empty","is_empty","is_live","is_zero","iter","iter","iter","len","len","live_power","live_sectors","live_sectors","load","load_deadline","load_deadlines","load_for_proof","load_partition","load_partition_snapshot","load_partitions_for_dispute","load_partitions_sectors_max","load_sector","load_sector_infos","load_vesting_funds","load_with_fault_max","locked_funds","locked_reward_from_reward","mask_sector_numbers","max_prove_commit_duration","miner","multi_address","multi_addresses","must_get","ne","ne","ne","ne","ne","ne","ne","ne","ne","neg","new","new","new","new","new","new","new","new","new","new","new_control_addresses","new_deadline_info","new_deadline_info_from_offset_and_epoch","new_expiration","new_faulty_power","new_id","new_multi_addrs","new_worker","new_worker","on_time_pledge","on_time_sectors","optimistic_post_submissions","optimistic_proofs_amt","optimistic_proofs_snapshot_amt","owner","owner","owner","partition","partition","partition","partition","partition","partitions","partitions","partitions","partitions","partitions","partitions_amt","partitions_posted","partitions_processed","partitions_snapshot_amt","peer_id","peer_id","penalty","pending_owner_address","pending_worker_key","pledge_delta","pledge_penalty_for_continued_fault","pledge_penalty_for_invalid_windowpost","pledge_penalty_for_termination","pledge_penalty_for_termination_lower_bound","pop_early_terminations","pop_early_terminations","pop_early_terminations","pop_expired_partitions","pop_expired_sectors","pop_expired_sectors","pop_until","pop_until","post_index","power_delta","power_delta","pre_commit_deposit","pre_commit_deposit_for_power","pre_commit_deposits","pre_commit_epoch","pre_committed_sectors","pre_committed_sectors_cleanup","previously_faulty_power","process_deadline_end","proof","proofs","proving_period_start","put_precommitted_sectors","put_sectors","qa","qa_power_for_sector","qa_power_for_weight","quant","quant_spec_every_deadline","quant_spec_for_deadline","quant_spec_for_deadline","quantization","raw","record_early_termination","record_faults","record_faults","record_missed_post","record_post_proofs","record_proven_sectors","record_skipped_faults","recorded_deadline_info","recover_faults","recovered_power","recoveries","recoveries","recovering_power","remove","remove_partitions","remove_recoveries","remove_sectors","repay_debts","repay_partial_debt_in_priority_order","replace_capacity","replace_sector_deadline","replace_sector_number","replace_sector_partition","replace_sectors","replace_sectors","replaced_day_reward","replaced_sector_age","reschedule_all_as_faults","reschedule_as_faults","reschedule_expirations","reschedule_expirations","reschedule_recovered","reschedule_sector_expirations","reschedule_sector_expirations","retracted_recovery_power","reward","reward_for_consensus_slash_report","reward_for_disputed_window_post","save_deadlines","save_info","save_vesting_funds","seal_proof","seal_proof","seal_proof_sector_maximum_lifetime","seal_rand_epoch","sealed_cid","sealed_cid","sector_deals_max","sector_number","sector_number","sector_number","sector_number","sector_numbers","sector_size","sectors","sectors","sectors","sectors","sectors","sectors","sectors","sectors","sectors","sectors","sectors_processed","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","skipped","step_duration","store","sub_assign","take_post_proofs","terminate_sectors","terminate_sectors","terminated","terminations","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","total_faulty_power","total_sectors","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unlock_unvested_funds","unlock_unvested_funds","unlock_vested_funds","unlock_vested_funds","unproven","unproven_power","update_deadline","validate_bf_state","validate_power_state","validate_state","validate_state","validate_state","verified_deal_weight","verified_deal_weight","vest_period","vesting_funds","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","window_post_partition_sectors","window_post_proof_type","window_post_proof_type","worker","worker","worker","zero","0","Actor","AddSigner","AddSignerParams","Approve","ApproveReturn","Cancel","ChangeNumApprovalsThreshold","ChangeNumApprovalsThresholdParams","Constructor","ConstructorParams","LockBalance","LockBalanceParams","Method","ProposalHashData","Propose","ProposeParams","ProposeReturn","RemoveSigner","RemoveSignerParams","State","SwapSigner","SwapSignerParams","Transaction","TxnID","TxnIDParams","add_signer","amount","amount_locked","applied","applied","approve","approved","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cancel","change_num_approvals_threshold","clone","clone","clone","clone_into","clone_into","clone_into","code","code","constructor","decrease","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","eq","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_i64","from_u64","id","increase","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","initial_balance","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","invoke_method","is_signer","key","lock_balance","method","method","method","ne","new_threshold","next_tx_id","num_approvals_threshold","num_approvals_threshold","params","params","params","pending_txs","proposal_hash","propose","purge_approvals","remove_signer","requester","ret","ret","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","set_locked","signer","signer","signers","signers","start_epoch","start_epoch","start_epoch","swap_signer","to","to","to","to","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","txn_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unlock_duration","unlock_duration","unlock_duration","value","value","value","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","DEAL_WEIGHT_MULTIPLIER","EPOCHS_IN_DAY","EPOCHS_IN_HOUR","EPOCHS_IN_YEAR","EPOCH_DURATION_SECONDS","EXPECTED_LEADERS_PER_EPOCH","QUALITY_BASE_MULTIPLIER","SECONDS_IN_DAY","SECONDS_IN_HOUR","SECONDS_IN_YEAR","SECTOR_QUALITY_PRECISION","VERIFIED_DEAL_WEIGHT_MULTIPLIER","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","from","from","from","init","init","init","initialize","initialize","initialize","into","into","into","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","Actor","Collect","Constructor","ConstructorParams","LANE_STATES_AMT_BITWIDTH","LaneState","MAX_LANE","MAX_SECRET_SIZE","Merge","Method","ModVerifyParams","PaymentVerifyParams","SETTLE_DELAY","Settle","SignedVoucher","State","UpdateChannelState","UpdateChannelStateParams","actor","amount","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","channel_addr","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","collect","constructor","data","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","extra","extra","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from_i64","from_u64","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","invoke_method","lane","lane","lane_states","merges","method","min_settle_height","min_settle_height","ne","ne","ne","ne","new","nonce","nonce","nonce","proof","redeemed","secret","secret_pre_image","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","settle","settling_at","signature","signing_bytes","sv","time_lock_max","time_lock_min","to","to","to_owned","to_owned","to_owned","to_owned","to_send","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update_channel_state","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","Actor","CONSENSUS_MINER_MIN_MINERS","CRON_QUEUE_AMT_BITWIDTH","CRON_QUEUE_HAMT_BITWIDTH","Claim","Constructor","CreateMiner","CreateMinerParams","CreateMinerReturn","CronEvent","CurrentTotalPower","CurrentTotalPowerReturn","EnrollCronEvent","EnrollCronEventParams","MAX_MINER_PROVE_COMMITS_PER_EPOCH","Method","OnEpochTickEnd","PROOF_VALIDATION_BATCH_AMT_BITWIDTH","SECTOR_TERMINATION_EXPIRED","SECTOR_TERMINATION_FAULTY","SECTOR_TERMINATION_MANUAL","SectorTermination","State","SubmitPoRepForBulkVerify","UpdateClaimedPower","UpdateClaimedPowerParams","UpdatePledgeTotal","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","callback_payload","claims","clone","clone","clone_into","clone_into","cron_event_queue","current_total_power","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","eq","event_epoch","first_cron_epoch","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from_i64","from_u64","get_claim","id_address","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into_total_locked","invoke_method","miner_above_min_power_count","miner_addr","miner_count","miner_nominal_power_meets_consensus_minimum","miner_power","multiaddrs","ne","new","owner","payload","peer","pledge_collateral","proof_validation_batch","quality_adj_power","quality_adj_power","quality_adj_power_smoothed","quality_adjusted_delta","raw_byte_delta","raw_byte_power","raw_byte_power","robust_address","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","set_claim","this_epoch_pledge_collateral","this_epoch_qa_power_smoothed","this_epoch_quality_adj_power","this_epoch_raw_byte_power","to_owned","to_owned","total_bytes_committed","total_pledge_collateral","total_qa_bytes_committed","total_quality_adj_power","total_raw_byte_power","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","window_post_proof_type","window_post_proof_type","worker","Actor","AwardBlockReward","AwardBlockRewardParams","BASELINE_EXPONENT","BASELINE_INITIAL_VALUE","Constructor","INIT_BASELINE_POWER","Linear","Method","None","PENALTY_MULTIPLIER","Reward","State","ThisEpochReward","ThisEpochRewardReturn","UpdateNetworkKPI","VestingFunction","amount_vested","amount_withdrawn","baseline_total","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cumsum_baseline","cumsum_realized","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","effective_baseline_power","effective_network_time","end_epoch","epoch","eq","eq","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from_i64","from_i64","from_u64","from_u64","gas_reward","init","init","init","init","init","init","init","init","init","init","initialize","initialize","initialize","into","into","into","into","into","into","into","into","into","into","into_total_storage_power_reward","invoke_method","miner","ne","ne","ne","new","penalty","serialize","serialize","serialize","serialize","serialize","simple_total","start_epoch","this_epoch_baseline_power","this_epoch_baseline_power","this_epoch_reward","this_epoch_reward_smoothed","this_epoch_reward_smoothed","to_owned","to_owned","to_owned","to_owned","total_storage_power_reward","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","vesting_function","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","win_count","BURNT_FUNDS_ACTOR_ADDR","CHAOS_ACTOR_ADDR","CRON_ACTOR_ADDR","FIRST_NON_SINGLETON_ADDR","INIT_ACTOR_ADDR","RESERVE_ADDRESS","REWARD_ACTOR_ADDR","STORAGE_MARKET_ACTOR_ADDR","STORAGE_POWER_ACTOR_ADDR","SYSTEM_ACTOR_ADDR","VERIFIED_REGISTRY_ACTOR_ADDR","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","from","from","from","from","from","from","from","from","from","from","init","init","init","init","init","init","init","init","init","init","initialize","initialize","initialize","initialize","initialize","initialize","initialize","initialize","initialize","initialize","into","into","into","into","into","into","into","into","into","into","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","Actor","Constructor","Method","State","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","constructor","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","drop","drop","drop","from","from","from","from_i64","from_u64","init","init","init","into","into","into","invoke_method","serialize","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","ActorDowncast","BALANCE_TABLE_BITWIDTH","BalanceTable","Multimap","Set","SetMultimap","add","add","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chaos","collect_keys","delete","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","downcast_default","downcast_fatal","downcast_wrap","drop","drop","drop","drop","eq","fmt","for_all","for_each","for_each","for_each","from","from","from","from","from_root","from_root","from_root","from_root","get","get","get","has","init","init","init","init","into","into","into","into","math","must_subtract","new","new","new","new","new_set_with_bitwidth","put","put","put_many","remove","remove_all","remove_all","root","root","root","root","smooth","subtract_with_minimum","total","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","AbortWith","AbortWithArgs","Actor","CallerValidation","CallerValidationArgs","Constructor","CreateActor","CreateActorArgs","DeleteActor","InspectRuntime","InspectRuntimeReturn","Method","MutateState","MutateStateArgs","ResolveAddress","ResolveAddressResponse","Send","SendArgs","SendReturn","State","abort_with","address","address","addrs","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","branch","branch","caller","caller_validation","cid","code","code","constructor","create_actor","curr_epoch","current_balance","default","delete_actor","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","from","from","from","from","from","from","from","from","from","from","from","from_i64","from_u64","init","init","init","init","init","init","init","init","init","init","init","inspect_runtime","into","into","into","into","into","into","into","into","into","into","into","invoke_method","message","method","mutate_state","params","receiver","resolve_address","return_value","send","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","state","success","to","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","types","uncontrolled","undef_address","undef_cid","unmarshallable","value","value","value","value_received","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","PRECISION","poly_parse","poly_val","AlphaBetaFilter","DEFAULT_ALPHA","DEFAULT_BETA","DENOM","EPSILON","FilterEstimate","LN_2","NUM","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","eq","estimate","extrapolate","extrapolated_cum_sum_of_ratio","fmt","from","from","from","from","from","from","from","from","init","init","init","init","init","init","init","init","initialize","initialize","initialize","initialize","initialize","initialize","into","into","into","into","into","into","into","into","ln","load","ne","new","next_estimate","position","serialize","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","velocity","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","Actor","AddVerifiedClient","AddVerifier","AddVerifierClientParams","AddVerifierParams","BytesParams","Constructor","DataCap","MINIMUM_VERIFIED_DEAL_SIZE","Method","RemoveVerifier","RestoreBytes","RestoreBytesParams","State","UseBytes","UseBytesParams","VerifierParams","add_verified_client","add_verifier","address","address","allowance","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","constructor","deal_size","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","eq","eq","equivalent","fmt","fmt","from","from","from","from","from","from","from_i64","from_u64","init","init","init","init","init","init","initialize","into","into","into","into","into","into","invoke_method","ne","ne","new","remove_verifier","restore_bytes","root_key","serialize","serialize","serialize","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","use_bytes","verified_clients","verifiers","vzip","vzip","vzip","vzip","vzip","vzip"],"q":["forest_actorforest_actor::account","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","forest_actor::cron","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","forest_actor::init","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","forest_actor::marketforest_actor::minerforest_actor::multisigforest_actor::network","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","forest_actor::paychforest_actor::powerforest_actor::rewardforest_actor::singletons","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","forest_actor::system","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","forest_actor::util","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","forest_actor::util::chaosforest_actor::util::math","","","forest_actor::util::smooth","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","forest_actor::verifreg","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","The error type that gets returned by actor method calls.","State of all actor implementations.","Distinguished AccountActor that is the destination of all …","Set of actor code types that can represent external …","","","","","","","Quality multiplier for unverified deals in a sector","Deal identifier used in market and miner actors","Deal weight","","","","Duration of each tipset epoch.","The expected number of block producers in each epoch.","Indicates an action is disallowed.","Indicates a method parameter is invalid.","Indicates an actor’s internal state is invalid.","Indicates a balance of funds is insufficient.","Indicates a requested resource does not exist.","","Indicates de/serialization failure within actor code.","Power actor specific exit code.","ExitCode defines the exit code from the VM execution.","Defines first available ID address after builtin actors","","","","","","","","","","Map type to be used within actors. The underlying type is …","Method number indicator for calling actor methods.","","","","","","Quality multiplier for committed capacity (no deals) in a …","","","","","","","","Precision used for making QA power calculations","","","","","","Serialized bytes to be used as parameters into actor …","Used for catching panics currently. (marked as …","Indicates a message execution is forbidden for the caller.","Indicates actor code performed a disallowed operation. …","Indicates an invalid argument passed to a runtime method.","Indicates a message invocation out of sequence.","Indicates failure to find a method in an actor.","Indicates a message sender has insufficient funds for a …","Indicates message execution (including subcalls) used …","Reserved exit codes, do not use.","","","","","Indicates failure to find an actor in the state tree.","Indicates failure to find the code for an actor.","Token type to be used within the VM.","Quality multiplier for verified deals in a sector","","","","","Convenience macro for generating Actor Errors","Given an actor code Cid, returns the name of the actor.","Tokens available to the actor.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns serialized bytes.","","","","","","","","","Link to code for the actor.","Returns the minimum storage power required for each seal …","","Safely deducts funds from an Actor","","Deposits funds to an Actor","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Deserializes the serialized bytes into a defined type.","","","","","","","","","","","","","","","","","","","","","","","","","Returns the exit code of the error.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns true if the code belongs to an account actor.","Returns true if the code <code>Cid</code> belongs to a builtin actor.","Returns true if error is fatal.","Returns true when the exit code is <code>Ok</code>.","Tests whether a code CID represents an actor that can be …","Returns true if the code belongs to a singleton actor.","returns true if the exit code was a success","Create a hamt with a custom bitwidth.","Create a map with a root cid.","Create a map with a root cid.","","","Error message of the actor error.","","","","","","Constructor for actor state","","Constructor if data is encoded already","","","","","","Sequence of the actor.","","","Contructor for encoding Cbor encodable structure.","","","Link to the state of the actor.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Prefix error message with a string message.","Account Actor","","Account actor methods available","","State includes the address for the actor","","","","","","","","Constructor for Account actor","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Cron actor","","Constructor parameters for Cron actor, contains entries …","","","Cron actor methods available","Cron actor state which holds entries to call during epoch …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Entries is a set of actors (and corresponding methods) to …","Entries is a set of actors (and corresponding methods) to …","","","","","","","","","","","","","","","","","","","","","","The method number to call (must accept empty parameters)","","The actor to call (ID address)","","","","","","","","","","","","","","","","","","","","","","","","","Init actor","","Init actor Constructor parameters","","Init actor Exec Params","Init actor Exec Return value","Init actor methods available","State is reponsible for creating","","","","","","","","","","","","","","","Init actor constructor","","","","","","","","","","","","","","","","","","","","","","","","Exec init actor","","","","","","","","","ID based address for created actor","","","","","","","","","","","","","","Allocates a new ID address and stores a mapping of the …","","","","","ResolveAddress resolves an address to an ID-address, if …","Reorg safe address for actor","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Market Actor","","ClientDealProposal is a DealProposal signed by a client","","","","","","","A specialization of a array to deals.","A specialization of a array to deals.","Note: Deal Collateral is only released and returned to …","","Market actor methods available","","","","Cid prefix for piece Cids","","","","","","","","","Market actor state","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Metadata cached for efficient iteration over deals. …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Total amount held in escrow, indexed by actor address …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Arbitrary client chosen label to apply to the deal","","","Amount locked, indexed by actor address. Note: the …","","","","","Deal id state sequential incrementer","PendingProposals tracks dealProposals that have not yet …","","","","Proposals are deals that have been proposed and not yet …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Amt<DealID, DealState>","","","","","Total Client Collateral that is locked -> unlocked when …","Total storage fee that is locked in escrow -> unlocked …","","Total Provider Collateral that is locked -> unlocked when …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Validates a collection of deal dealProposals for …","","","","","","","","","","","","","","","","","","","","","","","","Computes weight for a deal proposal, which is a function …","The maximum number of partitions that may be required to …","The maximum number of sector infos that may be required …","Miner Actor here in order to update the Power Actor to v3.","","","","","Base penalty for a successful disputed window post proof.","Base reward for successfully disputing a window posts …","Wrapper for working with an AMTChainEpoch*Bitfield …","Epochs after which chain state is final with overwhelming …","Number of epochs after a consensus fault for which a …","","","","","","","","","","","","","","","","","","","","","","","","","","","Ratio of sector size to maximum deals per sector. The …","Maximum number of unique “declarations” in batch …","Deadline holds the state for all sectors due at a …","Maps deadlines to partition maps.","Deadlines contains Deadline objects, describing the …","","","","","","","","","The delay between pre commit expiration and clean up from …","","A queue of expiration sets by epoch, representing the …","ExpirationSet is a collection of sector numbers that are …","","","Minimum period before a deadline’s challenge window …","The maximum age of a fault before the sector is …","","","","","Maximum total aggregated proof size.","Maximum amount of sectors that can be aggregated.","Maximum number of control addresses a miner may register.","MaxMultiaddrData is the maximum amount of data that can …","Maximum number of partitions that will be assigned to a …","MaxPeerIDLength is the maximum length allowed for any …","","","","Maximum number of epochs past the current epoch a sector …","Minimum amount of sectors that can be aggregated.","Minimum number of epochs past the current epoch a sector …","Storage Miner actor methods available","Storage miner actor constructor params are defined here …","Static information about miner","The maximum number of new sectors that may be staged by a …","","Number of epochs between publishing the precommit and …","","The maximum number of sector pre-commitments in a single …","","","Maps partitions to sector bitfields.","","","","","","","","","","","","","","","","","Prefix for sealed sector CIDs (CommR).","The maximum number of sectors that a miner can have …","Information stored on-chain for a proven sector.","","Information stored on-chain for a pre-committed sector.","","Balance of Miner Actor should be greater than or equal to …","","Information submitted by a miner to provide a Window PoSt.","","","","","","","Specification for a linear vesting schedule.","","Represents the vesting table state for the miner. It is a …","Staging period for a miner worker key change. Finality is …","Lookback from the deadline’s challenge window opening …","The duration of a deadline’s challenge window, the …","","The maximum distance back that a valid Window PoSt must …","The number of non-overlapping PoSt deadlines in each …","The period over which all a miner’s active sectors will …","","","","","Activates unproven sectors, returning the activated power.","Epoch during which the sector proof was accepted","Active power is power of non-faulty sectors.","Power that is currently active (not faulty)","Active sectors are those that are neither terminated nor …","Adds sectors and power to the expiration set in place.","Records the given sector bitfield at the given …","Records the given sector bitfield at the given partition …","Adds a collection of sectors to their on-time target …","","","Adds some partition numbers to the set expiring at an …","marks a set of sectors faulty","","First vests and unlocks the vested funds AND then locks …","","","","","Adds sectors to a deadline. It’s the caller’s …","AddSectors adds new sectors to the partition. The sectors …","Adds values to the queue entry for an epoch.","","Records the given sectors at the given deadline/partition …","Records the given sectors at the given partition.","","","","","Marks a set of sector numbers as having been allocated. …","Allocated sector IDs. Sector IDs can never be reused once …","","","","","","","","Assign new sectors to deadlines.","Returns true if we’re below the partition/sector limit. …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Checks whether a seal proof type is supported for new …","List of proof types which can be used when creating new …","The epoch at which these proofs is being committed to a …","The ticket randomness on the chain at the …","Check validates all bitfields and counts the number of …","","","CheckVestedFunds returns the amount of vested funds that …","","","","","","","","","","","","","","","","","","","","","","The next epoch this miner is eligible for certain …","","","","Additional addresses that are permitted to submit …","","","Counts the number of partitions & sectors within the map.","Counts the number of partitions & sectors within the map.","Index of the deadline within the proving period beginning …","","Cut cuts the elements from the bits in the given bitfield …","","The deadline index which the submission targets.","","","The deadline to which the faulty sectors are assigned, in …","The deadline to which the recovered sectors are assigned, …","","","","","","Returns deadline calculations for the current (according …","Returns true if the deadline at the given index is …","Returns a sorted vec of deadlines in the map.","The sector numbers due for PoSt at each deadline in the …","","","Integral of active deals over sector lifetime, 0 if …","Integral of active deals over sector lifetime","","Declares sectors as recovering. Non-faulty and already …ower of new faults and failed recoveries","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Sectors expiring “early” due to being faulty for too …","Subset of terminated that were before their committed …","Partitions with sectors that terminated early.","Deadlines with outstanding fees for early sector …","","","","","","","","","","","","","","","","Expected one day projection of reward for sector computed …","The projected block reward a sector would earn over some …","Expected twenty day projection of reward for sector …","","Epoch during which the sector expires","Maps epochs to partitions that <em>may</em> have sectors that …","Maps epochs sectors that expire in or before that epoch. …","","","Subset of sectors detected/declared faulty and not yet …","","Memoized sum of faulty power in partitions.","Power that is currently faulty","Power of currently-faulty sectors. FaultyPower <= …","Absolute value of debt this miner owes from unpaid fees.","Gets and returns the requested pre-committed sectors, …","Returns the deadline and partition index for a sector …","Returns the deadline and partition index for a sector …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Unclaimed funds. Actor balance - (locked funds, precommit …","","","","Unclaimed funds that are not locked – includes funds …","","","","","","A subset of <code>sectors</code> that should be ignored.","Partitions are numbered per-deadline, from zero.","Contains static info about this miner","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Sum of initial pledge requirements of all active sectors.","Pledge collected to commit this sector","Computes the pledge requirement for committing new …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A set is empty if it has no sectors. The power and pledge …","","","","","Walks the deadlines in deadline order.","Walks the partitions in the map, in order of increasing …","","Counts all sectors in the expiration set.","","Power of not-yet-terminated sectors (incl faulty & …","Live sectors are those that are not terminated (but may …","The number of non-terminated sectors in this deadline …","","","","Loads info for a set of sectors to be proven. If any of …","","","","The maximum number of partitions that may be required to …","","Loads sector info for a sequence of sectors.","Loads the vesting funds table from the store.","Loads sector info for a sequence of sectors, substituting …","Total rewards and added funds locked in vesting table","Returns the amount of a reward to vest, and the vesting …","","Maximum duration to allow for the sealing process for …","","Vector of byte arrays representing Libp2p multi-addresses …","","","","","","","","","","","","","","Loads a queue root.","","","","","","","","","","","","","","","","","Must be an ID address","Pledge total for the on-time sectors","Sectors expiring “on time” at the end of their …","","","","Account that owns this miner","","","","","","Partition index within the deadline containing the faulty …","Partition index within the deadline containing the …","Returns a sorted vec of partitions in the map.","","Partitions in this deadline, in order. The keys of this …","The partitions being proven.","","","","","","Libp2p identity that should be used when connecting to …","","","A proposed new owner account for this miner. Must be …","Optional worker key to update at an epoch","","The penalty for a sector continuing faulty for another …","","Penalty to locked pledge collateral for the termination …","This is the SP(t) penalty for a newly faulty sector that …","","","Pops up to <code>max_sectors</code> early terminated sectors from all …","","PopExpiredSectors terminates expired sectors from all …","PopExpiredSectors traverses the expiration queue up to …","Removes and returns all values with keys less than or …","Removes and aggregates entries from the queue up to and …","","Power activated or deactivated (positive or negative).","","","Computes the PreCommit deposit given sector qa weight and …","Total funds locked as pre_commit_deposit","","Sectors that have been pre-committed but not yet proven. …","","Power that was faulty before this advance (including …","Processes all PoSt submissions, marking unproven sectors …","","Array of proofs, one per distinct registered proof type …","The first epoch in this miner’s current proving period. …","Stores a pre-committed sector info, failing if the sector …","","","Returns the quality-adjusted power for a sector.","Returns the power for a sector size and weight.","","pre-commit expiry","","Returns deadline calculations for the current (according …","","","Record the epoch of any sectors expiring early, for …","","Declares a set of sectors faulty. Already faulty sectors …","Marks all non-faulty sectors in the partition as faulty …","","Processes a series of posts, recording proven partitions …","Discovers how skipped faults declared during post …","","Removes sector numbers from faults and thus from …","","Subset of faulty sectors expected to recover on next PoSt …","","Power of expected-to-recover sectors. RecoveringPower <= …","Removes sectors and power from the expiration set in …","RemovePartitions removes the specified partitions, …","Removes sectors from recoveries and recovering power. …","Remove some sectors from the queue. The sectors may be …","Repays the full miner actor fee debt.  Returns the amount …","Draws from vesting table and unlocked funds to repay up …","Whether to replace a “committed capacity” no-deal …","The committed capacity sector to replace, and its …","","","Removes some sectors and adds some others. The sectors …","Replaces a number of “old” sectors with new ones. The …","Day reward of sector this sector replace or zero","Age of sector this sector replaced or zero","Re-schedules <em>all</em> sectors to expire at an early expiration …","Re-schedules sectors to expire at an early expiration …","Reschedules some sectors to a new (quantized) expiration …","RescheduleExpirations moves expiring sectors to the …","Removes sectors from any queue entries in which they …","RescheduleSectorExpirations reschedules the expirations …","Schedules each sector to expire at its next deadline end. …","","","","","","","Saves the vesting table to the store.","","The seal proof type implies the PoSt proofs","Maximum duration to allow for the sealing process for …","","CommR","CommR","Determine maximum number of deal miner’s sector can hold","","","","","","Amount of space in each sector committed to the network …","A bitfield of all sectors in the proven partitions.","Sector numbers in this partition, including faulty, …","Information for all proven and not-yet-garbage-collected …","Sectors maps epochs at which sectors expired, to …","","","","Sectors in the partition being declared faulty.","Sectors in the partition being declared recovered.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Sectors skipped while proving that weren’t already …","","","","","","Marks a collection of sectors as terminated. The sectors …","Subset of sectors terminated but not yet removed from …","","","","","","","","","","","","Total faulty power after detecting faults (before …","The total number of sectors in this deadline (incl deadnlocks an amount of funds that have <em>not yet vested</em>, if …","","Unlocks all vesting funds that have vested before the …","","Unproven sectors in this partition. This bitfield will be …","Power of yet-to-be-proved sectors (never faulty).","","","Test invariants about the partition power are valid.","","validates a set of assertions that must hold for …","","Integral of active verified deals over sector lifetime","Integral of active verified deals over sector lifetime","","VestingFunds (Vesting Funds schedule for the miner).","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The number of sectors in each Window PoSt partition …","The proof type used by this miner for sealing sectors.","","Worker account for this miner This will be the key that …","","","","","Multisig Actor","","Add signer params.","","Parameters for approve and cancel multisig functions.","","","Propose method call parameters","","Constructor parameters for multisig actor.","","Lock balance call params.","Multisig actor methods available","Data for a BLAKE2B-256 to be attached to methods …","","Propose method call parameters.","Propose method call return.","","Remove signer params.","Multisig actor state","","Swap signer multisig method params","Transaction type used in multisig actor","Transaction ID type","Parameters for approve and cancel multisig functions.","Multisig actor function to add signers to multisig","","Returns amount locked in multisig contract","Applied indicates if the transaction was applied as …","Applied indicates if the transaction was applied as …","Multisig actor approve function","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Multisig actor cancel function","Multisig actor function to change number of approvals …","","","","","","","Code is the exitcode of the transaction, if Applied is …","Code is the exitcode of the transaction, if Applied is …","Constructor for Multisig actor","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Checks if <code>address</code> is in the list of signers","","Multisig actor function to change number of approvals …","","","","","","","","","","","","","Optional hash of proposal to ensure an operation can only …","Multisig actor propose function","Iterates all pending transactions and removes an address …","Multisig actor function to remove signers to multisig","","Ret is the return value of the transaction, if Applied is …","Ret is the return value of the transaction, if Applied is …","","","","","","","","","","","","","","","Set locked amount in multisig state.","","","","","","","","Multisig actor function to swap signers to multisig","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","TxnID is the ID of the proposed transaction.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Quality multiplier for unverified deals in a sector","","","","Duration of each tipset epoch.","The expected number of block producers in each epoch.","Quality multiplier for committed capacity (no deals) in a …","","","","Precision used for making QA power calculations","Quality multiplier for verified deals in a sector","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Payment Channel actor","","","Constructor parameters for payment channel actor","","The Lane state tracks the latest (highest) voucher nonce …","Maximum number of lanes in a channel","","Specifies which <code>lane</code>s to be merged with what <code>nonce</code> on …","Payment Channel actor methods available","Modular Verification method","Payment Verification parameters","","","A voucher is sent by <code>from</code> to <code>to</code> off-chain in order to …","A given payment channel actor is established by <code>from</code> to …","","","","Amount voucher can be redeemed for","","","","","","","","","","","","","","","","","","","","","ChannelAddr is the address of the payment channel this …","","","","","","","","","","Constructor for Payment channel actor","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","(optional) Specified by <code>from</code> to add a verification method …","","","","","","","","","","","","","","","","","","Channel owner, who has funded the actor.","","","","","","","","","","","","","","","","","","","","","","","","","","Specifies which lane the Voucher merges into (will be …","Collections of lane states for the channel, maintained in …","(optional) Set of lanes to be merged into <code>lane</code>","","Height before which the channel <code>ToSend</code> cannot be …","(optional) Can extend channel min_settle_height if needed","","","","","","","","Set by <code>from</code> to prevent redemption of stale vouchers on a …","","","","(optional) Used by <code>to</code> to validate","","","","","","","","","","Height at which the channel can be collected.","Sender’s signature over the voucher (sign on none)","","","Max epoch beyond which the voucher cannot be redeemed set …","Min epoch before which the voucher cannot be redeemed","Recipient of payouts from channel.","","","","","","Amount successfully redeemed through the payment channel, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Storage Power Actor","Minimum power of an individual miner to meet the …","","","","Constructor for Storage Power Actor","","","","","","","","","Maximum number of prove commits a miner can submit in one …","Storage power actor methods available","","","Implicit termination after all deals expire","Implicit termination due to unrecovered fault","Unscheduled explicit termination by the miner","","Storage power actor state","","","","","","","","","","","","","","","","","","","","","","","","","","Claimed power for each miner.","","","","","A queue of events to be triggered by cron, indexed by …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","First epoch in which a cron task may be stored. Cron will …","","","","","","","","","","","","","","","","Canonical ID-based address for the actor.","","","","","","","","","","","","","","","","","","","","","","","Number of miners having proven the minimum consensus …","","","Checks power actor state for if miner meets minimum …","","","","","","","","","","Sum of quality adjusted power for a miner’s sectors.","","","","","Sum of raw byte power for a miner’s sectors.","","Re-org safe address for created actor.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Miner’s proof type used to determine minimum miner size","","","Reward Actor","","","Floor(e^(ln[1 + 200%] / epochsInYear) * 2^128 Q.128 …","","","1EiB","","Reward actor methods available","","PenaltyMultiplier is the factor miner penaltys are scaled …","","Reward actor state","","","","Defines vestion function type for reward actor.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Target CumsumRealized needs to reach for …","CumsumRealized is cumulative sum of network power capped …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","EffectiveBaselinePower is the baseline power at the …","Ceiling of real effective network time <code>theta</code> based on …","","Epoch tracks for which epoch the Reward was computed.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The baseline power the network is targeting at st.Epoch.","","The reward to be paid in per WinCount to block producers. …","Smoothed <code>this_epoch_reward</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Distinguished AccountActor that is the destination of all …","","","Defines first available ID address after builtin actors","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","System actor.","","System actor methods.","System actor state.","","","","","","","System actor constructor.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Trait to allow multiple error types to be able to be …","","Balance table which handles getting and updating token …","Multimap stores multiple values per key in a Hamt of Amts.…","Set is a Hamt with empty values for the purpose of acting …","SetMultimap is a hamt with values that are also a hamt …","Adds token amount to previously initialized account.","Adds a value for a key.","","","","","","","","","","Collects all keys from the set into a vector.","Deletes key from set.","","","","","","","","","Downcast a dynamic std Error into an <code>ActorError</code>. If the …","Downcast a dynamic std Error into an <code>ActorError</code>. If the …","Wrap the error with a message, without overwriting an …","","","","","","","Iterates through all arrays in the multimap","Iterates through all values in the array at a given key.","Iterates through keys and converts them to a DealID to …","Iterates through all keys in the set.","","","","","Initializes a balance table from a root Cid","Initializes a multimap from a root Cid","Initializes a SetMultimap from a root Cid.","Initializes a Set from a root Cid.","Gets token amount for given address in balance table","Gets the Array of value type <code>V</code> using the multimap store.","Gets the set at the given index of the <code>SetMultimap</code>","Checks if key exists in the set.","","","","","","","","","","Subtracts value from a balance, and errors if full amount …","Initializes a new empty balance table","Initializes a new empty multimap. The outer_bitwidth is …","Initializes a new empty SetMultimap.","Initializes a new empty Set with the default bitwidth.","Initializes a new empty Set given a bitwidth.","Puts the DealID in the hash set of the key.","Adds key to the set.","Puts slice of DealIDs in the hash set of the key.","Removes a DealID from a key hash set.","Removes all values for a key.","Removes set at index.","Retrieve root from balance table","Retrieve root from the multimap.","Retrieve root from the SetMultimap.","Retrieve root from the Set.","","Subtracts up to the specified amount from a balance, …","Returns total balance held by this balance table","","","","","","","","","","","","","","","","","","","Chaos Actor","","","","","CreateActorArgs are the arguments to CreateActor.","","","","Chaos actor methods available","","","","Holds the response of a call to runtime.ResolveAddress","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","CallerValidation violates VM call validation constraints.","","","","Constructor for Account actor","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Resolves address, and returns the resolved address …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","polyval evaluates a polynomial given by coefficients <code>p</code> in …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the Q.0 position estimate of the filter","Extrapolate filter “position” delta epochs in the …","Extrapolate the CumSumRatio given two filters.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The natural log of Q.128 x.","","","Create a new filter estimate given two Q.0 format ints.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","DataCap is an integer number of bytes. We can introduce …","","Account actor methods available","","","","","","","","","","","Address of verified client.","","","","","","","","","","","","","","","","","","Constructor for Registry Actor","Number of bytes to use.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Called by HandleInitTimeoutDeals from StorageMarketActor …","","","","","","","","","","","","","","","","","","","","","","","","","Called by StorageMarketActor during PublishStorageDeals. …","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,2,16,1,17,3,4,5,6,7,8,9,10,11,12,13,14,15,2,16,1,17,17,2,16,1,17,2,16,1,17,2,0,0,2,17,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,2,16,1,17,17,3,4,5,6,7,8,9,10,11,12,13,14,15,2,16,1,17,2,1,17,17,3,4,5,6,7,8,9,10,11,12,13,14,15,2,16,1,17,2,16,1,17,2,1,17,16,2,16,16,1,17,3,4,5,6,7,8,9,10,11,12,13,14,15,2,16,16,16,1,17,1,1,17,17,17,0,3,4,5,6,7,8,9,10,11,12,13,14,15,2,16,1,17,3,4,5,6,7,8,9,10,11,12,13,14,15,3,4,5,6,7,8,9,10,11,12,13,14,15,2,16,1,17,0,0,0,16,16,0,0,1,0,0,0,0,0,16,0,2,16,17,0,2,16,17,16,0,0,0,0,2,2,1,17,17,0,2,0,2,16,1,17,16,3,4,5,6,7,8,9,10,11,12,13,14,15,2,16,1,17,3,4,5,6,7,8,9,10,11,12,13,14,15,2,16,1,17,3,4,5,6,7,8,9,10,11,12,13,14,15,2,16,1,17,0,0,0,3,4,5,6,7,8,9,10,11,12,13,14,15,2,16,1,17,16,0,18,0,18,0,19,20,19,18,20,19,18,20,20,19,18,20,19,18,19,20,19,18,20,19,18,18,18,20,19,18,20,19,18,20,20,19,20,19,18,20,19,18,20,19,18,20,19,18,0,21,0,0,21,0,0,22,23,24,21,25,22,23,24,21,25,24,24,23,25,22,23,24,21,25,22,23,24,21,25,23,24,25,22,23,24,21,25,23,25,24,24,25,22,23,24,21,25,21,21,22,23,24,21,25,22,23,24,21,25,22,24,24,24,23,24,25,24,22,23,24,21,25,22,23,24,21,25,22,23,24,21,25,22,23,24,21,25,0,26,0,26,0,0,0,0,27,28,27,29,30,31,26,28,27,29,30,31,26,30,28,30,28,27,29,30,31,26,28,27,29,30,31,26,27,29,30,31,28,27,29,30,31,26,28,28,27,29,30,31,26,26,26,31,28,27,29,30,31,26,28,27,29,30,31,26,28,27,27,29,27,27,27,31,27,29,30,31,28,27,29,30,31,26,28,27,29,30,31,26,28,27,29,30,31,26,28,27,29,30,31,26,32,0,0,32,0,32,0,0,0,32,32,0,0,0,0,0,32,0,0,0,0,32,0,0,0,0,0,0,0,32,0,0,0,32,0,33,34,35,36,37,38,33,39,40,41,42,43,44,45,46,47,48,49,50,51,52,32,34,35,36,37,38,33,39,40,41,42,43,44,45,46,47,48,49,50,51,52,32,35,35,35,36,35,36,37,35,36,37,51,34,39,40,44,48,52,38,47,47,41,38,46,47,34,35,36,37,38,33,39,40,41,42,43,44,45,46,47,48,49,50,51,52,32,34,35,36,37,38,33,39,40,41,42,43,44,45,46,47,48,49,50,51,52,32,35,36,37,38,33,39,41,42,43,44,46,47,48,49,51,52,34,35,36,37,38,33,39,40,41,42,43,44,45,46,47,48,49,50,51,52,32,35,35,39,40,35,36,37,38,35,36,37,34,35,36,37,38,33,39,40,41,42,43,44,45,46,47,48,49,50,51,52,32,32,32,42,34,35,36,37,38,33,39,40,41,42,43,44,45,46,47,48,49,50,51,52,32,49,50,34,35,36,37,38,33,39,40,41,42,43,44,45,46,47,48,49,50,51,52,32,34,35,38,37,38,35,36,37,38,38,38,35,35,36,38,35,35,35,33,44,48,37,52,43,45,46,35,36,37,38,33,39,40,41,42,43,44,45,46,47,48,49,50,51,52,37,35,38,35,35,36,37,38,38,38,38,35,34,35,36,37,38,33,39,40,41,42,43,44,45,46,47,48,49,50,51,52,32,34,35,36,37,38,33,39,40,41,42,43,44,45,46,47,48,49,50,51,52,32,34,35,36,37,38,33,39,40,41,42,43,44,45,46,47,48,49,50,51,52,32,0,0,35,47,34,35,36,37,38,33,39,40,41,42,43,44,45,46,47,48,49,50,51,52,32,35,0,0,0,0,53,0,54,0,0,0,0,0,0,0,0,0,0,54,0,54,54,0,54,0,54,0,0,54,0,54,0,0,54,54,54,54,0,0,0,0,0,0,0,54,0,54,0,53,0,54,0,0,0,0,0,54,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,54,0,0,0,0,0,0,0,0,0,54,54,0,0,54,0,54,0,0,0,54,54,0,0,0,0,0,0,0,0,54,0,0,54,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,54,0,0,55,56,55,57,55,57,58,59,60,61,62,63,55,64,64,65,66,64,64,63,55,66,66,58,59,64,0,67,68,64,64,69,70,66,60,71,64,0,64,62,66,72,60,73,71,74,75,76,63,77,68,57,78,79,55,61,58,59,64,53,80,62,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,70,105,106,107,108,56,109,110,111,67,69,65,54,66,72,60,73,71,74,75,76,63,77,68,57,78,79,55,61,58,59,64,53,80,62,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,70,105,106,107,108,56,109,110,111,67,69,65,54,0,0,90,90,58,64,64,64,64,57,55,61,64,106,107,108,56,109,111,57,55,61,64,106,107,108,56,109,111,80,0,75,64,80,81,84,58,59,64,64,66,83,90,94,96,99,101,102,111,0,0,64,64,0,58,64,107,56,108,56,63,55,57,61,58,59,62,65,64,64,66,72,60,73,71,74,75,76,63,77,68,57,78,78,79,79,55,61,58,59,64,53,80,62,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,70,105,106,107,108,56,109,110,111,67,69,65,54,66,72,60,73,71,74,75,76,63,77,68,57,78,79,55,61,58,59,64,53,80,62,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,70,105,106,107,108,56,109,110,111,67,69,65,54,76,63,77,68,57,55,61,59,64,80,81,82,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,70,105,106,107,108,56,109,110,111,67,69,65,74,68,68,97,66,72,60,73,71,74,75,76,63,77,68,57,78,79,55,61,58,59,64,53,80,62,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,70,105,106,107,108,56,109,110,111,67,69,65,54,76,57,55,63,64,105,57,69,61,53,80,105,106,107,108,56,109,111,61,82,56,0,56,107,56,63,55,93,109,55,98,63,57,55,64,64,76,64,63,57,61,80,83,105,106,107,108,56,109,110,111,67,76,63,64,66,72,60,73,71,74,75,76,63,77,68,57,78,79,55,61,58,59,64,53,80,62,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,70,105,106,107,108,56,109,110,111,67,69,65,54,54,54,65,71,64,64,64,64,64,64,64,104,104,104,68,72,89,64,108,66,72,60,73,71,74,75,76,63,77,68,57,78,79,55,61,58,59,64,53,80,62,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,70,105,106,107,108,56,109,110,111,67,69,65,54,73,64,56,0,78,79,66,72,60,73,71,74,75,76,63,77,68,57,78,79,55,61,58,59,64,53,80,62,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,70,105,106,107,108,56,109,110,111,67,69,65,54,75,57,59,62,63,61,58,59,62,57,59,55,55,63,71,76,64,71,63,63,63,0,71,64,64,71,64,0,103,0,109,80,81,71,61,80,105,106,107,108,56,109,111,61,66,60,76,63,55,58,64,80,62,65,85,0,0,94,72,86,87,85,105,57,57,63,63,63,80,81,84,83,94,96,99,101,59,72,63,90,102,63,63,62,63,80,81,110,80,80,74,0,0,0,0,63,55,64,63,63,55,66,60,111,72,74,108,0,64,108,64,64,74,63,91,90,64,64,64,61,0,0,60,64,0,64,73,61,55,63,55,55,63,63,55,64,55,72,55,100,55,57,63,55,60,64,64,107,107,107,107,60,55,56,56,60,60,60,55,60,63,64,72,110,0,0,64,64,64,107,56,0,107,107,56,0,91,92,107,56,67,80,72,55,64,62,88,94,96,99,101,106,62,76,63,77,68,57,55,61,59,64,80,81,82,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,70,105,106,107,108,56,109,110,111,67,69,65,89,73,71,61,63,63,55,55,95,57,55,61,64,106,107,108,56,109,111,74,63,66,72,60,73,71,74,75,76,63,77,68,57,78,79,55,61,58,59,64,53,80,62,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,70,105,106,107,108,56,109,110,111,67,69,65,54,66,72,60,73,71,74,75,76,63,77,68,57,78,79,55,61,58,59,64,53,80,62,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,70,105,106,107,108,56,109,110,111,67,69,65,54,66,72,60,73,71,74,75,76,63,77,68,57,78,79,55,61,58,59,64,53,80,62,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,70,105,106,107,108,56,109,110,111,67,69,65,54,64,65,64,65,55,55,76,55,55,63,57,55,108,56,73,64,66,72,60,73,71,74,75,76,63,77,68,57,78,79,55,61,58,59,64,53,80,62,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,70,105,106,107,108,56,109,110,111,67,69,65,54,80,80,81,80,81,84,61,112,0,113,0,113,0,113,113,0,113,0,113,0,0,0,113,0,0,113,0,0,113,0,0,0,0,114,115,116,117,118,114,119,114,116,112,119,120,121,122,117,123,118,124,125,126,127,115,113,114,116,112,119,120,121,122,117,123,118,124,125,126,127,115,113,114,114,116,112,119,116,112,119,117,118,114,125,112,114,116,112,119,120,121,122,117,123,118,124,125,126,127,115,113,114,116,112,119,120,121,122,117,123,118,124,125,126,127,115,113,116,112,119,121,122,117,123,118,124,125,126,127,115,114,116,112,119,120,121,122,117,123,118,124,125,126,127,115,113,119,112,119,120,114,116,112,119,120,121,122,117,123,118,124,125,126,127,115,113,126,113,113,123,124,114,116,112,119,120,121,122,117,123,118,124,125,126,127,115,113,116,114,116,112,119,120,121,122,117,123,118,124,125,126,127,115,113,114,116,112,114,119,120,122,119,127,116,116,121,119,120,122,116,123,114,116,114,120,117,118,116,112,119,120,121,122,117,123,118,124,125,126,127,115,116,124,125,116,121,116,121,115,114,119,120,122,126,116,112,119,114,116,112,119,120,121,122,117,123,118,124,125,126,127,115,113,114,116,112,119,120,121,122,117,123,118,124,125,126,127,115,113,117,114,116,112,119,120,121,122,117,123,118,124,125,126,127,115,113,116,121,115,119,120,122,114,116,112,119,120,121,122,117,123,118,124,125,126,127,115,113,0,0,0,0,0,0,0,0,0,0,0,0,128,129,130,128,129,130,128,128,129,129,130,130,128,129,130,128,129,130,128,129,130,128,129,130,128,129,130,128,129,130,128,129,130,128,129,130,128,129,130,128,129,130,0,131,131,0,0,0,0,0,0,0,0,0,0,131,0,0,131,0,132,133,134,135,136,137,138,133,132,139,140,131,134,135,136,137,138,133,132,139,140,131,133,136,137,133,132,136,137,133,132,134,134,132,136,137,134,135,136,137,138,133,132,139,140,131,134,135,136,137,138,133,132,139,140,131,135,136,137,138,133,132,139,140,134,135,136,137,138,133,132,139,140,131,136,137,133,132,133,139,135,136,137,133,132,134,135,136,137,138,133,132,139,140,140,131,135,138,131,131,134,135,136,137,138,133,132,139,140,131,134,135,136,137,138,133,132,139,140,131,134,137,133,135,133,132,135,133,136,137,133,132,135,136,137,133,139,136,140,133,135,136,137,138,133,132,139,140,134,135,133,133,140,133,133,135,138,136,137,133,132,135,134,135,136,137,138,133,132,139,140,131,134,135,136,137,138,133,132,139,140,131,134,135,136,137,138,133,132,139,140,131,134,134,135,136,137,138,133,132,139,140,131,0,0,0,0,0,141,141,0,0,0,141,0,141,0,0,0,141,0,0,0,0,0,0,141,141,0,141,142,143,144,145,146,147,148,149,150,141,142,143,144,145,146,147,148,149,150,141,145,143,144,145,144,145,143,143,143,142,143,144,145,146,147,148,149,150,141,142,143,144,145,146,147,148,149,150,141,143,144,145,146,147,148,149,150,142,143,144,145,146,147,148,149,150,141,144,149,143,144,145,142,143,144,145,146,147,148,149,150,141,141,141,143,147,142,143,144,145,146,147,148,149,150,141,142,143,144,145,146,147,148,149,150,141,143,142,143,145,143,143,143,146,144,143,146,149,146,150,143,144,150,150,148,148,144,150,147,143,144,145,146,147,148,149,150,0,143,143,143,143,144,145,143,143,143,143,143,142,143,144,145,146,147,148,149,150,141,142,143,144,145,146,147,148,149,150,141,142,143,144,145,146,147,148,149,150,141,142,143,144,145,146,147,148,149,150,141,144,146,146,0,151,0,0,0,151,0,152,0,152,0,0,0,151,0,151,0,153,153,154,155,156,157,158,154,152,153,159,160,151,155,156,157,158,154,152,153,159,160,151,152,153,159,160,152,153,159,160,154,154,154,155,156,156,157,157,158,158,154,152,153,159,160,151,155,156,157,158,154,152,153,159,160,151,154,152,153,159,160,155,156,157,158,154,152,153,159,160,151,154,154,153,154,152,153,159,160,152,153,159,160,155,156,157,158,154,152,153,159,160,151,152,151,152,151,159,155,156,157,158,154,152,153,159,160,151,156,157,158,155,156,157,158,154,152,153,159,160,151,154,155,159,153,159,160,154,159,154,152,153,159,160,154,153,154,160,154,154,160,152,153,159,160,154,155,156,157,158,154,152,153,159,160,151,155,156,157,158,154,152,153,159,160,151,155,156,157,158,154,152,153,159,160,151,153,153,155,156,157,158,154,152,153,159,160,151,159,0,0,0,0,0,0,0,0,0,0,0,161,162,163,164,165,166,167,168,169,170,161,162,163,164,165,166,167,168,169,170,161,161,162,162,163,163,164,164,165,165,166,166,167,167,168,168,169,169,170,170,161,162,163,164,165,166,167,168,169,170,161,162,163,164,165,166,167,168,169,170,161,162,163,164,165,166,167,168,169,170,161,162,163,164,165,166,167,168,169,170,161,162,163,164,165,166,167,168,169,170,161,162,163,164,165,166,167,168,169,170,161,162,163,164,165,166,167,168,169,170,161,162,163,164,165,166,167,168,169,170,161,162,163,164,165,166,167,168,169,170,161,162,163,164,165,166,167,168,169,170,0,171,0,0,172,171,173,172,171,173,172,173,172,171,173,172,171,173,173,172,171,173,172,171,173,171,171,172,171,173,172,171,173,172,173,172,171,173,172,171,173,172,171,173,172,171,173,0,0,0,0,0,0,174,175,174,175,176,177,174,175,176,177,0,177,177,174,175,176,177,174,175,176,177,178,178,178,174,175,176,177,177,177,175,175,176,177,174,175,176,177,174,175,176,177,174,175,176,177,174,175,176,177,174,175,176,177,0,174,174,175,176,177,177,176,177,176,176,175,176,174,175,176,177,0,174,174,174,175,176,177,174,175,176,177,174,175,176,177,174,175,176,177,179,0,0,179,0,179,179,0,179,179,0,0,179,0,179,0,179,0,0,0,180,181,182,183,180,184,181,182,185,186,187,188,189,183,179,180,184,181,182,185,186,187,188,189,183,179,187,183,189,180,181,186,188,180,180,189,189,184,180,180,184,181,182,185,186,187,188,189,183,179,180,184,181,182,185,186,187,188,189,183,179,184,181,182,185,186,187,188,189,183,180,184,181,182,185,186,187,188,189,183,179,180,184,181,182,185,186,187,188,189,183,179,179,179,180,184,181,182,185,186,187,188,189,183,179,180,180,184,181,182,185,186,187,188,189,183,179,180,188,185,180,185,189,180,186,180,184,181,182,185,186,187,188,189,183,189,182,185,180,184,181,182,185,186,187,188,189,183,179,180,184,181,182,185,186,187,188,189,183,179,180,184,181,182,185,186,187,188,189,183,179,183,188,181,181,184,184,185,187,189,180,184,181,182,185,186,187,188,189,183,179,0,0,0,0,0,0,0,0,0,0,0,190,191,192,193,194,195,196,197,190,191,192,193,194,195,196,197,191,191,191,190,191,192,192,193,193,194,194,195,195,196,196,197,197,190,191,192,193,194,195,196,197,191,190,191,192,193,194,195,196,197,191,191,191,0,191,190,191,192,193,194,195,196,197,190,191,192,193,194,195,196,197,192,193,194,195,196,197,190,191,192,193,194,195,196,197,0,190,191,191,190,191,191,191,190,191,192,193,194,195,196,197,190,191,192,193,194,195,196,197,190,191,192,193,194,195,196,197,191,190,191,192,193,194,195,196,197,0,198,198,0,0,0,198,0,0,0,198,198,0,0,198,0,0,199,199,200,201,200,199,202,203,200,201,198,199,202,203,200,201,198,200,201,200,201,199,201,199,202,203,203,200,201,198,199,202,203,200,201,198,202,200,201,199,202,203,200,201,198,200,201,200,200,201,199,202,203,200,201,198,198,198,199,202,203,200,201,198,203,199,202,203,200,201,198,199,200,201,202,199,199,202,202,200,201,200,201,199,202,203,200,201,198,199,202,203,200,201,198,199,202,203,200,201,198,199,202,202,199,202,203,200,201,198],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["cid",3]],[["result",4,["str","string"]],["str",15],["string",3]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["actorstate",3]],[[],["actorerror",3]],[[],["exitcode",4]],[[],["serialized",3]],[[]],[[]],[[]],[[]],null,[[["registeredpostproof",4]],[["storagepower",6],["result",4,["storagepower","string"]],["string",3]]],null,[[["bigint",3]],[["string",3],["result",4,["string"]]]],[[],["serialized",3]],[[["bigint",3]]],[[["usize",15]]],[[],["cid",3]],[[["usize",15]]],[[],["cid",3]],[[["usize",15]]],[[],["cid",3]],[[["usize",15]]],[[],["cid",3]],[[["usize",15]]],[[],["cid",3]],[[],["cid",3]],[[["usize",15]]],[[],["cid",3]],[[["usize",15]]],[[["usize",15]]],[[],["cid",3]],[[["usize",15]]],[[],["cid",3]],[[],["cid",3]],[[["usize",15]]],[[["usize",15]]],[[],["cid",3]],[[],["cid",3]],[[["usize",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],[["actorstate",3],["result",4,["actorstate"]]]],[[],[["result",4,["exitcode"]],["exitcode",4]]],[[],[["result",4,["serialized"]],["serialized",3]]],[[],[["error",3],["result",4,["error"]]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["actorstate",3]],["bool",15]],[[["actorerror",3]],["bool",15]],[[["exitcode",4]],["bool",15]],[[["serialized",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["exitcode",4]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["error",3]],["actorerror",3]],[[["error",3]],["actorerror",3]],[[]],[[]],[[]],[[["i64",15]],[["option",4,["exitcode"]],["exitcode",4]]],[[["u64",15]],[["option",4,["exitcode"]],["exitcode",4]]],[[],["u64",15]],[[],["u64",15]],[[]],null,[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["cid",3],["serialized",3],["methodnum",6]],[["result",4,["serialized","actorerror"]],["option",4,["result"]]]],[[["cid",3]],["bool",15]],[[["cid",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["cid",3]],["bool",15]],[[["cid",3]],["bool",15]],[[],["bool",15]],[[["u32",15]],["map",6]],[[["cid",3]],[["result",4,["map","hamterror"]],["hamterror",4],["map",6]]],[[["cid",3],["u32",15]],[["result",4,["map","hamterror"]],["hamterror",4],["map",6]]],null,null,[[],["str",15]],null,[[["actorstate",3]],["bool",15]],[[["actorerror",3]],["bool",15]],[[["serialized",3]],["bool",15]],null,[[["u64",15],["cid",3],["bigint",3]],["actorstate",3]],[[["string",3],["exitcode",4]],["actorerror",3]],[[["vec",3,["u8","global"]],["u8",15],["global",3]],["serialized",3]],[[["string",3]],["actorerror",3]],[[],[["u64",15],["result",4,["u64","uvarinterror"]],["uvarinterror",4]]],null,null,null,null,[[],["result",4]],[[],["result",4]],[[],[["serialized",3],["error",3],["result",4,["serialized","error"]]]],[[],["result",4]],null,null,null,[[]],[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["u64",15]],["byteskey",3]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["actorerror",3]],null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[["address",3]],[["actorerror",3],["result",4,["actorerror"]]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[["i64",15]],["option",4]],[[["u64",15]],["option",4]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[["serialized",3],["methodnum",6]],[["serialized",3],["result",4,["serialized","actorerror"]],["actorerror",3]]],[[],[["result",4,["address","actorerror"]],["address",3],["actorerror",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["entry",3]],[[]],[[],["state",3]],[[],["constructorparams",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],null,null,[[["entry",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[["i64",15]],["option",4]],[[["u64",15]],["option",4]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[["serialized",3],["methodnum",6]],[["serialized",3],["result",4,["serialized","actorerror"]],["actorerror",3]]],null,[[["entry",3]],["bool",15]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[["constructorparams",3]],[["actorerror",3],["result",4,["actorerror"]]]],null,[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["execparams",3]],[["result",4,["execreturn","actorerror"]],["execreturn",3],["actorerror",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["i64",15]],["option",4]],[[["u64",15]],["option",4]],null,[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[["serialized",3],["methodnum",6]],[["serialized",3],["result",4,["serialized","actorerror"]],["actorerror",3]]],[[["address",3]],[["result",4,["address","hamterror"]],["address",3],["hamterror",4]]],null,null,[[["string",3]],[["box",3,["stderror"]],["result",4,["box"]]]],null,[[["address",3]],[["option",4,["address"]],["box",3,["stderror"]],["result",4,["option","box"]]]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["tokenamount",6]],null,null,[[],["dealproposal",3]],[[],["clientdealproposal",3]],[[],["dealstate",3]],[[]],[[]],[[]],null,[[],[["actorerror",3],["result",4,["actorerror"]]]],null,null,null,null,null,null,null,null,null,[[],["state",3]],[[],["verifydealsforactivationreturn",3]],[[],["sectorweights",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["chainepoch",6]],null,null,null,[[["dealproposal",3]],["bool",15]],[[["clientdealproposal",3]],["bool",15]],[[["dealstate",3]],["bool",15]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["i64",15]],["option",4]],[[["u64",15]],["option",4]],null,[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["serialized",3],["methodnum",6]],[["serialized",3],["result",4,["serialized","actorerror"]],["actorerror",3]]],null,null,null,null,[[["dealproposal",3]],["bool",15]],[[["clientdealproposal",3]],["bool",15]],[[["dealstate",3]],["bool",15]],[[],[["box",3,["stderror"]],["result",4,["box"]]]],null,null,null,null,null,null,null,[[],["tokenamount",6]],null,null,null,null,null,null,null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,null,null,null,[[]],[[]],[[]],null,null,[[],["tokenamount",6]],null,[[],["tokenamount",6]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["address",3],["dealarray",6],["chainepoch",6]],[["result",4,["box"]],["box",3,["stderror"]]]],[[["address",3],["state",3],["chainepoch",6]],[["result",4,["box"]],["box",3,["stderror"]]]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["dealweight",6]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["powerpair",3]],null,[[],["powerpair",3]],null,[[],["bitfield",3]],[[["tokenamount",6],["powerpair",3],["bitfield",3]]],[[["usize",15],["unvalidatedbitfield",4]],[["result",4,["string"]],["string",3]]],[[["usize",15],["unvalidatedbitfield",4]],[["result",4,["string"]],["string",3]]],[[["sectorsize",4]],[["box",3,["stderror"]],["result",4,["box"]]]],[[]],[[]],[[["quantspec",3],["chainepoch",6]],[["box",3,["stderror"]],["result",4,["box"]]]],[[["chainepoch",6],["bitfield",3],["quantspec",3],["sectorsize",4]],[["box",3,["stderror"]],["result",4,["box"]]]],[[["tokenamount",6]],[["result",4,["string"]],["string",3]]],[[["tokenamount",6],["vestspec",3],["chainepoch",6]],[["box",3,["stderror"]],["tokenamount",6],["result",4,["tokenamount","box"]]]],[[["tokenamount",6],["vestspec",3],["chainepoch",6]]],[[["hashmap",3]],[["box",3,["stderror"]],["result",4,["box"]]]],[[["hashmap",3,["chainepoch","vec"]],["vec",3,["u64"]],["chainepoch",6]],[["box",3,["stderror"]],["result",4,["box"]]]],[[["tokenamount",6]],[["result",4,["string"]],["string",3]]],[[["u64",15],["quantspec",3],["bool",15],["sectorsize",4]],[["powerpair",3],["box",3,["stderror"]],["result",4,["powerpair","box"]]]],[[["quantspec",3],["bool",15],["sectorsize",4]],[["powerpair",3],["box",3,["stderror"]],["result",4,["powerpair","box"]]]],[[["bitfield",3],["chainepoch",6]],[["box",3,["stderror"]],["result",4,["box"]]]],[[["chainepoch",6]],[["box",3,["stderror"]],["result",4,["box"]]]],[[["usize",15]],[["result",4,["string"]],["string",3]]],[[["usize",15],["u64",15],["vec",3,["u64"]]],[["result",4,["string"]],["string",3]]],[[["chainepoch",6]],[["result",4,["advancedeadlineresult","box"]],["advancedeadlineresult",3],["box",3,["stderror"]]]],[[["tokenamount",6],["i64",15]],["tokenamount",6]],null,null,[[["collisionpolicy",4],["bitfield",3]],[["actorerror",3],["result",4,["actorerror"]]]],null,null,null,null,null,null,[[["tokenamount",6]],[["result",4,["string"]],["string",3]]],[[["u64",15],["vec",3,["sectoronchaininfo"]],["sectoronchaininfo",3]],[["string",3],["vec",3,["vec"]],["result",4,["vec","string"]]]],[[["vec",3,["sectoronchaininfo"]],["u64",15],["sectoronchaininfo",3],["sectorsize",4],["chainepoch",6]],[["box",3,["stderror"]],["result",4,["box"]]]],[[["u64",15]],["boolregisteredsealproof",4],["networkversion",4]],["bool",15]],[[["registeredsealproof",4]],["bool",15]],null,null,[[["u64",15]],[["result",4,["string"]],["string",3]]],[[["tokenamount",6]],[["result",4,["string"]],["string",3]]],[[["usize",15],["sectornumber",6]],[["box",3,["stderror"]],["result",4,["box"]]]],[[["chainepoch",6]],[["box",3,["stderror"]],["tokenamount",6],["result",4,["tokenamount","box"]]]],[[["chainepoch",6]],[["box",3,["stderror"]],["tokenamount",6],["result",4,["tokenamount","box"]]]],[[],["expirationset",3]],[[],["partition",3]],[[],["powerpair",3]],[[],["state",3]],[[],["precommitsectorbatchparams",3]],[[],["sectorprecommitinfo",3]],[[],["sectorprecommitonchaininfo",3]],[[],["sectoronchaininfo",3]],[[],["fault",3]],[[],["disputewindowedpostparams",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[["tokenamount",6]],["tokenamount",6]],[[["minerconstructorparams",3]],[["actorerror",3],["result",4,["actorerror"]]]],[[],["bool",15]],null,null,null,[[],[["result",4,["string"]],["string",3]]],[[],[["result",4,["string"]],["string",3]]],null,[[["chainepoch",6]],["chainepoch",6]],[[["bitfield",3]],[["box",3,["stderror"]],["result",4,["box"]]]],null,null,null,null,null,null,null,null,[[["usize",15],["chainepoch",6]],["bool",15]],[[["usize",15],["chainepoch",6]],["bool",15]],null,[[["chainepoch",6]],["deadlineinfo",3]],[[["usize",15],["chainepoch",6]],["bool",15]],[[],[["vec",3,["usize"]],["usize",15]]],null,null,null,null,null,[[["sectorsize",4],["sectors",3],["partitionsectormap",3]],[["box",3,["stderror"]],["result",4,["box"]]]],[[["sectorsize",4],["sectors",3],["unvalidatedbitfield",4]],[["box",3,["stderror"]],["result",4,["box"]]]],[[],["expirationset",3]],[[],["powerpair",3]],[[],["deadlinesectormap",3]],[[],["partitionsectormap",3]],[[],["terminationresult",3]],[[],["vestingfunds",3]],[[],[["result",4,["hamterror"]],["hamterror",4]]],[[["bitfield",3]],[["result",4,["amterror"]],["amterror",4]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["bigint",3]],[[["usize",15]]],[[],["bigint",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,null,null,null,[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],null,null,null,null,null,null,[[]],null,[[["powerpair",3]],["bool",15]],[[["collisionpolicy",4]],["bool",15]],[[["minerinfo",3]],["bool",15]],[[["workerkeychange",3]],["bool",15]],[[["precommitsectorbatchparams",3]],["bool",15]],[[["sectorprecommitinfo",3]],["bool",15]],[[["sectorprecommitonchaininfo",3]],["bool",15]],[[["sectoronchaininfo",3]],["bool",15]],[[["fault",3]],["bool",15]],[[["disputewindowedpostparams",3]],["bool",15]],[[],["bool",15]],null,null,[[["chainepoch",6],["storagepower",6],["filterestimate",3]],["tokenamount",6]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[],[["box",3,["stderror"]],["vec",3,["sectorprecommitonchaininfo"]],["result",4,["vec","box"]]]],[[["sectornumber",6]],[["box",3,["stderror"]],["result",4,["box"]]]],[[["sectornumber",6]],[["box",3,["stderror"]],["result",4,["box"]]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[],[["box",3,["stderror"]],["result",4,["box"]]]],[[],[["box",3,["stderror"]],["result",4,["box"]]]],[[],[["box",3,["stderror"]],["result",4,["box"]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["i64",15]],["option",4]],[[["u64",15]],["option",4]],null,[[["sectornumber",6]],[["option",4,["sectoronchaininfo"]],["box",3,["stderror"]],["result",4,["option","box"]]]],[[["bitfield",3]],[["box",3,["stderror"]],["vec",3,["sectorprecommitonchaininfo"]],["result",4,["vec","box"]]]],[[["tokenamount",6]],[["string",3],["tokenamount",6],["result",4,["tokenamount","string"]]]],[[],[["result",4,["minerinfo","box"]],["minerinfo",3],["box",3,["stderror"]]]],[[["sectornumber",6]],[["hamterror",4],["result",4,["option","hamterror"]],["option",4,["sectorprecommitonchaininfo"]]]],[[["sectornumber",6]],[["option",4,["sectoronchaininfo"]],["box",3,["stderror"]],["result",4,["option","box"]]]],[[["tokenamount",6]],[["string",3],["tokenamount",6],["result",4,["tokenamount","string"]]]],[[["sectornumber",6]],[["result",4,["bool","box"]],["box",3,["stderror"]],["bool",15]]],null,null,null,null,null,null,null,null,[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],null,null,null,[[["tokenamount",6],["storagepower",6],["filterestimate",3]],["tokenamount",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["serialized",3],["methodnum",6]],[["serialized",3],["result",4,["serialized","actorerror"]],["actorerror",3]]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],null,[[],["bitfield",3]],null,[[["cid",3]],[["result",4,["amterror"]],["amterror",4]]],[[["usize",15]],[["deadline",3],["result",4,["deadline","box"]],["box",3,["stderror"]]]],[[],[["deadlines",3],["actorerror",3],["result",4,["deadlines","actorerror"]]]],[[["bitfield",3]],[["vec",3,["sectoronchaininfo"]],["box",3,["stderror"]],["result",4,["vec","box"]]]],[[["usize",15]],[["partition",3],["result",4,["partition","box"]],["box",3,["stderror"]]]],[[["usize",15]],[["partition",3],["result",4,["partition","box"]],["box",3,["stderror"]]]],[[["bitfield",3]],[["disputeinfo",3],["result",4,["disputeinfo","box"]],["box",3,["stderror"]]]],[[["u64",15]],["u64",15]],[[],[["vec",3,["sectoronchaininfo"]],["actorerror",3],["result",4,["vec","actorerror"]]]],[[["bitfield",3]],[["vec",3,["sectoronchaininfo"]],["box",3,["stderror"]],["result",4,["vec","box"]]]],[[],[["vestingfunds",3],["result",4,["vestingfunds","box"]],["box",3,["stderror"]]]],[[["sectornumber",6],["bitfield",3]],[["vec",3,["sectoronchaininfo"]],["box",3,["stderror"]],["result",4,["vec","box"]]]],null,[[["tokenamount",6]]],null,[[["registeredsealproof",4]],[["option",4,["chainepoch"]],["chainepoch",6]]],null,null,null,[[["sectornumber",6]],[["box",3,["stderror"]],["result",4,["sectoronchaininfo","box"]],["sectoronchaininfo",3]]],[[["powerpair",3]],["bool",15]],[[["minerinfo",3]],["bool",15]],[[["workerkeychange",3]],["bool",15]],[[["precommitsectorbatchparams",3]],["bool",15]],[[["sectorprecommitinfo",3]],["bool",15]],[[["sectorprecommitonchaininfo",3]],["bool",15]],[[["sectoronchaininfo",3]],["bool",15]],[[["fault",3]],["bool",15]],[[["disputewindowedpostparams",3]],["bool",15]],[[]],[[["cid",3],["quantspec",3]],[["result",4,["amterror"]],["amterror",4]]],[[["cid",3],["quantspec",3]],[["result",4,["amterror"]],["amterror",4]]],[[["cid",3]]],[[],[["box",3,["stderror"]],["result",4,["box"]]]],[[],[["box",3,["stderror"]],["result",4,["box"]]]],[[]],[[["usize",15],["cid",3],["chainepoch",6]],[["box",3,["stderror"]],["result",4,["box"]]]],[[["bytesde",3],["address",3],["u8",15],["vec",3,["address"]],["vec",3,["u8"]],["vec",3,["bytesde"]],["registeredpostproof",4]],[["result",4,["actorerror"]],["actorerror",3]]],[[]],[[]],null,[[["usize",15],["chainepoch",6]],["deadlineinfo",3]],[[["chainepoch",6]],["deadlineinfo",3]],null,null,null,null,null,null,null,null,null,[[],[["result",4,["amt","box"]],["amt",3,["windowedpost"]],["box",3,["stderror"]]]],[[],[["result",4,["amt","box"]],["amt",3,["windowedpost"]],["box",3,["stderror"]]]],null,null,null,null,null,null,null,null,[[],[["vec",3,["usize"]],["usize",15]]],null,null,null,null,[[],[["result",4,["amt","box"]],["amt",3,["partition"]],["box",3,["stderror"]]]],null,null,[[],[["result",4,["amt","box"]],["amt",3,["partition"]],["box",3,["stderror"]]]],null,null,null,null,null,null,[[["storagepower",6],["filterestimate",3]],["tokenamount",6]],[[["storagepower",6],["filterestimate",3]],["tokenamount",6]],[[["storagepower",6],["filterestimate",3],["tokenamount",6],["chainepoch",6]],["tokenamount",6]],[[["storagepower",6],["filterestimate",3]],["tokenamount",6]],[[["u64",15]],[["result",4,["box"]],["box",3,["stderror"]]]],[[["u64",15]],[["result",4,["box"]],["box",3,["stderror"]]]],[[["u64",15]],[["result",4,["box"]],["box",3,["stderror"]]]],[[["quantspec",3],["chainepoch",6]],[["box",3,["stderror"]],["result",4,["box"]]]],[[["quantspec",3],["chainepoch",6]],[["result",4,["expirationset","box"]],["expirationset",3],["box",3,["stderror"]]]],[[["quantspec",3],["chainepoch",6]],[["result",4,["expirationset","box"]],["expirationset",3],["box",3,["stderror"]]]],[[["chainepoch",6]],[["box",3,["stderror"]],["result",4,["box"]]]],[[["chainepoch",6]],[["result",4,["expirationset","box"]],["expirationset",3],["box",3,["stderror"]]]],null,null,null,null,[[["storagepower",6],["filterestimate",3]],["tokenamount",6]],null,null,null,null,null,[[["chainepoch",6],["quantspec",3]],[["result",4,["actorerror"]],["actorerror",3]]],null,null,null,[[["vec",3,["sectorprecommitonchaininfo"]],["sectorprecommitonchaininfo",3]],[["box",3,["stderror"]],["result",4,["box"]]]],[[["vec",3,["sectoronchaininfo"]],["sectoronchaininfo",3]],[["box",3,["stderror"]],["result",4,["box"]]]],null,[[["sectorsize",4],["sectoronchaininfo",3]],["storagepower",6]],[[["sectorsize",4],["dealweight",6],["chainepoch",6]],["storagepower",6]],null,[[],["quantspec",3]],[[["deadlineinfo",3]],["quantspec",3]],[[["usize",15]],["quantspec",3]],null,null,[[["bitfield",3],["chainepoch",6]],[["box",3,["stderror"]],["result",4,["box"]]]],[[["chainepoch",6],["sectorsize",4],["sectors",3],["partitionsectormap",3],["quantspec",3]],[["powerpair",3],["box",3,["stderror"]],["result",4,["powerpair","box"]]]],[[["unvalidatedbitfield",4],["quantspec",3],["sectorsize",4],["sectors",3],["chainepoch",6]],[["box",3,["stderror"]],["result",4,["box"]]]],[[["quantspec",3],["chainepoch",6]],[["result",4,["box"]],["box",3,["stderror"]]]],[[["bitfield",3]],[["box",3,["stderror"]],["result",4,["box"]]]],[[["chainepoch",6],["sectorsize",4],["sectors",3],["quantspec",3]],[["box",3,["stderror"]],["result",4,["postresult","box"]],["postresult",3]]],[[["chainepoch",6],["unvalidatedbitfield",4],["sectorsize",4],["sectors",3],["quantspec",3]],[["box",3,["stderror"]],["result",4,["box"]]]],[[["chainepoch",6]],["deadlineinfo",3]],[[["sectorsize",4],["sectors",3],["quantspec",3]],[["powerpair",3],["box",3,["stderror"]],["result",4,["powerpair","box"]]]],null,null,null,null,[[["tokenamount",6],["powerpair",3],["bitfield",3]],[["box",3,["stderror"]],["result",4,["box"]]]],[[["quantspec",3],["bitfield",3]],[["box",3,["stderror"]],["result",4,["box"]]]],[[["powerpair",3],["bitfield",3]]],[[["bitfield",3],["sectorsize",4]],[["result",4,["box"]],["box",3,["stderror"]]]],[[["tokenamount",6]],[["box",3,["stderror"]],["tokenamount",6],["result",4,["tokenamount","box"]]]],[[["tokenamount",6],["chainepoch",6]],[["result",4,["box"]],["box",3,["stderror"]]]],null,null,null,null,[[["sectorsize",4]],[["box",3,["stderror"]],["result",4,["box"]]]],[[["sectorsize",4],["quantspec",3]],[["result",4,["box"]],["box",3,["stderror"]]]],null,null,[[["chainepoch",6]],[["box",3,["stderror"]],["result",4,["box"]]]],[[["sectorsize",4],["chainepoch",6]],[["powerpair",3],["box",3,["stderror"]],["result",4,["powerpair","box"]]]],[[["sectorsize",4],["chainepoch",6]],[["box",3,["stderror"]],["result",4,["box"]]]],[[["chainepoch",6],["quantspec",3],["sectorsize",4],["sectors",3],["unvalidatedbitfield",4]],[["vec",3,["sectoronchaininfo"]],["box",3,["stderror"]],["result",4,["vec","box"]]]],[[["vec",3,["sectoronchaininfo"]],["sectorsize",4],["sectoronchaininfo",3]],[["powerpair",3],["box",3,["stderror"]],["result",4,["powerpair","box"]]]],[[["quantspec",3],["partitionsectormap",3],["sectors",3],["sectorsize",4],["chainepoch",6]],[["vec",3,["sectoronchaininfo"]],["box",3,["stderror"]],["result",4,["vec","box"]]]],[[["sectorsize",4],["deadlinesectormap",3],["chainepoch",6]],[["vec",3,["sectoronchaininfo"]],["box",3,["stderror"]],["result",4,["vec","box"]]]],null,null,[[["tokenamount",6]],["tokenamount",6]],[[["powerpair",3],["registeredpostproof",4]],["tokenamount",6]],[[["deadlines",3]],[["box",3,["stderror"]],["result",4,["box"]]]],[[["minerinfo",3]],[["box",3,["stderror"]],["result",4,["box"]]]],[[["vestingfunds",3]],[["box",3,["stderror"]],["result",4,["box"]]]],null,null,[[["registeredsealproof",4],["networkversion",4]],[["option",4,["chainepoch"]],["chainepoch",6]]],null,null,null,[[["sectorsize",4]],["u64",15]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,null,[[["vec",3,["sectoronchaininfo"]],["sectoronchaininfo",3]],[["box",3,["stderror"]],["result",4,["box"]]]],[[]],[[["u64",15]],[["box",3,["stderror"]],["result",4,["box"]]]],[[["quantspec",3],["partitionsectormap",3],["sectors",3],["sectorsize",4],["chainepoch",6]],[["powerpair",3],["box",3,["stderror"]],["result",4,["powerpair","box"]]]],[[["chainepoch",6],["quantspec",3],["sectorsize",4],["sectors",3],["unvalidatedbitfield",4]],[["result",4,["expirationset","box"]],["expirationset",3],["box",3,["stderror"]]]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["tokenamount",6],["chainepoch",6]],[["box",3,["stderror"]],["tokenamount",6],["result",4,["tokenamount","box"]]]],[[["tokenamount",6],["chainepoch",6]],["tokenamount",6]],[[["chainepoch",6]],[["box",3,["stderror"]],["tokenamount",6],["result",4,["tokenamount","box"]]]],[[["chainepoch",6]],["tokenamount",6]],null,null,[[["usize",15],["deadline",3]],[["box",3,["stderror"]],["result",4,["box"]]]],[[],[["result",4,["str"]],["str",15]]],[[],[["result",4,["str"]],["str",15]]],[[],[["result",4,["str"]],["str",15]]],[[],[["result",4,["str"]],["str",15]]],[[],[["result",4,["string"]],["string",3]]],null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["addsignerparams",3]],[["actorerror",3],["result",4,["actorerror"]]]],null,[[["chainepoch",6]],["tokenamount",6]],null,null,[[["txnidparams",3]],[["approvereturn",3],["actorerror",3],["result",4,["approvereturn","actorerror"]]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["txnidparams",3]],[["actorerror",3],["result",4,["actorerror"]]]],[[["changenumapprovalsthresholdparams",3]],[["actorerror",3],["result",4,["actorerror"]]]],[[],["state",3]],[[],["txnid",3]],[[],["transaction",3]],[[]],[[]],[[]],null,null,[[["constructorparams",3]],[["actorerror",3],["result",4,["actorerror"]]]],null,[[],["txnid",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["transaction",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[["i64",15]],["option",4]],[[["u64",15]],["option",4]],null,null,[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["serialized",3],["methodnum",6]],[["serialized",3],["result",4,["serialized","actorerror"]],["actorerror",3]]],[[["address",3]],["bool",15]],[[],["byteskey",3]],[[["lockbalanceparams",3]],[["actorerror",3],["result",4,["actorerror"]]]],null,null,null,[[["transaction",3]],["bool",15]],null,null,null,null,null,null,null,null,null,[[["proposeparams",3]],[["proposereturn",3],["actorerror",3],["result",4,["proposereturn","actorerror"]]]],[[["address",3]],[["box",3,["stderror"]],["result",4,["box"]]]],[[["removesignerparams",3]],[["actorerror",3],["result",4,["actorerror"]]]],null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["tokenamount",6],["chainepoch",6]]],null,null,null,null,null,null,null,[[["swapsignerparams",3]],[["actorerror",3],["result",4,["actorerror"]]]],null,null,null,null,[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[],["bigint",3]],[[["usize",15]]],[[],["bigint",3]],[[],["bigint",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["lanestate",3]],[[],["merge",3]],[[],["signedvoucher",3]],[[],["modverifyparams",3]],[[]],[[]],[[]],[[]],[[],[["actorerror",3],["result",4,["actorerror"]]]],[[["constructorparams",3]],[["actorerror",3],["result",4,["actorerror"]]]],null,[[],["lanestate",3]],[[],["merge",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["lanestate",3]],["bool",15]],[[["merge",3]],["bool",15]],[[["signedvoucher",3]],["bool",15]],[[["modverifyparams",3]],["bool",15]],null,null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["signedvoucher",3]]],[[]],null,null,[[["i64",15]],["option",4]],[[["u64",15]],["option",4]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["serialized",3],["methodnum",6]],[["serialized",3],["result",4,["serialized","actorerror"]],["actorerror",3]]],null,null,null,null,null,null,null,[[["lanestate",3]],["bool",15]],[[["merge",3]],["bool",15]],[[["signedvoucher",3]],["bool",15]],[[["modverifyparams",3]],["bool",15]],[[["address",3],["cid",3]]],null,null,null,null,null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],[["actorerror",3],["result",4,["actorerror"]]]],null,null,[[],[["vec",3,["u8"]],["result",4,["vec","error"]],["error",3]]],null,null,null,null,null,[[]],[[]],[[]],[[]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["updatechannelstateparams",3]],[["actorerror",3],["result",4,["actorerror"]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[],["claim",3]],[[],["cronevent",3]],[[]],[[]],null,[[]],[[],["state",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["claim",3]],["bool",15]],null,null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["i64",15]],["option",4]],[[["u64",15]],["option",4]],[[["address",3]],[["option",4,["claim"]],["result",4,["option","box"]],["box",3,["stderror"]]]],null,[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["tokenamount",6]],[[["serialized",3],["methodnum",6]],[["serialized",3],["result",4,["serialized","actorerror"]],["actorerror",3]]],null,null,null,[[["address",3]],[["result",4,["bool","box"]],["box",3,["stderror"]],["bool",15]]],[[["address",3]],[["option",4,["claim"]],["result",4,["option","box"]],["box",3,["stderror"]]]],null,[[["claim",3]],["bool",15]],[[],[["result",4,["state","box"]],["state",3],["box",3,["stderror"]]]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["address",3],["map",6],["claim",3]],[["box",3,["stderror"]],["result",4,["box"]]]],null,null,null,null,[[]],[[]],null,null,null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["chainepoch",6]],["tokenamount",6]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["vestingfunction",4]],[[],["reward",3]],[[],["awardblockrewardparams",3]],[[],["thisepochrewardreturn",3]],[[]],[[]],[[]],[[]],null,null,[[],["state",3]],[[["usize",15]]],[[],["storagepower",6]],[[["usize",15]]],[[],["storagepower",6]],[[["usize",15]]],[[["usize",15]]],[[],["storagepower",6]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],null,null,null,null,[[["vestingfunction",4]],["bool",15]],[[["reward",3]],["bool",15]],[[["awardblockrewardparams",3]],["bool",15]],[[["thisepochrewardreturn",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],null,[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["tokenamount",6]],[[["serialized",3],["methodnum",6]],[["serialized",3],["result",4,["serialized","actorerror"]],["actorerror",3]]],null,[[["reward",3]],["bool",15]],[[["awardblockrewardparams",3]],["bool",15]],[[["thisepochrewardreturn",3]],["bool",15]],[[["storagepower",6]]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["address",3]],[[["usize",15]]],[[["usize",15]]],[[],["address",3]],[[["usize",15]]],[[],["address",3]],[[],["address",3]],[[["usize",15]]],[[],["address",3]],[[["usize",15]]],[[],["address",3]],[[["usize",15]]],[[],["address",3]],[[["usize",15]]],[[],["address",3]],[[["usize",15]]],[[],["address",3]],[[["usize",15]]],[[],["address",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],[["actorerror",3],["result",4,["actorerror"]]]],[[],["state",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[["i64",15]],["option",4]],[[["u64",15]],["option",4]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[["serialized",3],["methodnum",6]],[["serialized",3],["result",4,["serialized","actorerror"]],["actorerror",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],null,null,null,null,null,null,[[["address",3],["tokenamount",6]],[["box",3,["stderror"]],["result",4,["box"]]]],[[["byteskey",3]],[["box",3,["stderror"]],["result",4,["box"]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],[["vec",3,["byteskey"]],["result",4,["vec","error"]],["error",4]]],[[],[["result",4,["option","error"]],["option",4],["error",4]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["exitcode",4]],["actorerror",3]],[[],["actorerror",3]],[[],[["stderror",8],["box",3,["stderror"]]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[],[["box",3,["stderror"]],["result",4,["box"]]]],[[],[["box",3,["stderror"]],["result",4,["box"]]]],[[["chainepoch",6]],[["box",3,["stderror"]],["result",4,["box"]]]],[[],[["box",3,["stderror"]],["result",4,["box"]]]],[[]],[[]],[[]],[[]],[[["cid",3]],[["result",4,["error"]],["error",4]]],[[["cid",3],["usize",15],["u32",15]],[["result",4,["error"]],["error",4]]],[[["cid",3]],[["result",4,["error"]],["error",4]]],[[["cid",3]],[["result",4,["error"]],["error",4]]],[[["address",3]],[["box",3,["stderror"]],["tokenamount",6],["result",4,["tokenamount","box"]]]],[[],[["option",4,["amt"]],["box",3,["stderror"]],["result",4,["option","box"]]]],[[["chainepoch",6]],[["option",4,["set"]],["box",3,["stderror"]],["result",4,["option","box"]]]],[[],[["error",4],["result",4,["bool","error"]],["bool",15]]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],null,[[["address",3],["tokenamount",6]],[["box",3,["stderror"]],["result",4,["box"]]]],[[]],[[["usize",15],["u32",15]]],[[]],[[]],[[["u32",15]]],[[["dealid",6],["chainepoch",6]],[["box",3,["stderror"]],["result",4,["box"]]]],[[["byteskey",3]],[["result",4,["error"]],["error",4]]],[[["chainepoch",6]],[["box",3,["stderror"]],["result",4,["box"]]]],[[["dealid",6],["chainepoch",6]],[["box",3,["stderror"]],["result",4,["box"]]]],[[],[["box",3,["stderror"]],["result",4,["box"]]]],[[["chainepoch",6]],[["box",3,["stderror"]],["result",4,["box"]]]],[[],[["error",4],["cid",3],["result",4,["cid","error"]]]],[[],[["error",4],["cid",3],["result",4,["cid","error"]]]],[[],[["error",4],["cid",3],["result",4,["cid","error"]]]],[[],[["error",4],["cid",3],["result",4,["cid","error"]]]],null,[[["address",3],["tokenamount",6]],[["box",3,["stderror"]],["tokenamount",6],["result",4,["tokenamount","box"]]]],[[],[["box",3,["stderror"]],["tokenamount",6],["result",4,["tokenamount","box"]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["abortwithargs",3]],[["actorerror",3],["result",4,["actorerror"]]]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,[[["callervalidationargs",3]],[["actorerror",3],["result",4,["actorerror"]]]],null,null,null,[[]],[[["createactorargs",3]],[["actorerror",3],["result",4,["actorerror"]]]],null,null,[[],["state",3]],[[["address",3]],[["actorerror",3],["result",4,["actorerror"]]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["i64",15]],["option",4]],[[["u64",15]],["option",4]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],[["result",4,["inspectruntimereturn","actorerror"]],["actorerror",3],["inspectruntimereturn",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["serialized",3],["methodnum",6]],[["serialized",3],["result",4,["serialized","actorerror"]],["actorerror",3]]],null,null,[[["mutatestateargs",3]],[["actorerror",3],["result",4,["actorerror"]]]],null,null,[[["address",3]],[["resolveaddressresponse",3],["result",4,["resolveaddressresponse","actorerror"]],["actorerror",3]]],null,[[["sendargs",3]],[["actorerror",3],["sendreturn",3],["result",4,["sendreturn","actorerror"]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],[["vec",3,["bigint"]],["result",4,["vec","parsebiginterror"]],["parsebiginterror",3]]],[[["bigint",3]],["bigint",3]],null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["filterestimate",3]],[[]],[[],["filterestimate",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["vec",3]],[[],["vec",3]],[[["usize",15]]],[[],["bigint",3]],[[["usize",15]]],[[],["bigint",3]],[[["usize",15]]],[[],["bigint",3]],[[["usize",15]]],[[],["bigint",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["filterestimate",3]],["bool",15]],[[],["bigint",3]],[[["chainepoch",6]],["bigint",3]],[[["filterestimate",3],["chainepoch",6]],["bigint",3]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["bigint",3]],["bigint",3]],[[["filterestimate",3],["bigint",3],["bigint",3]]],[[["filterestimate",3]],["bool",15]],[[["bigint",3]]],[[["bigint",3],["chainepoch",6]],["filterestimate",3]],null,[[],["result",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["addverifierclientparams",6]],[["actorerror",3],["result",4,["actorerror"]]]],[[["addverifierparams",6]],[["actorerror",3],["result",4,["actorerror"]]]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["verifierparams",3]],[[],["bytesparams",3]],[[]],[[]],[[["address",3]],[["actorerror",3],["result",4,["actorerror"]]]],null,[[["usize",15]]],[[["usize",15]]],[[],["storagepower",6]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["verifierparams",3]],["bool",15]],[[["bytesparams",3]],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["i64",15]],["option",4]],[[["u64",15]],["option",4]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["serialized",3],["methodnum",6]],[["serialized",3],["result",4,["serialized","actorerror"]],["actorerror",3]]],[[["verifierparams",3]],["bool",15]],[[["bytesparams",3]],["bool",15]],[[["address",3]],[["box",3,["stderror"]],["state",3],["result",4,["state","box"]]]],[[["address",3]],[["actorerror",3],["result",4,["actorerror"]]]],[[["restorebytesparams",6]],[["actorerror",3],["result",4,["actorerror"]]]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["usebytesparams",6]],[["actorerror",3],["result",4,["actorerror"]]]],null,null,[[]],[[]],[[]],[[]],[[]],[[]]],"p":[[4,"ExitCode"],[3,"ActorState"],[3,"SYSTEM_ACTOR_CODE_ID"],[3,"INIT_ACTOR_CODE_ID"],[3,"CRON_ACTOR_CODE_ID"],[3,"ACCOUNT_ACTOR_CODE_ID"],[3,"POWER_ACTOR_CODE_ID"],[3,"MINER_ACTOR_CODE_ID"],[3,"MARKET_ACTOR_CODE_ID"],[3,"PAYCH_ACTOR_CODE_ID"],[3,"MULTISIG_ACTOR_CODE_ID"],[3,"REWARD_ACTOR_CODE_ID"],[3,"VERIFREG_ACTOR_CODE_ID"],[3,"CHAOS_ACTOR_CODE_ID"],[3,"CALLER_TYPES_SIGNABLE"],[3,"ActorError"],[3,"Serialized"],[4,"Method"],[3,"State"],[3,"Actor"],[4,"Method"],[3,"Actor"],[3,"State"],[3,"Entry"],[3,"ConstructorParams"],[4,"Method"],[3,"State"],[3,"Actor"],[3,"ConstructorParams"],[3,"ExecParams"],[3,"ExecReturn"],[4,"Method"],[3,"WithdrawBalanceParams"],[3,"Actor"],[3,"DealProposal"],[3,"ClientDealProposal"],[3,"DealState"],[3,"State"],[3,"OnMinerSectorsTerminateParams"],[3,"OnMinerSectorsTerminateParamsRef"],[3,"PublishStorageDealsParams"],[3,"PublishStorageDealsReturn"],[3,"VerifyDealsForActivationParams"],[3,"SectorDeals"],[3,"VerifyDealsForActivationParamsRef"],[3,"VerifyDealsForActivationReturn"],[3,"SectorWeights"],[3,"ActivateDealsParams"],[3,"ComputeDataCommitmentParams"],[3,"ComputeDataCommitmentParamsRef"],[3,"ComputeDataCommitmentReturn"],[3,"SectorDataSpec"],[4,"CollisionPolicy"],[4,"Method"],[3,"Partition"],[3,"SectorOnChainInfo"],[3,"ExpirationSet"],[3,"DeadlineSectorMap"],[3,"PartitionSectorMap"],[3,"ExpirationQueue"],[3,"PowerPair"],[3,"TerminationResult"],[3,"Deadline"],[3,"State"],[3,"VestingFunds"],[3,"BitFieldQueue"],[3,"ProveCommitAggregateParams"],[3,"DisputeInfo"],[3,"VestingFund"],[3,"WithdrawBalanceParams"],[3,"Sectors"],[3,"PoStResult"],[3,"VestSpec"],[3,"AdvanceDeadlineResult"],[3,"Actor"],[3,"Deadlines"],[3,"WindowedPoSt"],[3,"BASE_REWARD_FOR_DISPUTED_WINDOW_POST"],[3,"BASE_PENALTY_FOR_DISPUTED_WINDOW_POST"],[3,"MinerInfo"],[3,"MinerConstructorParams"],[3,"CronEventPayload"],[3,"PartitionKey"],[3,"GetControlAddressesReturn"],[3,"ChangeWorkerAddressParams"],[3,"ChangePeerIDParams"],[3,"ChangeMultiaddrsParams"],[3,"ConfirmSectorProofsParams"],[3,"PoStPartition"],[3,"SubmitWindowedPoStParams"],[3,"ProveCommitSectorParams"],[3,"CheckSectorProvenParams"],[3,"ExtendSectorExpirationParams"],[3,"ExpirationExtension"],[3,"TerminateSectorsParams"],[3,"TerminationDeclaration"],[3,"TerminateSectorsReturn"],[3,"DeclareFaultsParams"],[3,"FaultDeclaration"],[3,"DeclareFaultsRecoveredParams"],[3,"RecoveryDeclaration"],[3,"CompactPartitionsParams"],[3,"CompactSectorNumbersParams"],[3,"ReportConsensusFaultParams"],[3,"WorkerKeyChange"],[3,"PreCommitSectorBatchParams"],[3,"SectorPreCommitInfo"],[3,"SectorPreCommitOnChainInfo"],[3,"Fault"],[3,"ApplyRewardParams"],[3,"DisputeWindowedPoStParams"],[3,"TxnID"],[4,"Method"],[3,"Actor"],[3,"LockBalanceParams"],[3,"State"],[3,"ProposeReturn"],[3,"ApproveReturn"],[3,"Transaction"],[3,"ProposalHashData"],[3,"ConstructorParams"],[3,"ProposeParams"],[3,"TxnIDParams"],[3,"AddSignerParams"],[3,"RemoveSignerParams"],[3,"SwapSignerParams"],[3,"ChangeNumApprovalsThresholdParams"],[3,"QUALITY_BASE_MULTIPLIER"],[3,"DEAL_WEIGHT_MULTIPLIER"],[3,"VERIFIED_DEAL_WEIGHT_MULTIPLIER"],[4,"Method"],[3,"ModVerifyParams"],[3,"SignedVoucher"],[3,"Actor"],[3,"State"],[3,"LaneState"],[3,"Merge"],[3,"ConstructorParams"],[3,"PaymentVerifyParams"],[3,"UpdateChannelStateParams"],[4,"Method"],[3,"Actor"],[3,"State"],[3,"Claim"],[3,"CronEvent"],[3,"CreateMinerParams"],[3,"CreateMinerReturn"],[3,"UpdateClaimedPowerParams"],[3,"EnrollCronEventParams"],[3,"CurrentTotalPowerReturn"],[4,"Method"],[4,"VestingFunction"],[3,"Reward"],[3,"State"],[3,"Actor"],[3,"BASELINE_EXPONENT"],[3,"BASELINE_INITIAL_VALUE"],[3,"INIT_BASELINE_POWER"],[3,"AwardBlockRewardParams"],[3,"ThisEpochRewardReturn"],[3,"SYSTEM_ACTOR_ADDR"],[3,"INIT_ACTOR_ADDR"],[3,"REWARD_ACTOR_ADDR"],[3,"CRON_ACTOR_ADDR"],[3,"STORAGE_POWER_ACTOR_ADDR"],[3,"STORAGE_MARKET_ACTOR_ADDR"],[3,"VERIFIED_REGISTRY_ACTOR_ADDR"],[3,"CHAOS_ACTOR_ADDR"],[3,"BURNT_FUNDS_ACTOR_ADDR"],[3,"RESERVE_ADDRESS"],[4,"Method"],[3,"Actor"],[3,"State"],[3,"BalanceTable"],[3,"Multimap"],[3,"SetMultimap"],[3,"Set"],[8,"ActorDowncast"],[4,"Method"],[3,"Actor"],[3,"CreateActorArgs"],[3,"ResolveAddressResponse"],[3,"CallerValidationArgs"],[3,"State"],[3,"SendArgs"],[3,"SendReturn"],[3,"MutateStateArgs"],[3,"AbortWithArgs"],[3,"InspectRuntimeReturn"],[3,"AlphaBetaFilter"],[3,"FilterEstimate"],[3,"NUM"],[3,"DENOM"],[3,"DEFAULT_ALPHA"],[3,"DEFAULT_BETA"],[3,"LN_2"],[3,"EPSILON"],[4,"Method"],[3,"Actor"],[3,"VerifierParams"],[3,"BytesParams"],[3,"State"],[3,"MINIMUM_VERIFIED_DEAL_SIZE"]]},\
"forest_address":{"doc":"","t":[12,13,13,3,13,13,3,17,13,17,4,13,13,13,13,13,13,13,13,13,13,7,4,13,17,4,4,17,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,12,12,3,3,11,11,11,11,5,11,11,11,11,11,11,0,5,11,11,11,11,11,11,11,11,0,5,5,12,12,3,3,11,11,11,11,5,11,11,11,11,11,5,11,11,11,11,11,11,11,11],"n":["0","Actor","Actor","Address","BLS","BLS","BLSPublicKey","BLS_PUB_LEN","Base32Decoding","CHECKSUM_HASH_LEN","Error","ID","ID","InvalidAddressIDPayload","InvalidBLSLength","InvalidChecksum","InvalidLength","InvalidPayload","InvalidPayloadLength","InvalidSECPLength","Mainnet","NETWORK_DEFAULT","Network","NonIDAddress","PAYLOAD_HASH_LEN","Payload","Protocol","SECP_PUB_LEN","Secp256k1","Secp256k1","Testnet","UnknownNetwork","UnknownProtocol","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","checksum","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","default","deref","deserialize","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bytes","from_i64","from_str","from_u64","hash","hash","hash","hash","hash","id","into","into","into","into","into","into","into_payload","json","ne","ne","ne","network","new","new_actor","new_bls","new_id","new_secp256k1","payload","payload_bytes","protocol","serialize","set_network","source","to_bytes","to_bytes","to_owned","to_owned","to_owned","to_owned","to_owned","to_raw_bytes","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","validate_checksum","0","0","AddressJson","AddressJsonRef","borrow","borrow","borrow_mut","borrow_mut","deserialize","deserialize","from","from","from","into","into","opt","serialize","serialize","serialize","try_from","try_from","try_into","try_into","type_id","type_id","vec","deserialize","serialize","0","0","AddressJsonSlice","AddressJsonVec","borrow","borrow","borrow_mut","borrow_mut","deserialize","deserialize","from","from","into","into","serialize","serialize","serialize","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["forest_address","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","forest_address::json","","","","","","","","","","","","","","","","","","","","","","","","","","forest_address::json::opt","","forest_address::json::vec","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Actor protocol address, 20 byte hash of actor data","Actor protocol addressing","Address is the struct that defines the protocol and data …","BLS key address, full 48 byte public key","BLS key addressing","Public key struct used as BLS Address data. This type is …","BLS public key length used for validation of BLS …","","Length of the checksum hash for string encodings.","Address error","ID protocol address.","ID protocol addressing","","","","","","","","","","Network defines the preconfigured networks to use with …","","Hash length of payload for Secp and Actor addresses.","Payload is the data of the Address. Variants are the …","Protocol defines the addressing protocol used to derive …","Uncompressed secp public key used for validation of Secp …","SECP256K1 key address, 20 byte hash of PublicKey","SECP256K1 key addressing","","","","","","","","","","","","","","","","Checksum calculates the 4 byte checksum hash","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates address from encoded bytes","","","","","","","","","Get ID of the address. ID protocol only.","","","","","","","Converts Address into <code>Payload</code> object, where the …","","","","","Returns network configuration of Address","Generates payload from raw bytes and protocol.","Generates new address using the Actor protocol","Generates new address using BLS pubkey","Generates new address using ID protocol","Generates new address using Secp256k1 pubkey","Returns the <code>Payload</code> object from the address, where the …","Returns the raw bytes data payload of the Address","Returns protocol for Address","","Sets the network for the address and returns a mutable …","","Returns encoded bytes of Address including the protocol …","Returns encoded bytes of Address","","","","","","Returns encoded bytes of Address without the protocol …","","","","","","","","","","","","","","","","","","","","","","Validates the checksum against the ingest data","","","Wrapper for serializing and deserializing a SignedMessage …","Wrapper for serializing a SignedMessage reference to JSON.","","","","","","","","","","","","","","","","","","","","","","","","","","","Wrapper for serializing a cid slice to JSON.","Wrapper for serializing and deserializing a Cid vector …","","","","","","","","","","","","","","","","","","",""],"i":[1,2,3,0,2,3,0,0,4,0,0,2,3,4,4,4,4,4,4,4,5,0,0,4,0,0,0,0,2,3,5,4,4,4,5,1,2,3,6,4,5,1,2,3,6,0,5,1,2,3,6,5,1,2,3,6,5,1,6,4,5,1,2,3,6,4,4,5,1,2,3,3,6,6,4,4,4,4,4,5,1,1,2,3,3,3,6,6,6,3,6,3,5,1,2,3,6,6,4,5,1,2,3,6,6,0,4,2,6,6,2,6,6,6,6,6,6,6,6,6,4,2,6,5,1,2,3,6,2,4,3,6,4,5,1,2,3,6,4,5,1,2,3,6,4,5,1,2,3,6,0,7,8,0,0,7,8,7,8,0,7,7,7,8,7,8,0,0,7,8,7,8,7,8,7,8,0,0,0,9,10,0,0,9,10,9,10,0,9,9,10,9,10,0,9,10,9,10,9,10,9,10],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["vec",3,["u8"]],["u8",15]]],[[],["network",4]],[[],["blspublickey",3]],[[],["payload",4]],[[],["protocol",4]],[[],["address",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[["error",4]],["bool",15]],[[["network",4]],["bool",15]],[[],["bool",15]],[[["payload",4]],["bool",15]],[[["protocol",4]],["bool",15]],[[["address",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["leb128error",4]],["error",4]],[[["parseinterror",3]],["error",4]],[[["error",3]],["error",4]],[[["decodeerror",3]]],[[]],[[]],[[]],[[]],[[]],[[["payload",4]]],[[]],[[["payload",4]]],[[]],[[["addressjson",3]]],[[],[["result",4,["error"]],["error",4]]],[[["i64",15]],["option",4]],[[["str",15]],[["result",4,["error"]],["error",4]]],[[["u64",15]],["option",4]],[[]],[[]],[[]],[[]],[[]],[[],[["u64",15],["result",4,["u64","error"]],["error",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["payload",4]],null,[[["error",4]],["bool",15]],[[["payload",4]],["bool",15]],[[["address",3]],["bool",15]],[[],["network",4]],[[["protocol",4]],[["result",4,["error"]],["error",4]]],[[]],[[],[["result",4,["error"]],["error",4]]],[[["u64",15]]],[[],[["result",4,["error"]],["error",4]]],[[],["payload",4]],[[],[["vec",3,["u8"]],["u8",15]]],[[],["protocol",4]],[[],["result",4]],[[["network",4]]],[[],[["error",8],["option",4,["error"]]]],[[],[["vec",3,["u8"]],["u8",15]]],[[],[["vec",3,["u8"]],["u8",15]]],[[]],[[]],[[]],[[]],[[]],[[],[["vec",3,["u8"]],["u8",15]]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["vec",3,["u8"]],["u8",15]],["bool",15]],null,null,null,null,[[]],[[]],[[]],[[]],[[],[["result",4,["address"]],["address",3]]],[[],["result",4]],[[]],[[["address",3]]],[[]],[[]],[[]],null,[[["address",3]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,[[],[["option",4,["address"]],["result",4,["option"]]]],[[["option",4]],["result",4]],null,null,null,null,[[]],[[]],[[]],[[]],[[],[["result",4,["vec"]],["vec",3,["address"]]]],[[],["result",4]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[3,"BLSPublicKey"],[4,"Payload"],[4,"Protocol"],[4,"Error"],[4,"Network"],[3,"Address"],[3,"AddressJson"],[3,"AddressJsonRef"],[3,"AddressJsonVec"],[3,"AddressJsonSlice"]]},\
"forest_bigint":{"doc":"","tn":["BigInt","BigUint","Integer","Minus","NoSign","ParseBigIntError","Plus","Sign","ToBigInt","ToBigUint","TryFromBigIntError","U32Digits","U64Digits","abs","abs_sub","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","assign_from_slice","assign_from_slice","average_ceil","average_ceil","average_floor","average_floor","bigint_ser","biguint_ser","bit","bit","bitand","bitand","bitand","bitand","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitor","bitor","bitor","bitor","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bits","bits","bitxor","bitxor","bitxor","bitxor","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cbrt","cbrt","cbrt","cbrt","checked_add","checked_add","checked_add","checked_div","checked_div","checked_div","checked_mul","checked_mul","checked_mul","checked_sub","checked_sub","checked_sub","clone","clone","clone","clone","clone","clone_from","clone_from","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","count","count","count_ones","default","default","description","description","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_ceil","div_ceil","div_ceil","div_floor","div_floor","div_floor","div_mod_floor","div_mod_floor","div_mod_floor","div_rem","div_rem","div_rem","divides","divides","divides","eq","eq","eq","eq","eq","extended_gcd","extended_gcd_lcm","extended_gcd_lcm","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_biguint","from_bytes_be","from_bytes_be","from_bytes_le","from_bytes_le","from_f64","from_f64","from_i128","from_i128","from_i64","from_i64","from_radix_be","from_radix_be","from_radix_le","from_radix_le","from_signed_bytes_be","from_signed_bytes_le","from_slice","from_slice","from_str","from_str","from_str_radix","from_str_radix","from_u128","from_u128","from_u64","from_u64","gcd","gcd","gcd","gcd_lcm","gcd_lcm","gcd_lcm","hash","hash","hash","into","into","into","into","into","into","into","into_iter","into_iter","into_original","into_parts","is_even","is_even","is_even","is_multiple_of","is_multiple_of","is_multiple_of","is_negative","is_odd","is_odd","is_odd","is_one","is_one","is_positive","is_zero","is_zero","iter_u32_digits","iter_u32_digits","iter_u64_digits","iter_u64_digits","last","last","lcm","lcm","lcm","len","len","magnitude","mod_floor","mod_floor","mod_floor","modpow","modpow","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","ne","ne","neg","neg","new","new","next","next","next_multiple_of","next_multiple_of","next_multiple_of","not","nth","nth_root","nth_root","nth_root","nth_root","one","one","parse_bytes","parse_bytes","partial_cmp","partial_cmp","partial_cmp","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","prev_multiple_of","prev_multiple_of","prev_multiple_of","product","product","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","set_bit","set_bit","set_one","set_one","set_zero","set_zero","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","sign","signum","size_hint","size_hint","sqrt","sqrt","sqrt","sqrt","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum","to_bigint","to_bigint","to_bigint","to_biguint","to_biguint","to_biguint","to_biguint","to_bytes_be","to_bytes_be","to_bytes_le","to_bytes_le","to_f32","to_f32","to_f64","to_f64","to_i128","to_i128","to_i64","to_i64","to_owned","to_owned","to_owned","to_owned","to_owned","to_radix_be","to_radix_be","to_radix_le","to_radix_le","to_signed_bytes_be","to_signed_bytes_le","to_str_radix","to_str_radix","to_string","to_string","to_string","to_string","to_u128","to_u128","to_u32_digits","to_u32_digits","to_u64","to_u64","to_u64_digits","to_u64_digits","trailing_ones","trailing_zeros","trailing_zeros","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","zero","zero","0","0","BigIntDe","BigIntSer","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","default","deserialize","deserialize","eq","from","from","into","into","json","ne","serialize","serialize","serialize","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","deserialize","opt","serialize","deserialize","serialize","0","0","BigUintDe","BigUintSer","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","deserialize","deserialize","from","from","into","into","serialize","serialize","serialize","to_owned","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["forest_bigintforest_bigint::bigint_ser","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","forest_bigint::bigint_ser::json","","","forest_bigint::bigint_ser::json::opt","","forest_bigint::biguint_ser","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A big signed integer type.","A big unsigned integer type.","","","","","","A Sign is a <code>BigInt</code>’s composing element.","A generic trait for converting a value to a <code>BigInt</code>. This …","A generic trait for converting a value to a <code>BigUint</code>.","The error type returned when a checked conversion …","An iterator of <code>u32</code> digits representation of a <code>BigUint</code> or …","An iterator of <code>u64</code> digits representation of a <code>BigUint</code> or …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Reinitializes a <code>BigInt</code>.","Assign a value to a <code>BigUint</code>.","Returns the ceil value of the average of <code>self</code> and <code>other</code>.","Returns the ceil value of the average of <code>self</code> and <code>other</code>.","Returns the floor value of the average of <code>self</code> and <code>other</code>.","Returns the floor value of the average of <code>self</code> and <code>other</code>.","","","Returns whether the bit in position <code>bit</code> is set, using the …","Returns whether the bit in the given position is set","","","","","","","","","","","","","","","","","Determines the fewest bits necessary to express the <code>BigInt</code>…","Determines the fewest bits necessary to express the …","","","","","","","","","","","","","","","","","","","","","","","","Returns the truncated principal cube root of <code>self</code> – see …","","Returns the truncated principal cube root of <code>self</code> – see …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the number of one bits.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Ceiled integer division.","Floored integer division.","","","","","Simultaneous floored integer division and modulus. …","Simultaneous truncated integer division and modulus. …","","","Deprecated, use <code>is_multiple_of</code> instead.","Deprecated, use <code>is_multiple_of</code> instead.","Deprecated, use <code>is_multiple_of</code> instead.","","","","","","Greatest common divisor and Bézout coefficients.","Greatest common divisor, least common multiple, and …","Greatest common divisor, least common multiple, and …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates and initializes a <code>BigInt</code>.","Creates and initializes a <code>BigInt</code>.","Creates and initializes a <code>BigUint</code>.","Creates and initializes a <code>BigInt</code>.","Creates and initializes a <code>BigUint</code>.","","","","","","","Creates and initializes a <code>BigInt</code>. Each u8 of the input …","Creates and initializes a <code>BigUint</code>. Each u8 of the input …","Creates and initializes a <code>BigInt</code>. Each u8 of the input …","Creates and initializes a <code>BigUint</code>. Each u8 of the input …","Creates and initializes a <code>BigInt</code> from an array of bytes in…","Creates and initializes a <code>BigInt</code> from an array of bytes …","Creates and initializes a <code>BigInt</code>.","Creates and initializes a <code>BigUint</code>.","","","Creates and initializes a BigInt.","Creates and initializes a <code>BigUint</code>.","","","","","Greatest Common Divisor (GCD).","Calculates the Greatest Common Divisor (GCD) of the …","Calculates the Greatest Common Divisor (GCD) of the …","Calculates the Greatest Common Divisor (GCD) and Lowest …","Calculates the Greatest Common Divisor (GCD) and Lowest …","Greatest Common Divisor (GCD) and Lowest Common Multiple …","","","","","","","","","","","","","Extract the original value, if available. The value will …","Convert this <code>BigInt</code> into its <code>Sign</code> and <code>BigUint</code> magnitude, …","Returns <code>true</code> if the number is even.","Returns <code>true</code> if the number is divisible by <code>2</code>.","Returns <code>true</code> if the number is divisible by <code>2</code>.","Returns <code>true</code> if <code>self</code> is a multiple of <code>other</code>.","Returns <code>true</code> if the number is a multiple of <code>other</code>.","Returns <code>true</code> if the number is a multiple of <code>other</code>.","","Returns <code>true</code> if the number is odd.","Returns <code>true</code> if the number is not divisible by <code>2</code>.","Returns <code>true</code> if the number is not divisible by <code>2</code>.","","","","","","Returns an iterator of <code>u32</code> digits representation of the …","Returns an iterator of <code>u32</code> digits representation of the …","Returns an iterator of <code>u64</code> digits representation of the …","Returns an iterator of <code>u64</code> digits representation of the …","","","Lowest Common Multiple (LCM).","Calculates the Lowest Common Multiple (LCM) of the number …","Calculates the Lowest Common Multiple (LCM) of the number …","","","Returns the magnitude of the <code>BigInt</code> as a <code>BigUint</code>.","Floored integer modulo, satisfying:","","","Returns <code>(self ^ exponent) mod modulus</code>","Returns <code>(self ^ exponent) % modulus</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Negate Sign value.","","Creates and initializes a BigInt.","Creates and initializes a <code>BigUint</code>.","","","Rounds up to nearest multiple of argument.","Rounds up to nearest multiple of argument.","Rounds up to nearest multiple of argument.","","","","Returns the truncated principal <code>n</code>th root of <code>self</code> – See …","","Returns the truncated principal <code>n</code>th root of <code>self</code> – see …","","","Creates and initializes a <code>BigInt</code>.","Creates and initializes a <code>BigUint</code>. The input slice must …","","","","","","","","","Returns <code>self ^ exponent</code>.","","","","","","","","","","","","Returns <code>self ^ exponent</code>.","","","","","","","","","","","","","Rounds down to nearest multiple of argument.","Rounds down to nearest multiple of argument.","Rounds down to nearest multiple of argument.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Sets or clears the bit in the given position, using the …","Sets or clears the bit in the given positioneturns the sign of the <code>BigInt</code> as a <code>Sign</code>.","","","","","Returns the truncated principal square root of <code>self</code> – …","","Returns the truncated principal square root of <code>self</code> – …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Converts the value of <code>self</code> to a <code>BigInt</code>.","","","Converts the value of <code>self</code> to a <code>BigUint</code>.","","Converts this <code>BigInt</code> into a <code>BigUint</code>, if it’s not …","","Returns the sign and the byte representation of the <code>BigInt</code>…","Returns the byte representation of the <code>BigUint</code> in …","Returns the sign and the byte representation of the <code>BigInt</code>…","Returns the byte representation of the <code>BigUint</code> in …","","","","","","","","","","","","","","Returns the integer in the requested base in big-endian …","Returns the integer in the requested base in big-endian …","Returns the integer in the requested base in …","Returns the integer in the requested base in …","Returns the two’s-complement byte representation of the …","Returns the two’s-complement byte representation of the …","Returns the integer formatted as a string in the given …","Returns the integer formatted as a string in the given …","","","","","","","Returns the sign and the <code>u32</code> digits representation of the …","Returns the <code>u32</code> digits representation of the <code>BigUint</code> …","","","Returns the sign and the <code>u64</code> digits representation of the …","Returns the <code>u64</code> digits representation of the <code>BigUint</code> …","Returns the number of least-significant bits that are …","Returns the number of least-significant bits that are …","Returns the number of least-significant bits that are …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Wrapper for deserializing as BigInt from bytes.","Wrapper for serializing big ints to match filecoin spec. …","","","","","","","","Deserializes bytes into big int.","","","","","","","","","Serializes big int as bytes following Filecoin spec.","","","","","","","","","","Deserializes String into BigInt.","","Serializes BigInt as String","","","","","Wrapper for deserializing as BigUint from bytes.","Wrapper for serializing big ints to match filecoin spec. …","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,1,1,0,1,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,2,3,2,3,2,3,0,0,2,3,2,2,3,3,2,2,3,3,2,2,3,3,2,2,3,3,2,3,2,2,3,3,2,2,3,3,4,5,1,2,3,6,7,4,5,1,2,3,6,7,2,2,3,3,2,2,3,2,2,3,2,2,3,2,2,3,1,2,3,6,7,2,3,1,2,3,6,7,1,2,3,4,5,3,2,3,6,7,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,2,3,8,8,2,3,2,3,8,8,2,3,8,2,3,1,2,3,6,7,8,2,8,1,2,2,2,2,2,2,3,3,3,3,3,3,6,6,7,7,4,5,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,6,7,2,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,2,2,3,2,3,2,3,2,3,2,3,8,2,3,2,3,8,1,2,3,4,5,1,2,3,6,7,4,5,7,2,8,2,3,8,2,3,2,8,2,3,2,3,2,2,3,2,3,2,3,4,5,8,2,3,4,5,2,8,2,3,2,3,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,6,7,1,2,2,3,4,5,2,3,8,2,5,2,2,3,3,2,3,2,3,1,2,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,8,2,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,2,3,2,3,2,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,4,5,2,2,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,2,3,9,2,3,10,2,2,3,2,3,2,3,2,3,2,3,2,3,2,3,1,2,3,6,7,2,3,2,3,2,2,2,3,2,3,6,7,2,3,2,3,2,3,2,3,3,2,3,4,5,1,2,3,3,3,3,3,3,3,3,3,6,7,4,5,1,2,3,6,7,4,5,1,2,3,6,7,2,3,11,12,0,0,11,12,11,12,12,12,12,0,12,12,11,12,11,12,0,12,0,11,12,12,11,12,11,12,11,12,0,0,0,0,0,13,14,0,0,13,14,13,14,14,14,0,14,13,14,13,14,0,13,14,14,13,14,13,14,13,14],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["bigint",3]],[[["bigint",3]],["bigint",3]],[[["u16",15]],["bigint",3]],[[["i32",15]],["bigint",3]],[[["i64",15]],["bigint",3]],[[["u64",15]],["bigint",3]],[[["u8",15]],["bigint",3]],[[["usize",15]],["bigint",3]],[[["i32",15]],["bigint",3]],[[["i64",15]],["bigint",3]],[[["u8",15]],["bigint",3]],[[["u128",15]],["bigint",3]],[[["isize",15]],["bigint",3]],[[["i16",15]],["bigint",3]],[[["isize",15]],["bigint",3]],[[["i8",15]],["bigint",3]],[[["i8",15]],["bigint",3]],[[["bigint",3]],["bigint",3]],[[["u32",15]],["bigint",3]],[[["u64",15]],["bigint",3]],[[["i16",15]],["bigint",3]],[[["usize",15]],["bigint",3]],[[["u128",15]],["bigint",3]],[[["bigint",3]],["bigint",3]],[[["u32",15]],["bigint",3]],[[["i128",15]],["bigint",3]],[[["u16",15]],["bigint",3]],[[["i128",15]],["bigint",3]],[[["biguint",3]],["biguint",3]],[[["u64",15]],["biguint",3]],[[["u128",15]],["biguint",3]],[[["u32",15]],["biguint",3]],[[["u8",15]],["biguint",3]],[[["usize",15]],["biguint",3]],[[["u64",15]],["biguint",3]],[[["u32",15]],["biguint",3]],[[["u128",15]],["biguint",3]],[[["u16",15]],["biguint",3]],[[["u8",15]],["biguint",3]],[[["u16",15]],["biguint",3]],[[["biguint",3]],["biguint",3]],[[["usize",15]],["biguint",3]],[[["i8",15]]],[[["bigint",3]]],[[["i64",15]]],[[["bigint",3]]],[[["u64",15]]],[[["i16",15]]],[[["u32",15]]],[[["u16",15]]],[[["i32",15]]],[[["i128",15]]],[[["u8",15]]],[[["u128",15]]],[[["isize",15]]],[[["usize",15]]],[[["u64",15]]],[[["usize",15]]],[[["u16",15]]],[[["biguint",3]]],[[["biguint",3]]],[[["u32",15]]],[[["u8",15]]],[[["u128",15]]],[[["sign",4]]],[[]],[[]],[[]],[[]],[[]],null,null,[[["u64",15]],["bool",15]],[[["u64",15]],["bool",15]],[[["bigint",3]],["bigint",3]],[[["bigint",3]],["bigint",3]],[[["biguint",3]],["biguint",3]],[[["biguint",3]],["biguint",3]],[[["bigint",3]]],[[["bigint",3]]],[[["biguint",3]]],[[["biguint",3]]],[[["bigint",3]],["bigint",3]],[[["bigint",3]],["bigint",3]],[[["biguint",3]],["biguint",3]],[[["biguint",3]],["biguint",3]],[[["bigint",3]]],[[["bigint",3]]],[[["biguint",3]]],[[["biguint",3]]],[[],["u64",15]],[[],["u64",15]],[[["bigint",3]],["bigint",3]],[[["bigint",3]],["bigint",3]],[[["biguint",3]],["biguint",3]],[[["biguint",3]],["biguint",3]],[[["bigint",3]]],[[["bigint",3]]],[[["biguint",3]]],[[["biguint",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bigint",3]],[[],["bigint",3]],[[],["biguint",3]],[[],["biguint",3]],[[["bigint",3]],[["option",4,["bigint"]],["bigint",3]]],[[["bigint",3]],[["option",4,["bigint"]],["bigint",3]]],[[["biguint",3]],[["option",4,["biguint"]],["biguint",3]]],[[["bigint",3]],[["option",4,["bigint"]],["bigint",3]]],[[["bigint",3]],[["option",4,["bigint"]],["bigint",3]]],[[["biguint",3]],[["option",4,["biguint"]],["biguint",3]]],[[["bigint",3]],[["option",4,["bigint"]],["bigint",3]]],[[["bigint",3]],[["option",4,["bigint"]],["bigint",3]]],[[["biguint",3]],[["option",4,["biguint"]],["biguint",3]]],[[["bigint",3]],[["option",4,["bigint"]],["bigint",3]]],[[["bigint",3]],[["option",4,["bigint"]],["bigint",3]]],[[["biguint",3]],[["option",4,["biguint"]],["biguint",3]]],[[],["sign",4]],[[],["bigint",3]],[[],["biguint",3]],[[],["parsebiginterror",3]],[[],["tryfrombiginterror",3]],[[["bigint",3]]],[[["biguint",3]]],[[]],[[]],[[]],[[]],[[]],[[["sign",4]],["ordering",4]],[[["bigint",3]],["ordering",4]],[[["biguint",3]],["ordering",4]],[[],["usize",15]],[[],["usize",15]],[[],["u64",15]],[[],["bigint",3]],[[],["biguint",3]],[[],["str",15]],[[],["str",15]],[[["i8",15]],["bigint",3]],[[["u16",15]],["bigint",3]],[[["bigint",3]],["bigint",3]],[[["u32",15]],["bigint",3]],[[["u64",15]],["bigint",3]],[[["i16",15]],["bigint",3]],[[["u128",15]],["bigint",3]],[[["i64",15]],["bigint",3]],[[["i8",15]],["bigint",3]],[[["i32",15]],["bigint",3]],[[["i16",15]],["bigint",3]],[[["bigint",3]],["bigint",3]],[[["isize",15]],["bigint",3]],[[["u8",15]],["bigint",3]],[[["i64",15]],["bigint",3]],[[["isize",15]],["bigint",3]],[[["u64",15]],["bigint",3]],[[["u128",15]],["bigint",3]],[[["u32",15]],["bigint",3]],[[["usize",15]],["bigint",3]],[[["u16",15]],["bigint",3]],[[["usize",15]],["bigint",3]],[[["i32",15]],["bigint",3]],[[["i128",15]],["bigint",3]],[[["u8",15]],["bigint",3]],[[["i128",15]],["bigint",3]],[[["u64",15]],["biguint",3]],[[["u32",15]],["biguint",3]],[[["u8",15]],["biguint",3]],[[["u128",15]],["biguint",3]],[[["usize",15]],["biguint",3]],[[["biguint",3]],["biguint",3]],[[["u16",15]],["biguint",3]],[[["u128",15]],["biguint",3]],[[["u8",15]],["biguint",3]],[[["u64",15]],["biguint",3]],[[["biguint",3]],["biguint",3]],[[["u16",15]],["biguint",3]],[[["usize",15]],["biguint",3]],[[["u32",15]],["biguint",3]],[[["i8",15]]],[[["bigint",3]]],[[["i64",15]]],[[["bigint",3]]],[[["u32",15]]],[[["u128",15]]],[[["i32",15]]],[[["usize",15]]],[[["u8",15]]],[[["u64",15]]],[[["i128",15]]],[[["isize",15]]],[[["u16",15]]],[[["i16",15]]],[[["u128",15]]],[[["biguint",3]]],[[["u16",15]]],[[["u64",15]]],[[["biguint",3]]],[[["u8",15]]],[[["u32",15]]],[[["usize",15]]],[[["bigint",3]],["bigint",3]],[[["biguint",3]],["biguint",3]],[[]],[[]],[[["bigint",3]],["bigint",3]],[[["biguint",3]],["biguint",3]],[[["bigint",3]]],[[["biguint",3]]],[[]],[[]],[[["bigint",3]]],[[["biguint",3]]],[[],["bool",15]],[[["bigint",3]],["bool",15]],[[["biguint",3]],["bool",15]],[[["sign",4]],["bool",15]],[[["bigint",3]],["bool",15]],[[["biguint",3]],["bool",15]],[[["parsebiginterror",3]],["bool",15]],[[["tryfrombiginterror",3]],["bool",15]],[[],["extendedgcd",3]],[[["bigint",3]]],[[]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[]],[[]],[[]],[[["u16",15]],["bigint",3]],[[["i8",15]],["bigint",3]],[[["isize",15]],["bigint",3]],[[["u128",15]],["bigint",3]],[[["u32",15]],["bigint",3]],[[["u64",15]],["bigint",3]],[[["i64",15]],["bigint",3]],[[["usize",15]],["bigint",3]],[[["i32",15]],["bigint",3]],[[["i128",15]],["bigint",3]],[[["i16",15]],["bigint",3]],[[]],[[["u8",15]],["bigint",3]],[[["biguint",3]],["bigint",3]],[[["u8",15]],["biguint",3]],[[["u128",15]],["biguint",3]],[[["usize",15]],["biguint",3]],[[["u64",15]],["biguint",3]],[[["u16",15]],["biguint",3]],[[]],[[["u32",15]],["biguint",3]],[[]],[[]],[[["sign",4],["biguint",3]],["bigint",3]],[[["sign",4]],["bigint",3]],[[],["biguint",3]],[[["sign",4]],["bigint",3]],[[],["biguint",3]],[[["f64",15]],[["option",4,["bigint"]],["bigint",3]]],[[["f64",15]],[["option",4,["biguint"]],["biguint",3]]],[[["i128",15]],[["option",4,["bigint"]],["bigint",3]]],[[["i128",15]],[["option",4,["biguint"]],["biguint",3]]],[[["i64",15]],[["option",4,["bigint"]],["bigint",3]]],[[["i64",15]],[["option",4,["biguint"]],["biguint",3]]],[[["sign",4],["u32",15]],[["option",4,["bigint"]],["bigint",3]]],[[["u32",15]],[["option",4,["biguint"]],["biguint",3]]],[[["sign",4],["u32",15]],[["option",4,["bigint"]],["bigint",3]]],[[["u32",15]],[["option",4,["biguint"]],["biguint",3]]],[[],["bigint",3]],[[],["bigint",3]],[[["sign",4]],["bigint",3]],[[],["biguint",3]],[[["str",15]],[["result",4,["bigint","parsebiginterror"]],["parsebiginterror",3],["bigint",3]]],[[["str",15]],[["result",4,["biguint","parsebiginterror"]],["parsebiginterror",3],["biguint",3]]],[[["str",15],["u32",15]],[["result",4,["bigint","parsebiginterror"]],["parsebiginterror",3],["bigint",3]]],[[["str",15],["u32",15]],[["result",4,["biguint","parsebiginterror"]],["parsebiginterror",3],["biguint",3]]],[[["u128",15]],[["option",4,["bigint"]],["bigint",3]]],[[["u128",15]],[["option",4,["biguint"]],["biguint",3]]],[[["u64",15]],[["option",4,["bigint"]],["bigint",3]]],[[["u64",15]],[["option",4,["biguint"]],["biguint",3]]],[[]],[[["bigint",3]],["bigint",3]],[[["biguint",3]],["biguint",3]],[[["bigint",3]]],[[["biguint",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["bigint",3]],["bool",15]],[[["biguint",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["u32digits",3]],[[],["u32digits",3]],[[],["u64digits",3]],[[],["u64digits",3]],[[],[["option",4,["u32"]],["u32",15]]],[[],[["option",4,["u64"]],["u64",15]]],[[]],[[["bigint",3]],["bigint",3]],[[["biguint",3]],["biguint",3]],[[],["usize",15]],[[],["usize",15]],[[],["biguint",3]],[[]],[[["bigint",3]],["bigint",3]],[[["biguint",3]],["biguint",3]],[[["bigint",3]],["bigint",3]],[[["biguint",3]],["biguint",3]],[[["sign",4]],["sign",4]],[[["u128",15]],["bigint",3]],[[["bigint",3]],["bigint",3]],[[["u16",15]],["bigint",3]],[[["i16",15]],["bigint",3]],[[["u128",15]],["bigint",3]],[[["i32",15]],["bigint",3]],[[["i8",15]],["bigint",3]],[[["i64",15]],["bigint",3]],[[["u8",15]],["bigint",3]],[[["u64",15]],["bigint",3]],[[["i128",15]],["bigint",3]],[[["isize",15]],["bigint",3]],[[["i32",15]],["bigint",3]],[[["u64",15]],["bigint",3]],[[["u32",15]],["bigint",3]],[[["isize",15]],["bigint",3]],[[["i16",15]],["bigint",3]],[[["i64",15]],["bigint",3]],[[["u8",15]],["bigint",3]],[[["bigint",3]],["bigint",3]],[[["u32",15]],["bigint",3]],[[["usize",15]],["bigint",3]],[[["u16",15]],["bigint",3]],[[["i8",15]],["bigint",3]],[[["i128",15]],["bigint",3]],[[["usize",15]],["bigint",3]],[[["u16",15]],["biguint",3]],[[["u8",15]],["biguint",3]],[[["u8",15]],["biguint",3]],[[["u64",15]],["biguint",3]],[[["u128",15]],["biguint",3]],[[["u32",15]],["biguint",3]],[[["u64",15]],["biguint",3]],[[["u32",15]],["biguint",3]],[[["usize",15]],["biguint",3]],[[["biguint",3]],["biguint",3]],[[["u128",15]],["biguint",3]],[[["usize",15]],["biguint",3]],[[["u16",15]],["biguint",3]],[[["biguint",3]],["biguint",3]],[[["bigint",3]]],[[["i16",15]]],[[["usize",15]]],[[["bigint",3]]],[[["u32",15]]],[[["i128",15]]],[[["i32",15]]],[[["u8",15]]],[[["i8",15]]],[[["isize",15]]],[[["u16",15]]],[[["u128",15]]],[[["i64",15]]],[[["u64",15]]],[[["u128",15]]],[[["usize",15]]],[[["u8",15]]],[[["biguint",3]]],[[["u32",15]]],[[["u64",15]]],[[["u16",15]]],[[["biguint",3]]],[[["parsebiginterror",3]],["bool",15]],[[["tryfrombiginterror",3]],["bool",15]],[[],["sign",4]],[[],["bigint",3]],[[["sign",4],["u32",15],["vec",3,["u32","global"]],["global",3]],["bigint",3]],[[["u32",15],["vec",3,["u32","global"]],["global",3]],["biguint",3]],[[],[["option",4,["u32"]],["u32",15]]],[[],[["option",4,["u64"]],["u64",15]]],[[["bigint",3]],["bigint",3]],[[["biguint",3]],["biguint",3]],[[]],[[],["bigint",3]],[[["usize",15]],[["option",4,["u64"]],["u64",15]]],[[["u32",15]],["bigint",3]],[[["u32",15]],["bigint",3]],[[["u32",15]],["biguint",3]],[[["u32",15]],["biguint",3]],[[],["bigint",3]],[[],["biguint",3]],[[["u32",15]],[["option",4,["bigint"]],["bigint",3]]],[[["u32",15]],[["option",4,["biguint"]],["biguint",3]]],[[["sign",4]],[["option",4,["ordering"]],["ordering",4]]],[[["bigint",3]],[["option",4,["ordering"]],["ordering",4]]],[[["biguint",3]],[["option",4,["ordering"]],["ordering",4]]],[[["u8",15]],["bigint",3]],[[["biguint",3]],["bigint",3]],[[["u32",15]],["bigint",3]],[[["u128",15]],["bigint",3]],[[["u64",15]],["bigint",3]],[[["u32",15]],["bigint",3]],[[["u128",15]],["bigint",3]],[[["u32",15]],["bigint",3]],[[["usize",15]],["bigint",3]],[[["u16",15]],["bigint",3]],[[["u64",15]],["bigint",3]],[[["usize",15]],["bigint",3]],[[["u16",15]],["bigint",3]],[[["biguint",3]],["bigint",3]],[[["u8",15]],["bigint",3]],[[["u128",15]],["biguint",3]],[[["u32",15]],["biguint",3]],[[["u32",15]],["biguint",3]],[[["u16",15]],["biguint",3]],[[["u64",15]],["biguint",3]],[[["u32",15]],["biguint",3]],[[["u16",15]],["biguint",3]],[[["u8",15]],["biguint",3]],[[["usize",15]],["biguint",3]],[[["u64",15]],["biguint",3]],[[["biguint",3]],["biguint",3]],[[["usize",15]],["biguint",3]],[[["u128",15]],["biguint",3]],[[["u8",15]],["biguint",3]],[[["biguint",3]],["biguint",3]],[[["bigint",3]],["bigint",3]],[[["biguint",3]],["biguint",3]],[[]],[[],["bigint",3]],[[],["biguint",3]],[[["u128",15]],["bigint",3]],[[["u64",15]],["bigint",3]],[[["i128",15]],["bigint",3]],[[["bigint",3]],["bigint",3]],[[["bigint",3]],["bigint",3]],[[["usize",15]],["bigint",3]],[[["u128",15]],["bigint",3]],[[["i64",15]],["bigint",3]],[[["i32",15]],["bigint",3]],[[["u32",15]],["bigint",3]],[[["u8",15]],["bigint",3]],[[["i16",15]],["bigint",3]],[[["isize",15]],["bigint",3]],[[["u32",15]],["bigint",3]],[[["u8",15]],["bigint",3]],[[["u64",15]],["bigint",3]],[[["i16",15]],["bigint",3]],[[["i32",15]],["bigint",3]],[[["isize",15]],["bigint",3]],[[["u16",15]],["bigint",3]],[[["usize",15]],["bigint",3]],[[["i8",15]],["bigint",3]],[[["i128",15]],["bigint",3]],[[["u16",15]],["bigint",3]],[[["i8",15]],["bigint",3]],[[["i64",15]],["bigint",3]],[[["usize",15]],["biguint",3]],[[["usize",15]],["biguint",3]],[[["u8",15]],["biguint",3]],[[["biguint",3]],["biguint",3]],[[["u32",15]],["biguint",3]],[[["u64",15]],["biguint",3]],[[["u16",15]],["biguint",3]],[[["u128",15]],["biguint",3]],[[["biguint",3]],["biguint",3]],[[["u64",15]],["biguint",3]],[[["u8",15]],["biguint",3]],[[["u128",15]],["biguint",3]],[[["u32",15]],["biguint",3]],[[["u16",15]],["biguint",3]],[[["i16",15]]],[[["i128",15]]],[[["u16",15]]],[[["usize",15]]],[[["i32",15]]],[[["bigint",3]]],[[["isize",15]]],[[["i64",15]]],[[["bigint",3]]],[[["u64",15]]],[[["u32",15]]],[[["u8",15]]],[[["i8",15]]],[[["u128",15]]],[[["usize",15]]],[[["biguint",3]]],[[["u16",15]]],[[["u64",15]]],[[["u32",15]]],[[["u8",15]]],[[["u128",15]]],[[["biguint",3]]],[[["u64",15],["bool",15]]],[[["u64",15],["bool",15]]],[[]],[[]],[[]],[[]],[[["i8",15]],["bigint",3]],[[["u32",15]],["bigint",3]],[[["u64",15]],["bigint",3]],[[["i32",15]],["bigint",3]],[[["i64",15]],["bigint",3]],[[["i128",15]],["bigint",3]],[[["u8",15]],["bigint",3]],[[["i64",15]],["bigint",3]],[[["u16",15]],["bigint",3]],[[["u8",15]],["bigint",3]],[[["u32",15]],["bigint",3]],[[["isize",15]],["bigint",3]],[[["i16",15]],["bigint",3]],[[["u64",15]],["bigint",3]],[[["u16",15]],["bigint",3]],[[["i16",15]],["bigint",3]],[[["usize",15]],["bigint",3]],[[["i8",15]],["bigint",3]],[[["usize",15]],["bigint",3]],[[["u128",15]],["bigint",3]],[[["i128",15]],["bigint",3]],[[["i32",15]],["bigint",3]],[[["u128",15]],["bigint",3]],[[["isize",15]],["bigint",3]],[[["i128",15]],["biguint",3]],[[["usize",15]],["biguint",3]],[[["u128",15]],["biguint",3]],[[["i64",15]],["biguint",3]],[[["i8",15]],["biguint",3]],[[["i64",15]],["biguint",3]],[[["u8",15]],["biguint",3]],[[["u32",15]],["biguint",3]],[[["i16",15]],["biguint",3]],[[["isize",15]],["biguint",3]],[[["u8",15]],["biguint",3]],[[["i8",15]],["biguint",3]],[[["u64",15]],["biguint",3]],[[["u64",15]],["biguint",3]],[[["isize",15]],["biguint",3]],[[["i128",15]],["biguint",3]],[[["usize",15]],["biguint",3]],[[["u32",15]],["biguint",3]],[[["u16",15]],["biguint",3]],[[["i16",15]],["biguint",3]],[[["u16",15]],["biguint",3]],[[["u128",15]],["biguint",3]],[[["i32",15]],["biguint",3]],[[["i32",15]],["biguint",3]],[[["u16",15]]],[[["isize",15]]],[[["i128",15]]],[[["u16",15]]],[[["i8",15]]],[[["i32",15]]],[[["i32",15]]],[[["i16",15]]],[[["u8",15]]],[[["u128",15]]],[[["u8",15]]],[[["isize",15]]],[[["u64",15]]],[[["i64",15]]],[[["u32",15]]],[[["usize",15]]],[[["u64",15]]],[[["u32",15]]],[[["i16",15]]],[[["i128",15]]],[[["u128",15]]],[[["i8",15]]],[[["usize",15]]],[[["i64",15]]],[[["u128",15]]],[[["u64",15]]],[[["u64",15]]],[[["i128",15]]],[[["usize",15]]],[[["u8",15]]],[[["usize",15]]],[[["i32",15]]],[[["u16",15]]],[[["i64",15]]],[[["i32",15]]],[[["i16",15]]],[[["i8",15]]],[[["u8",15]]],[[["i16",15]]],[[["u16",15]]],[[["i64",15]]],[[["u32",15]]],[[["isize",15]]],[[["i8",15]]],[[["u128",15]]],[[["u32",15]]],[[["isize",15]]],[[["i128",15]]],[[["i64",15]],["bigint",3]],[[["isize",15]],["bigint",3]],[[["u64",15]],["bigint",3]],[[["usize",15]],["bigint",3]],[[["u16",15]],["bigint",3]],[[["u64",15]],["bigint",3]],[[["u8",15]],["bigint",3]],[[["i32",15]],["bigint",3]],[[["i16",15]],["bigint",3]],[[["u8",15]],["bigint",3]],[[["isize",15]],["bigint",3]],[[["i8",15]],["bigint",3]],[[["i64",15]],["bigint",3]],[[["i128",15]],["bigint",3]],[[["u128",15]],["bigint",3]],[[["u32",15]],["bigint",3]],[[["i32",15]],["bigint",3]],[[["u16",15]],["bigint",3]],[[["u32",15]],["bigint",3]],[[["i8",15]],["bigint",3]],[[["usize",15]],["bigint",3]],[[["i16",15]],["bigint",3]],[[["u128",15]],["bigint",3]],[[["i128",15]],["bigint",3]],[[["i16",15]],["biguint",3]],[[["usize",15]],["biguint",3]],[[["u16",15]],["biguint",3]],[[["i32",15]],["biguint",3]],[[["i64",15]],["biguint",3]],[[["u64",15]],["biguint",3]],[[["u128",15]],["biguint",3]],[[["isize",15]],["biguint",3]],[[["u128",15]],["biguint",3]],[[["usize",15]],["biguint",3]],[[["u32",15]],["biguint",3]],[[["isize",15]],["biguint",3]],[[["u8",15]],["biguint",3]],[[["u32",15]],["biguint",3]],[[["i8",15]],["biguint",3]],[[["i128",15]],["biguint",3]],[[["i128",15]],["biguint",3]],[[["u8",15]],["biguint",3]],[[["i16",15]],["biguint",3]],[[["u64",15]],["biguint",3]],[[["i8",15]],["biguint",3]],[[["u16",15]],["biguint",3]],[[["i64",15]],["biguint",3]],[[["i32",15]],["biguint",3]],[[["i16",15]]],[[["i64",15]]],[[["i128",15]]],[[["u8",15]]],[[["u64",15]]],[[["isize",15]]],[[["i16",15]]],[[["isize",15]]],[[["u64",15]]],[[["usize",15]]],[[["i8",15]]],[[["u32",15]]],[[["u16",15]]],[[["i8",15]]],[[["i32",15]]],[[["i128",15]]],[[["i32",15]]],[[["i64",15]]],[[["u16",15]]],[[["u32",15]]],[[["u128",15]]],[[["u8",15]]],[[["u128",15]]],[[["usize",15]]],[[["i32",15]]],[[["i128",15]]],[[["usize",15]]],[[["u16",15]]],[[["usize",15]]],[[["u128",15]]],[[["i32",15]]],[[["i64",15]]],[[["isize",15]]],[[["i8",15]]],[[["u32",15]]],[[["u128",15]]],[[["i64",15]]],[[["u32",15]]],[[["u64",15]]],[[["i16",15]]],[[["i8",15]]],[[["u8",15]]],[[["i128",15]]],[[["u8",15]]],[[["isize",15]]],[[["u16",15]]],[[["u64",15]]],[[["i16",15]]],[[],["sign",4]],[[],["bigint",3]],[[]],[[]],[[],["bigint",3]],[[],["bigint",3]],[[],["biguint",3]],[[],["biguint",3]],[[["i32",15]],["bigint",3]],[[["isize",15]],["bigint",3]],[[["i16",15]],["bigint",3]],[[["i128",15]],["bigint",3]],[[["i64",15]],["bigint",3]],[[["i8",15]],["bigint",3]],[[["u16",15]],["bigint",3]],[[["i16",15]],["bigint",3]],[[["u128",15]],["bigint",3]],[[["u64",15]],["bigint",3]],[[["u32",15]],["bigint",3]],[[["u8",15]],["bigint",3]],[[["bigint",3]],["bigint",3]],[[["u64",15]],["bigint",3]],[[["usize",15]],["bigint",3]],[[["u32",15]],["bigint",3]],[[["i8",15]],["bigint",3]],[[["u16",15]],["bigint",3]],[[["bigint",3]],["bigint",3]],[[["isize",15]],["bigint",3]],[[["i32",15]],["bigint",3]],[[["i64",15]],["bigint",3]],[[["u128",15]],["bigint",3]],[[["i128",15]],["bigint",3]],[[["u8",15]],["bigint",3]],[[["usize",15]],["bigint",3]],[[["u32",15]],["biguint",3]],[[["u128",15]],["biguint",3]],[[["u128",15]],["biguint",3]],[[["u16",15]],["biguint",3]],[[["usize",15]],["biguint",3]],[[["u16",15]],["biguint",3]],[[["biguint",3]],["biguint",3]],[[["u32",15]],["biguint",3]],[[["usize",15]],["biguint",3]],[[["u8",15]],["biguint",3]],[[["u8",15]],["biguint",3]],[[["biguint",3]],["biguint",3]],[[["u64",15]],["biguint",3]],[[["u64",15]],["biguint",3]],[[["i8",15]]],[[["u128",15]]],[[["bigint",3]]],[[["u64",15]]],[[["bigint",3]]],[[["isize",15]]],[[["u32",15]]],[[["i128",15]]],[[["usize",15]]],[[["i16",15]]],[[["i32",15]]],[[["u16",15]]],[[["i64",15]]],[[["u8",15]]],[[["u128",15]]],[[["u32",15]]],[[["u16",15]]],[[["u8",15]]],[[["biguint",3]]],[[["u64",15]]],[[["biguint",3]]],[[["usize",15]]],[[],["bigint",3]],[[],["biguint",3]],[[],[["option",4,["bigint"]],["bigint",3]]],[[],[["option",4,["bigint"]],["bigint",3]]],[[],[["option",4,["bigint"]],["bigint",3]]],[[],[["option",4,["biguint"]],["biguint",3]]],[[],[["option",4,["biguint"]],["biguint",3]]],[[],[["option",4,["biguint"]],["biguint",3]]],[[],[["option",4,["biguint"]],["biguint",3]]],[[]],[[],[["vec",3,["u8","global"]],["u8",15],["global",3]]],[[]],[[],[["vec",3,["u8","global"]],["u8",15],["global",3]]],[[],[["option",4,["f32"]],["f32",15]]],[[],[["option",4,["f32"]],["f32",15]]],[[],[["option",4,["f64"]],["f64",15]]],[[],[["option",4,["f64"]],["f64",15]]],[[],[["i128",15],["option",4,["i128"]]]],[[],[["i128",15],["option",4,["i128"]]]],[[],[["option",4,["i64"]],["i64",15]]],[[],[["option",4,["i64"]],["i64",15]]],[[]],[[]],[[]],[[]],[[]],[[["u32",15]]],[[["u32",15]],[["vec",3,["u8","global"]],["u8",15],["global",3]]],[[["u32",15]]],[[["u32",15]],[["vec",3,["u8","global"]],["u8",15],["global",3]]],[[],[["vec",3,["u8","global"]],["u8",15],["global",3]]],[[],[["vec",3,["u8","global"]],["u8",15],["global",3]]],[[["u32",15]],["string",3]],[[["u32",15]],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],[["u128",15],["option",4,["u128"]]]],[[],[["u128",15],["option",4,["u128"]]]],[[]],[[],[["global",3],["vec",3,["u32","global"]],["u32",15]]],[[],[["option",4,["u64"]],["u64",15]]],[[],[["option",4,["u64"]],["u64",15]]],[[]],[[],[["u64",15],["global",3],["vec",3,["u64","global"]]]],[[],["u64",15]],[[],[["option",4,["u64"]],["u64",15]]],[[],[["option",4,["u64"]],["u64",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["i8",15]],[["tryfrombiginterror",3],["result",4,["biguint","tryfrombiginterror"]],["biguint",3]]],[[],["result",4]],[[["i128",15]],[["tryfrombiginterror",3],["result",4,["biguint","tryfrombiginterror"]],["biguint",3]]],[[["bigint",3]],[["result",4,["biguint","tryfrombiginterror"]],["tryfrombiginterror",3,["bigint"]],["biguint",3]]],[[["bigint",3]],[["tryfrombiginterror",3],["result",4,["biguint","tryfrombiginterror"]],["biguint",3]]],[[["i32",15]],[["tryfrombiginterror",3],["result",4,["biguint","tryfrombiginterror"]],["biguint",3]]],[[["i16",15]],[["tryfrombiginterror",3],["result",4,["biguint","tryfrombiginterror"]],["biguint",3]]],[[["i64",15]],[["tryfrombiginterror",3],["result",4,["biguint","tryfrombiginterror"]],["biguint",3]]],[[["isize",15]],[["tryfrombiginterror",3],["result",4,["biguint","tryfrombiginterror"]],["biguint",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["bigint",3]],[[],["biguint",3]],null,null,null,null,[[]],[[]],[[]],[[]],[[],["bigintde",3]],[[]],[[],["bigintde",3]],[[],[["bigint",3],["result",4,["bigint"]]]],[[],["result",4]],[[["bigintde",3]],["bool",15]],[[]],[[]],[[]],[[]],null,[[["bigintde",3]],["bool",15]],[[["bigint",3]],["result",4]],[[],["result",4]],[[],["result",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],[["bigint",3],["result",4,["bigint"]]]],null,[[["bigint",3]],["result",4]],[[],[["option",4,["bigint"]],["result",4,["option"]]]],[[["option",4]],["result",4]],null,null,null,null,[[]],[[]],[[]],[[]],[[],["biguintde",3]],[[]],[[],[["result",4,["biguint"]],["biguint",3]]],[[],["result",4]],[[]],[[]],[[]],[[]],[[["biguint",3]],["result",4]],[[],["result",4]],[[],["result",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[4,"Sign"],[3,"BigInt"],[3,"BigUint"],[3,"U32Digits"],[3,"U64Digits"],[3,"ParseBigIntError"],[3,"TryFromBigIntError"],[8,"Integer"],[8,"ToBigInt"],[8,"ToBigUint"],[3,"BigIntSer"],[3,"BigIntDe"],[3,"BigUintSer"],[3,"BigUintDe"]]},\
"forest_bitfield":{"doc":"","t":[3,13,4,8,13,11,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,8,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["BitField","Unvalidated","UnvalidatedBitField","Validate","Validated","bitand_assign","bitfield","bitor_assign","bitxor_assign","borrow","borrow","borrow_mut","borrow_mut","bounded_iter","clone","clone_into","contains_all","contains_any","cut","default","deserialize","deserialize","eq","first","fmt","fmt","from","from","from","from","from_bytes","from_iter","from_iter","from_ranges","get","into","into","is_empty","iter","iter","json","len","new","ranges","serialize","serialize","set","slice","sub_assign","to_bytes","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","union","unset","validate","validate_mut","RangeIterator","Ranges","Skip","Take","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cut","difference","from","from","from","intersection","into","into","into","into_iter","into_iter","into_iter","new","next","next","next","ranges_from_bits","skip_bits","symmetric_difference","take_bits","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","union","0","0","BitFieldJson","BitFieldJsonRef","borrow","borrow","borrow_mut","borrow_mut","deserialize","eq","fmt","from","from","from","into","into","ne","serialize","serialize","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["forest_bitfield","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","forest_bitfield::iter","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","forest_bitfield::json","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A bit field with buffered insertion/removal that …","","A bit field that may not yet have been validated for …","A trait for types that can produce a <code>&BitField</code> (or fail …","","","Constructs a <code>BitField</code> from a given list of 1s and 0s.","","","","","","","Returns an iterator over the indices of the bit field’s …","","","Returns true if the <code>self</code> is a superset of <code>other</code>.","Returns true if <code>self</code> overlaps with <code>other</code>.","Returns a new bit field containing the bits in <code>self</code> that …","","","","","Returns the index of the lowest bit present in the bit …","","","","","","","Decodes RLE+ encoded bytes into a bit field.","","","Creates a new bit field from a <code>RangeIterator</code>.","Returns <code>true</code> if the bit field contains the bit at a given …","","","Returns <code>true</code> if the bit field is empty.","","Returns an iterator over the indices of the bit field’s …","","Returns the number of set bits in the bit field.","Creates an empty bit field.","Returns an iterator over the ranges of set bits that make …","","","Adds the bit at a given index to the bit field.","Returns a slice of the bit field with the start index of …","","Turns a bit field into its RLE+ encoded form.","","","","","","","","Returns the union of the given bit fields as a new bit …","Removes the bit at a given index from the bit field.","","Validates the RLE+ encoding of the bit field, returning a …","A trait for iterators over <code>Range<usize></code>.","A <code>RangeIterator</code> that wraps a regular iterator over …","A <code>RangeIterator</code> that skips over <code>n</code> bits of antoher …","A <code>RangeIterator</code> that iterates over the first <code>n</code> bits of …","","","","","","","Returns a new <code>RangeIterator</code> over the bits in <code>self</code> that …","Returns a new <code>RangeIterator</code> over the bits that are in <code>self</code>…","","","","Returns a new <code>RangeIterator</code> over the bits that are in …","","","","","","","Creates a new <code>Ranges</code> instance.","","","","Returns a <code>RangeIterator</code> which ranges contain the values …","Returns a new <code>RangeIterator</code> over the bits in <code>self</code> after …","Returns a new <code>RangeIterator</code> over the bits that are in <code>self</code>…","Returns a new <code>RangeIterator</code> over the first <code>n</code> bits in <code>self</code>.","","","","","","","","","","Returns a new <code>RangeIterator</code> over the bits that are in <code>self</code>…","","","","Wrapper for serializing a UnsignedMessage reference to …","","","","","","","","","","","","","","","","","","","","",""],"i":[0,1,0,0,1,2,0,2,2,1,2,1,2,2,2,2,2,2,2,2,1,2,2,2,1,2,1,1,2,2,2,2,2,2,2,1,2,2,0,2,0,2,2,2,1,2,2,2,2,2,2,1,2,1,2,1,2,2,2,3,1,0,0,0,0,4,5,6,4,5,6,7,7,4,5,6,7,4,5,6,4,5,6,6,4,5,6,0,7,7,7,4,5,6,4,5,6,4,5,6,7,8,9,0,0,8,9,8,9,8,8,8,8,8,9,8,9,8,8,9,8,9,8,9,8,9],"f":[null,null,null,null,null,[[["bitfield",3]]],null,[[["bitfield",3]]],[[["bitfield",3]]],[[]],[[]],[[]],[[]],[[["usize",15]],[["result",4,["str"]],["str",15]]],[[],["bitfield",3]],[[]],[[["bitfield",3]],["bool",15]],[[["bitfield",3]],["bool",15]],[[]],[[],["bitfield",3]],[[],["result",4]],[[],["result",4]],[[],["bool",15]],[[],[["usize",15],["option",4,["usize"]]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["bitfield",3]]],[[]],[[]],[[["bitfieldjson",3]]],[[],[["result",4,["str"]],["str",15]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[]],[[["usize",15]],["bool",15]],[[]],[[]],[[],["bool",15]],null,[[]],null,[[],["usize",15]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[["usize",15]]],[[["usize",15]],[["result",4,["str"]],["str",15]]],[[["bitfield",3]]],[[],[["vec",3,["u8"]],["u8",15]]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[["usize",15]]],[[],[["result",4,["bitfield","str"]],["bitfield",3],["str",15]]],[[],[["bitfield",3],["str",15],["result",4,["bitfield","str"]]]],null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[["rangeiterator",8]],[["rangeiterator",8],["cut",3],["combine",3,["cut"]]]],[[["rangeiterator",8]],[["difference",3],["combine",3,["difference"]],["rangeiterator",8]]],[[]],[[]],[[]],[[["rangeiterator",8]],[["combine",3,["intersection"]],["intersection",3],["rangeiterator",8]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[["usize",15]],["skip",3]],[[["rangeiterator",8]],[["symmetricdifference",3],["combine",3,["symmetricdifference"]],["rangeiterator",8]]],[[["usize",15]],["take",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["rangeiterator",8]],[["combine",3,["union"]],["union",3],["rangeiterator",8]]],null,null,null,null,[[]],[[]],[[]],[[]],[[],["result",4]],[[["bitfieldjson",3]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[["bitfield",3]]],[[]],[[]],[[]],[[["bitfieldjson",3]],["bool",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[4,"UnvalidatedBitField"],[3,"BitField"],[8,"Validate"],[3,"Skip"],[3,"Take"],[3,"Ranges"],[8,"RangeIterator"],[3,"BitFieldJson"],[3,"BitFieldJsonRef"]]},\
"forest_blocks":{"doc":"","t":[17,3,4,13,13,13,3,13,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,0,0,11,12,11,11,11,11,11,11,11,11,12,12,11,11,0,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,12,11,12,12,12,3,3,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,0,5,11,11,11,11,11,11,11,11,11,11,5,5,3,12,11,11,11,11,11,11,11,11,11,11,12,11,11,0,12,11,11,11,11,11,11,12,12,3,3,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,3,3,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,0,11,11,5,5,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,12,11,12,12,3,3,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,0,5,11,11,11,11,11,11,11,11,11,11,5,5,3,3,3,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,3,3,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,12,3,11,11,11,11,11,11,5,11,11,11,11,11,11,11,5,11,11,11,11,11,11],"n":["BLOCK_MESSAGE_LIMIT","Block","Error","InvalidSignature","InvalidTipset","NoBlocks","TxMeta","Validation","bls_message_root","bls_messages","bls_msgs","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cid","clone","clone_into","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","drop","drop","drop","election_proof","eq","eq","fmt","fmt","fmt","from","from","from","from","gossip_block","header","header","header","init","init","init","into","into","into","ne","ne","secp_message_root","secp_messages","secp_msgs","serialize","ticket","tipset","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","ElectionProof","borrow","borrow_mut","clone","clone_into","cmp","compute_win_count","default","deref","deref_mut","deserialize","drop","eq","fmt","from","init","into","json","ne","partial_cmp","serialize","to_owned","try_from","try_into","type_id","vrfproof","vzip","win_count","0","0","ElectionProofJson","ElectionProofJsonRef","borrow","borrow","borrow_mut","borrow_mut","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","from","from","init","init","into","into","opt","serialize","serialize","serialize","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","deserialize","serialize","GossipBlock","bls_messages","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","fmt","from","header","init","into","json","secpk_messages","serialize","to_owned","try_from","try_into","type_id","vzip","0","0","GossipBlockJson","GossipBlockJsonRef","borrow","borrow","borrow_mut","borrow_mut","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","from","from","init","init","into","into","serialize","serialize","serialize","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","BlockHeader","BlockHeaderBuilder","beacon_entries","beacon_entries","bls_aggregate","bls_aggregate","borrow","borrow","borrow_mut","borrow_mut","build","builder","check_block_signature","cid","cid","clone","clone","clone_into","clone_into","default","deref","deref","deref_mut","deref_mut","deserialize","drop","drop","election_proof","election_proof","epoch","epoch","eq","fmt","fmt","fork_signal","fork_signal","from","from","from","init","init","into","into","is_ticket_winner","json","marshal_cbor","message_receipts","message_receipts","messages","messages","miner_address","miner_address","parent_base_fee","parent_base_fee","parents","parents","serialize","signature","signature","signature","state_root","state_root","ticket","ticket","timestamp","timestamp","to_owned","to_owned","to_signing_bytes","to_sort_key","to_string","try_from","try_from","try_into","try_into","type_id","type_id","validate_block_drand","vzip","vzip","weight","weight","winning_post_proof","winning_post_proof","0","0","BlockHeaderJson","BlockHeaderJsonRef","borrow","borrow","borrow_mut","borrow_mut","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","from","from","init","init","into","into","serialize","serialize","serialize","try_from","try_from","try_into","try_into","type_id","type_id","vec","vzip","vzip","deserialize","serialize","Ticket","borrow","borrow_mut","clone","clone_into","default","deref","deref_mut","deserialize","drop","eq","fmt","from","init","into","json","ne","new","serialize","to_owned","try_from","try_into","type_id","vrfproof","vzip","0","0","TicketJson","TicketJsonRef","borrow","borrow","borrow_mut","borrow_mut","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","from","from","init","init","into","into","opt","serialize","serialize","serialize","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","deserialize","serialize","FullTipset","Tipset","TipsetKeys","blocks","blocks","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cids","cids","cids","clone","clone","clone","clone_into","clone_into","clone_into","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","drop","drop","drop","epoch","epoch","eq","eq","eq","fmt","fmt","fmt","from","from","from","from","from","get_hash","hash","init","init","init","into","into","into","into_blocks","into_blocks","into_tipset","key","key","len","min_ticket","min_ticket_block","min_timestamp","ne","new","new","new","parent_state","parent_state","parents","serialize","tipset_json","tipset_keys_json","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","weight","weight","0","0","TipsetJson","TipsetJsonRef","borrow","borrow","borrow_mut","borrow_mut","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","fmt","from","from","from","from","init","init","into","into","serialize","serialize","serialize","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","0","TipsetKeysJson","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","deserialize","drop","fmt","from","from","init","into","serialize","serialize","to_owned","try_from","try_into","type_id","vzip"],"q":["forest_blocks","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","forest_blocks::election_proof","","","","","","","","","","","","","","","","","","","","","","","","","","","","forest_blocks::election_proof::json","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","forest_blocks::election_proof::json::opt","","forest_blocks::gossip_block","","","","","","","","","","","","","","","","","","","","","","","forest_blocks::gossip_block::json","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","forest_blocks::header","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","forest_blocks::header::json","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","forest_blocks::header::json::vec","","forest_blocks::ticket","","","","","","","","","","","","","","","","","","","","","","","","","forest_blocks::ticket::json","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","forest_blocks::ticket::json::opt","","forest_blocks::tipset","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","forest_blocks::tipset::tipset_json","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","forest_blocks::tipset::tipset_keys_json","","","","","","","","","","","","","","","","","","","","","",""],"d":["Limit of bls and secp messages combined in a block.","A complete Filecoin block. This contains the block header …","Blockchain blocks error","Invalid signature","Tipset contains invalid data, as described by the string …","The given tipset has no blocks","Tracks the merkleroots of both secp and bls messages …","Error in validating arbitrary data","","","Returns reference to the block’s BLS UnsignedMessages.","","","","","","","Returns block’s cid. This cid is the same as the …","","","","","","","","","","","","","","","","","","","","","","","","","Returns reference to the BlockHeader.","","","","","","","","","","","","Returns reference to the block’s Secp256k1 SignedMessage…","","","","","","","","","","","","","","","","","","Proofs generated by a miner which determines the reward …","","","","","","Uses VRFProof to compute number of wins. The algorithm is …","","","","","","","","","","","","","","","","","","","","","","","","Wrapper for serializing and deserializing a ElectionProof …","Wrapper for serializing a ElectionProof reference to JSON.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Block message used as serialized gossipsub messages for …","","","","","","","","","","","","","","","","","","","","","","","","","Wrapper for serializing and deserializing a GossipBlock …","Wrapper for serializing a GossipBlock reference to JSON.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Header of a block","Builder for <code>BlockHeader</code>.","BeaconEntries contain the verifiable oracle randomness …","Getter for Drand BeaconEntry","aggregate signature of miner in block","Getter for BlockHeader bls_aggregate","","","","","Builds a new <code>BlockHeader</code>.","Generates a BlockHeader builder as a constructor","Check to ensure block signature is valid","","Getter for BlockHeader cid","","","","","","","","","","","","","","Getter for BlockHeader epost_verify","epoch is the period in which a new block is generated. …","Getter for BlockHeader epoch","","","","","Getter for BlockHeader fork_signal","","","","","","","","Returns true if (h(vrfout) * totalPower) < (e * …","","","message_receipts is the Cid of the root of an array of …","Getter for BlockHeader message_receipts","messages contains the Cid to the merkle links for …","Getter for BlockHeader messages","miner_address is the address of the miner actor that …","Getter for BlockHeader miner_address","the base fee of the parent block","Getter for BlockHeader parent_base_fee","Parents is the set of parents this block was based on. …","Getter for BlockHeader parents","","","Getter for BlockHeader signature","","state_root is a cid pointer to the parent state root …","Getter for BlockHeader state_root","the ticket submitted with this block","Getter for BlockHeader ticket","timestamp, in seconds since the Unix epoch, at which this …","Getter for BlockHeader timestamp","","","Serializes the header to bytes for signing purposes i.e. …","Key used for sorting headers and blocks.","","","","","","","","Validates if the current header’s Beacon entries are …","","","weight is the aggregate chain weight of the parent set","Getter for BlockHeader weight","PoStProofs are the winning post proofs","Getter for winning PoSt proof","","","","Wrapper for serializing a BlockHeader reference to JSON.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A Ticket is a marker of a tick of the blockchain’s …","","","","","","","","","","","","","","","","","Ticket constructor","","","","","","A proof output by running a VRF on the VDFResult of the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","FullTipset is an expanded version of the Tipset that …","An immutable set of blocks at the same height with the …","A set of CIDs forming a unique key for a Tipset. Equal …","Returns all blocks in tipset.","Returns reference to all blocks in a full tipset.","","","","","","","Returns tipset header cids","Returns slice of Cids for the current tipset","","","","","","","","","","","","","","","","","","","Returns epoch of the tipset.","Returns epoch of the tipset.","","","","","","","","","","","","","","","","","","","","Consumes Tipset to convert into a vector of BlockHeader.","Returns all blocks in a full tipset.","Converts the full tipset into a Tipset which removes the …","Returns a key for the tipset.","Returns a key for the tipset.","Returns the number of blocks in the tipset.","Returns the smallest ticket of all blocks in the tipset","Returns the block with the smallest ticket of all blocks …","Returns the smallest timestamp of all blocks in the tipset","","","Builds a new Tipset from a collection of blocks. A valid …","","Returns the state root for the tipset parent.","Returns the state root for the tipset parent.","Returns the CIDs of the parents of the blocks in the …","","","","","","","","","","","","","","","","","","","Returns the tipset’s calculated weight","Returns the tipset’s calculated weight.","","","Wrapper for serializing and deserializing a SignedMessage …","Wrapper for serializing a SignedMessage reference to JSON.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,1,1,1,0,1,2,3,3,3,2,1,3,2,1,3,3,3,3,2,1,3,2,1,2,3,2,1,0,3,1,3,1,1,3,2,1,1,0,0,3,3,3,2,1,3,2,1,3,1,2,3,3,2,0,0,3,1,3,2,1,3,2,1,3,2,1,3,2,1,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,4,4,4,4,4,4,4,4,4,4,5,6,0,0,5,6,5,6,5,6,5,6,0,5,5,6,5,6,5,6,5,6,0,0,5,6,5,6,5,6,5,6,5,6,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,7,7,7,7,7,7,7,8,9,0,0,8,9,8,9,8,9,8,9,0,8,8,9,8,9,8,9,8,9,0,8,9,8,9,8,9,8,9,8,9,0,0,10,11,10,11,10,11,10,11,10,11,11,11,11,10,11,10,11,10,10,11,10,11,11,10,11,10,11,10,11,11,11,11,10,11,10,11,11,10,11,10,11,11,0,11,10,11,10,11,10,11,10,11,10,11,11,10,11,11,10,11,10,11,10,11,10,11,11,11,11,10,11,10,11,10,11,11,10,11,10,11,10,11,12,13,0,0,12,13,12,13,12,13,12,13,0,12,12,13,12,13,12,13,12,13,0,12,13,12,13,12,13,12,13,0,12,13,0,0,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,0,14,14,14,14,14,14,14,14,14,15,16,0,0,15,16,15,16,15,16,15,16,0,15,15,16,15,16,15,16,15,16,0,0,15,16,15,16,15,16,15,16,15,16,0,0,0,0,0,17,18,19,17,18,19,17,18,19,17,19,19,17,18,19,17,18,19,19,17,18,19,17,18,19,19,17,18,17,18,19,17,18,19,17,18,19,19,17,17,18,19,19,19,17,18,19,17,18,17,18,18,17,18,17,17,17,17,19,19,17,18,17,18,17,19,0,0,19,17,18,19,17,18,19,17,18,19,17,18,19,17,18,17,18,20,21,0,0,20,21,20,21,20,21,20,21,0,20,20,21,20,20,20,21,21,20,21,20,21,0,20,21,20,21,20,21,20,21,20,21,22,0,22,22,22,22,22,22,0,22,22,22,22,22,22,22,0,22,22,22,22,22,22],"f":[null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["cid",3]],[[],["block",3]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],null,[[["block",3]],["bool",15]],[[["error",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["timeerr",3]],["error",4]],null,null,[[],["blockheader",3]],null,[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[["block",3]],["bool",15]],[[["error",4]],["bool",15]],null,null,[[]],[[],["result",4]],null,null,[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],null,[[]],[[]],[[],["electionproof",3]],[[]],[[["electionproof",3]],["ordering",4]],[[["bigint",3]],["i64",15]],[[],["electionproof",3]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[["usize",15]]],[[["electionproof",3]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[],["usize",15]],[[]],null,[[["electionproof",3]],["bool",15]],[[["electionproof",3]],[["option",4,["ordering"]],["ordering",4]]],[[],["result",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[]],null,null,null,null,null,[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],[["electionproof",3],["result",4,["electionproof"]]]],[[],["result",4]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],null,[[["electionproof",3]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[],[["result",4,["option"]],["option",4,["electionproof"]]]],[[["option",4]],["result",4]],null,null,[[]],[[]],[[],["gossipblock",3]],[[]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[]],null,[[],["usize",15]],[[]],null,null,[[],["result",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],[["result",4,["gossipblock"]],["gossipblock",3]]],[[],["result",4]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[["gossipblock",3]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],null,null,[[["vec",3,["beaconentry"]],["beaconentry",3]]],[[]],[[["signature",3],["option",4,["signature"]]]],[[],["option",4]],[[]],[[]],[[]],[[]],[[],[["string",3],["blockheader",3],["result",4,["blockheader","string"]]]],[[],["blockheaderbuilder",3]],[[["address",3]],[["error",4],["result",4,["error"]]]],[[],[["result",4,["cid","encodingerror"]],["cid",3],["encodingerror",3]]],[[],["cid",3]],[[],["blockheaderbuilder",3]],[[],["blockheader",3]],[[]],[[]],[[],["blockheaderbuilder",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[["usize",15]]],[[["usize",15]]],[[["electionproof",3],["option",4,["electionproof"]]]],[[],["option",4]],[[["chainepoch",6]]],[[],["chainepoch",6]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["u64",15]]],[[],["u64",15]],[[]],[[]],[[["blockheaderjson",3]]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[["ticket",3],["bigint",3]],["bool",15]],null,[[],[["vec",3,["u8"]],["encodingerror",3],["result",4,["vec","encodingerror"]]]],[[["cid",3]]],[[],["cid",3]],[[["cid",3]]],[[],["cid",3]],[[["address",3]]],[[],["address",3]],[[["tokenamount",6]]],[[],["bigint",3]],[[["tipsetkeys",3]]],[[],["tipsetkeys",3]],[[],["result",4]],[[["signature",3],["option",4,["signature"]]]],[[],["option",4]],null,[[["cid",3]]],[[],["cid",3]],[[["ticket",3],["option",4,["ticket"]]]],[[],["option",4]],[[["u64",15]]],[[],["u64",15]],[[]],[[]],[[],[["vec",3,["u8"]],["u8",15]]],[[],["option",4]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[["chainepoch",6],["beaconentry",3],["beaconschedule",3]]],[[]],[[]],[[["bigint",3]]],[[],["bigint",3]],[[["postproof",3],["vec",3,["postproof"]]]],[[]],null,null,null,null,[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],[["result",4,["blockheader"]],["blockheader",3]]],[[],["result",4]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[["blockheader",3]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,[[]],[[]],[[],[["result",4,["vec"]],["vec",3,["blockheader"]]]],[[],["result",4]],null,[[]],[[]],[[],["ticket",3]],[[]],[[],["ticket",3]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[["usize",15]]],[[["ticket",3]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[],["usize",15]],[[]],null,[[["ticket",3]],["bool",15]],[[["vrfproof",3]]],[[],["result",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[]],null,null,null,null,[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],[["ticket",3],["result",4,["ticket"]]]],[[],["result",4]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],null,[[["ticket",3]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[],[["result",4,["option"]],["option",4,["ticket"]]]],[[["option",4]],["result",4]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["tipsetkeys",3]],[[],["tipset",3]],[[],["fulltipset",3]],[[]],[[]],[[]],[[],["tipsetkeys",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["chainepoch",6]],[[],["chainepoch",6]],[[["tipsetkeys",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["tipsetkeysjson",3]]],[[]],[[["fulltipset",3]]],[[]],[[],["u64",15]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[],[["vec",3,["blockheader"]],["blockheader",3]]],[[],[["vec",3,["block"]],["block",3]]],[[],["tipset",3]],[[],["tipsetkeys",3]],[[],["tipsetkeys",3]],[[],["usize",15]],[[],[["ticket",3],["option",4,["ticket"]]]],[[],["blockheader",3]],[[],["u64",15]],[[["tipsetkeys",3]],["bool",15]],[[["vec",3,["cid"]],["cid",3]]],[[["vec",3,["blockheader"]],["blockheader",3]],[["error",4],["result",4,["error"]]]],[[["vec",3,["block"]],["block",3]],[["error",4],["result",4,["error"]]]],[[],["cid",3]],[[],["cid",3]],[[],["tipsetkeys",3]],[[],["result",4]],null,null,[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[],["bigint",3]],[[],["bigint",3]],null,null,null,null,[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],[["result",4,["arc"]],["arc",3,["tipset"]]]],[[],["result",4]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[["tipset",3],["arc",3,["tipset"]]]],[[]],[[]],[[["tipset",3]]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[["tipset",3]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],null,null,[[]],[[]],[[],["tipsetkeysjson",3]],[[]],[[["usize",15]]],[[["usize",15]]],[[],[["tipsetkeys",3],["result",4,["tipsetkeys"]]]],[[],["result",4]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[]],[[["tipsetkeys",3]]],[[],["usize",15]],[[]],[[["tipsetkeys",3]],["result",4]],[[],["result",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]]],"p":[[4,"Error"],[3,"TxMeta"],[3,"Block"],[3,"ElectionProof"],[3,"ElectionProofJson"],[3,"ElectionProofJsonRef"],[3,"GossipBlock"],[3,"GossipBlockJson"],[3,"GossipBlockJsonRef"],[3,"BlockHeaderBuilder"],[3,"BlockHeader"],[3,"BlockHeaderJson"],[3,"BlockHeaderJsonRef"],[3,"Ticket"],[3,"TicketJson"],[3,"TicketJsonRef"],[3,"Tipset"],[3,"FullTipset"],[3,"TipsetKeys"],[3,"TipsetJson"],[3,"TipsetJsonRef"],[3,"TipsetKeysJson"]]},\
"forest_car":{"doc":"","t":[3,3,3,13,4,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,5,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11],"n":["Block","CarHeader","CarReader","Cbor","Error","InvalidFile","Io","Other","ParsingError","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","default","deserialize","eq","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","header","into","into","into","into","load_car","ne","new","new","next_block","reader","roots","serialize","source","to_owned","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","version","write_stream_async"],"q":["forest_car","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["IPLD Block","CAR file header","Reads CAR files that are in a BufReader","","Car utility error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Loads a CAR buffer into a BlockStore","","Creates a new CarReader and parses the CarHeader","Creates a new CAR file header","Returns the next IPLD Block in the buffer","","","","","","","","","","","","","","","","","","","","Writes header and stream of data to writer in Car format."],"i":[0,0,0,1,0,1,1,1,1,2,1,3,4,2,1,3,4,4,4,3,3,3,1,1,3,4,2,1,1,1,1,1,3,3,4,2,2,1,3,4,0,3,2,3,2,2,3,3,1,4,1,2,1,3,4,2,1,3,4,2,1,3,4,3,3],"f":[null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["block",3]],[[]],[[],["carheader",3]],[[],["result",4]],[[["carheader",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["error",3]]],[[["error",4]],["error",4]],[[["error",4]],["error",4]],[[["error",3]]],[[]],[[]],[[["cid",3],["vec",3,["cid"]]]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[["carheader",3]],["bool",15]],[[]],[[["u64",15],["cid",3],["vec",3,["cid"]]]],[[]],null,null,[[],["result",4]],[[],[["option",4,["error"]],["error",8]]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,[[]]],"p":[[4,"Error"],[3,"CarReader"],[3,"CarHeader"],[3,"Block"]]},\
"forest_cid":{"doc":"","t":[13,3,4,17,4,17,17,13,13,13,13,13,13,13,6,17,13,3,17,17,13,13,13,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,12,12,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,3,3,11,11,11,11,11,11,5,11,11,11,11,11,11,0,5,11,11,11,11,11,11,11,11,11,0,5,5,12,12,3,3,11,11,11,11,5,11,11,11,11,11,5,11,11,11,11,11,11,11,11],"n":["Blake2b256","Cid","Code","DAG_CBOR","Error","FIL_COMMITMENT_SEALED","FIL_COMMITMENT_UNSEALED","Identity","InputTooShort","InvalidCidV0Base","InvalidCidV0Codec","InvalidCidV0Multihash","InvalidCidVersion","Io","Multihash","POSEIDON_BLS12_381_A1_FC1","ParsingError","Prefix","RAW","SHA2_256_TRUNC254_PADDED","UnknownCodec","V0","V1","VarIntDecodeError","Version","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cmp","codec","codec","default","deserialize","digest","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_str","hash","hash","hash","into","into","into","into","into","is_v0_binary","is_v0_str","json","mh_len","mh_type","multihash_from_digest","ne","ne","new","new_from_bytes","new_from_cbor","new_from_prefix","new_v1","partial_cmp","partial_cmp","read_bytes","serialize","to_bytes","to_bytes","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","version","version","0","0","CidJson","CidJsonRef","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","deserialize","deserialize","fmt","from","from","into","into","opt","serialize","serialize","serialize","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vec","deserialize","serialize","0","0","CidJsonSlice","CidJsonVec","borrow","borrow","borrow_mut","borrow_mut","deserialize","deserialize","from","from","into","into","serialize","serialize","serialize","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["forest_cid","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","forest_cid::json","","","","","","","","","","","","","","","","","","","","","","","","","","","","","forest_cid::json::opt","","forest_cid::json::vec","","","","","","","","","","","","","","","","","","","","","",""],"d":["BLAKE2b-256 (32-byte hash size)","Content identifier for any Ipld data. This Cid consists …","Multihash generation codes for the Filecoin protocol. …","Cbor Cid codec.","Error types","Sealed commitment Cid codec.","Unsealed commitment Cid codec.","Identity multihash (max 32 bytes)","Input data is too short.","Invalid CIDv0 base encoding.","Invalid CIDv0 codec.","Invalid CIDv0 multihash.","Invalid CID version.","Io error.","A Multihash with the same allocated size as the …","Multihash code for Poseidon BLS replica commitments.","Multibase or multihash codec failure","Prefix represents all metadata of a CID, without the …","Raw Cid codec. This represents data that is not encoded …","Multihash code for Sha2 256 trunc254 padded used in data …","Unknown CID codec.","CID version 0.","CID version 1.","Varint decode failure.","The version of the CID.","","","","","","","","","","","","","","","","","","","","","Returns the cid codec.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the cid multihash.","","","","","","","","Check if the version of <code>data</code> bytes is CIDv0.","Check if the version of <code>data</code> string is CIDv0.","","","","","","","Create a new CID.","Generate new prefix from encoded bytes","Constructs a cid with bytes using default version and …","Create a new CID from a prefix and some data.","Create a new CIDv1.","","","Reads the bytes from a byte stream.","","Encodes prefix to bytes","Returns the encoded bytes of the <code>Cid</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the cid version.","","","","Wrapper for serializing and deserializing a Cid from JSON.","Wrapper for serializing a cid reference to JSON.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Wrapper for serializing a cid slice to JSON.","Wrapper for serializing and deserializing a Cid vector …","","","","","","","","","","","","","","","","","","",""],"i":[1,0,0,0,0,0,0,1,2,2,2,2,2,2,0,0,2,0,0,0,2,3,3,2,0,1,4,5,2,3,1,4,5,2,3,1,4,5,3,1,4,5,3,5,3,5,4,5,5,1,1,4,5,3,1,4,5,5,2,2,3,1,1,1,4,4,5,5,2,2,2,2,2,2,3,5,5,5,3,1,4,5,2,3,3,3,0,4,4,1,4,5,5,4,0,0,5,5,3,5,5,4,5,1,4,5,3,5,2,1,1,4,5,5,5,5,5,2,3,3,1,4,5,2,3,1,4,5,2,3,5,4,6,7,0,0,6,7,6,7,6,6,0,6,6,6,7,6,7,0,0,6,7,6,6,7,6,7,6,7,0,0,0,8,9,0,0,8,9,8,9,0,8,8,9,8,9,0,8,9,8,9,8,9,8,9],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["code",4]],[[],["prefix",3]],[[],["cid",3]],[[],["version",4]],[[]],[[]],[[]],[[]],[[["cid",3]],["ordering",4]],[[["version",4]],["ordering",4]],[[],["u64",15]],null,[[],["cid",3]],[[],["result",4]],[[],["multihash",6]],[[["code",4]],["bool",15]],[[["prefix",3]],["bool",15]],[[["cid",3]],["bool",15]],[[["version",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["blake2bdigest",3]]],[[]],[[["identitydigest",3]]],[[["cid",3]]],[[]],[[]],[[["cidjson",3]]],[[["error",4]],["error",4]],[[["error",3]],["error",4]],[[["error",4]],["error",4]],[[["readerror",4]],["error",4]],[[["error",4]],["error",4]],[[]],[[]],[[["str",15]],[["result",4,["error"]],["error",4]]],[[],["multihash",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[["str",15]],["bool",15]],null,null,null,[[],["multihash",6]],[[["prefix",3]],["bool",15]],[[["cid",3]],["bool",15]],[[["u64",15],["version",4],["multihash",6]],[["result",4,["error"]],["error",4]]],[[],[["prefix",3],["error",4],["result",4,["prefix","error"]]]],[[["code",4]],["cid",3]],[[["prefix",3]],[["result",4,["cid","error"]],["cid",3],["error",4]]],[[["u64",15],["multihash",6]]],[[["cid",3]],[["option",4,["ordering"]],["ordering",4]]],[[["version",4]],[["option",4,["ordering"]],["ordering",4]]],[[["read",8]],[["result",4,["error"]],["error",4]]],[[],["result",4]],[[],[["vec",3,["u8"]],["u8",15]]],[[],[["vec",3,["u8"]],["u8",15]]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[["u64",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[["string",3]],["result",4]],[[],["result",4]],[[["vec",3,["u8"]],["u8",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["u64",15]],[["error",4],["version",4],["result",4,["version","error"]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["version",4]],null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["cidjson",3]],[[]],[[],[["result",4,["cid"]],["cid",3]]],[[],["result",4]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],null,[[["cid",3]],["result",4]],[[],["result",4]],[[],["result",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,[[],[["option",4,["cid"]],["result",4,["option"]]]],[[["option",4]],["result",4]],null,null,null,null,[[]],[[]],[[]],[[]],[[],[["vec",3,["cid"]],["result",4,["vec"]]]],[[],["result",4]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[4,"Code"],[4,"Error"],[4,"Version"],[3,"Prefix"],[3,"Cid"],[3,"CidJson"],[3,"CidJsonRef"],[3,"CidJsonVec"],[3,"CidJsonSlice"]]},\
"forest_crypto":{"doc":"","t":[4,13,4,13,13,13,13,13,13,8,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,0,11,11,11,11,11,11,11,11,11,0,11,11,13,17,17,17,17,13,3,4,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,12,12,3,3,11,11,11,11,5,11,11,11,11,11,0,5,11,11,0,11,11,11,11,11,11,11,11,5,5,12,3,11,11,5,11,11,11,11,5,11,11,11,11,11,12,3,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,5,11,5,5],"n":["DomainSeparationTag","ElectionProofProduction","Error","InteractiveSealChallengeSeed","InvalidPubKey","InvalidRecovery","MarketDealCronSeed","PoStChainCommit","SealRandomness","Signer","SigningError","TicketProduction","WindowPoStDeadlineAssignment","WindowedPoStChallengeSeed","WinningPoStChallengeSeed","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","deserialize","eq","eq","fmt","fmt","fmt","from","from","from","from","from","from","from_i64","from_u64","hash","into","into","ne","sign_bytes","signature","source","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","vrf","vzip","vzip","BLS","BLS_PUB_LEN","BLS_SIG_LEN","SECP_PUB_LEN","SECP_SIG_LEN","Secp256k1","Signature","SignatureType","borrow","borrow","borrow_mut","borrow_mut","bytes","clone","clone","clone_into","clone_into","deserialize","deserialize","ecrecover","eq","eq","fmt","fmt","from","from","from_i64","from_u64","hash","hash","into","into","json","ne","new_bls","new_secp256k1","serialize","serialize","signature_type","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","verify","verify_bls_aggregate","vzip","vzip","0","0","SignatureJson","SignatureJsonRef","borrow","borrow","borrow_mut","borrow_mut","deserialize","deserialize","from","from","into","into","opt","serialize","serialize","serialize","signature_type","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","deserialize","serialize","0","SignatureTypeJson","borrow","borrow_mut","deserialize","deserialize","fmt","from","into","serialize","serialize","try_from","try_into","type_id","vzip","0","VRFProof","as_bytes","borrow","borrow_mut","clone","clone_into","cmp","default","deserialize","digest","eq","fmt","from","into","json","ne","new","partial_cmp","serialize","to_owned","try_from","try_into","type_id","verify_vrf","vzip","deserialize","serialize"],"q":["forest_crypto","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","forest_crypto::signature","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","forest_crypto::signature::json","","","","","","","","","","","","","","","","","","","","","","","","","","","forest_crypto::signature::json::opt","","forest_crypto::signature::json::signature_type","","","","","","","","","","","","","","","forest_crypto::vrf","","","","","","","","","","","","","","","","","","","","","","","","","","forest_crypto::vrf::json",""],"d":["Specifies a domain for randomness generation.","","Crypto error","","Provided public key is not understood","Unable to perform ecrecover with the given params","","","","Signer is a trait which allows a key implementation to …","Failed to produce a signature","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Function signs any arbitrary data given the Address.","","","","","","","","","","","","","","","BLS Public key length in bytes.","BLS signature length in bytes.","Secp256k1 Public key length in bytes.","Secp256k1 signature length in bytes.","","A cryptographic signature, represented in bytes, of any …","Signature variants for Filecoin signatures.","","","","","Returns reference to signature bytes.","","","","","","","Return Address for a message given it’s signing bytes …","","","","","","","","","","","","","","","Creates a BLS Signature given the raw bytes.","Creates a SECP Signature given the raw bytes.","","","Returns SignatureType for the signature.","","","","","","","","","Checks if a signature is valid given data and address.","Aggregates and verifies bls signatures collectively.","","","","","","Wrapper for serializing a Signature reference to JSON.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The output from running a VRF proof.","Returns reference to underlying proof bytes.","","","","","","","","Compute the blake2b256 digest of the proof.","","","","","","","Creates a VRFProof from a raw vector.","","","","","","","Verifies raw VRF proof. This VRF proof is a BLS signature.","","",""],"i":[0,1,0,1,2,2,1,1,1,0,2,1,1,1,1,2,1,2,1,1,1,1,2,1,2,2,1,2,2,2,2,2,1,1,1,1,2,1,2,3,0,2,1,2,2,1,2,1,2,1,0,2,1,4,0,0,0,0,4,0,0,4,5,4,5,5,4,5,4,5,4,5,0,4,5,4,5,4,5,4,4,4,5,4,5,0,5,5,5,4,5,5,4,5,4,5,4,5,4,5,5,0,4,5,6,7,0,0,6,7,6,7,0,6,6,7,6,7,0,0,6,7,0,6,7,6,7,6,7,6,7,0,0,8,0,8,8,0,8,8,8,8,0,8,8,8,8,8,9,0,9,9,9,9,9,9,9,9,9,9,9,9,9,0,9,9,9,9,9,9,9,9,0,9,0,0],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["domainseparationtag",4]],[[]],[[],["result",4]],[[["error",4]],["bool",15]],[[["domainseparationtag",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["secperror",4]],["error",4]],[[["addresserror",4]]],[[["box",3,["error"]],["error",8]],["error",4]],[[["encodingerror",3]],["error",4]],[[]],[[]],[[["i64",15]],["option",4]],[[["u64",15]],["option",4]],[[]],[[]],[[]],[[["error",4]],["bool",15]],[[["address",3]],[["result",4,["signature","box"]],["box",3,["error"]],["signature",3]]],null,[[],[["option",4,["error"]],["error",8]]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,[[]],[[]],null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[],["signaturetype",4]],[[],["signature",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],[["result",4,["address","error"]],["address",3],["error",4]]],[[["signaturetype",4]],["bool",15]],[[["signature",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["i64",15]],["option",4]],[[["u64",15]],["option",4]],[[]],[[]],[[]],[[]],null,[[["signature",3]],["bool",15]],[[["vec",3,["u8"]],["u8",15]]],[[["vec",3,["u8"]],["u8",15]]],[[],["result",4]],[[],["result",4]],[[],["signaturetype",4]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[["address",3]],[["result",4,["string"]],["string",3]]],[[["signature",3]],["bool",15]],[[]],[[]],null,null,null,null,[[]],[[]],[[]],[[]],[[],[["result",4,["signature"]],["signature",3]]],[[],["result",4]],[[]],[[]],[[]],[[]],null,[[["signature",3]],["result",4]],[[],["result",4]],[[],["result",4]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[],[["option",4,["signature"]],["result",4,["option"]]]],[[["option",4]],["result",4]],null,null,[[]],[[]],[[],[["signaturetype",4],["result",4,["signaturetype"]]]],[[],["result",4]],[[["formatter",3]],["result",6]],[[]],[[]],[[["signaturetype",4]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,[[]],[[]],[[]],[[],["vrfproof",3]],[[]],[[["vrfproof",3]],["ordering",4]],[[],["vrfproof",3]],[[],["result",4]],[[]],[[["vrfproof",3]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[]],null,[[["vrfproof",3]],["bool",15]],[[["vec",3,["u8"]],["u8",15]]],[[["vrfproof",3]],[["option",4,["ordering"]],["ordering",4]]],[[],["result",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["address",3]],[["result",4,["string"]],["string",3]]],[[]],[[],[["vrfproof",3],["result",4,["vrfproof"]]]],[[["vrfproof",3]],["result",4]]],"p":[[4,"DomainSeparationTag"],[4,"Error"],[8,"Signer"],[4,"SignatureType"],[3,"Signature"],[3,"SignatureJson"],[3,"SignatureJsonRef"],[3,"SignatureTypeJson"],[3,"VRFProof"]]},\
"forest_db":{"doc":"","t":[13,13,4,13,3,13,8,13,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,10,11,0,11,11,11,11,11,11,11,11,11,10,11,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Database","Encoding","Error","InvalidBulkLen","MemoryDB","Other","Store","Unopened","borrow","borrow","borrow_mut","borrow_mut","bulk_delete","bulk_read","bulk_write","clone","clone_into","default","delete","delete","eq","exists","exists","fmt","fmt","fmt","from","from","from","from","into","into","read","read","rocks","source","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","write","write","DB","Options","RocksDb","WriteBatch","add_comparator","add_merge_operator","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bulk_write","cf_handle","clear","clone","clone_into","compact_range","compact_range_cf","compact_range_cf_opt","compact_range_opt","create_cf","create_if_missing","create_missing_column_families","db","default","default","delete","delete","delete","delete_cf","delete_cf","delete_cf_opt","delete_file_in_range","delete_file_in_range_cf","delete_opt","delete_range","delete_range_cf","delete_range_cf","delete_range_cf_opt","destroy","drop","drop","drop","drop_cf","enable_statistics","exists","flush","flush_cf","flush_cf_opt","flush_opt","fmt","fmt","from","from","from","from","full_iterator","full_iterator_cf","get","get_cf","get_cf_opt","get_opt","get_pinned","get_pinned_cf","get_pinned_cf_opt","get_pinned_opt","get_statistics","get_updates_since","increase_parallelism","ingest_external_file","ingest_external_file_cf","ingest_external_file_cf_opts","ingest_external_file_opts","into","into","into","into","is_empty","iterate","iterator","iterator_cf","iterator_cf_opt","iterator_opt","latest_sequence_number","len","list_cf","live_files","merge","merge","merge_cf","merge_cf","merge_cf_opt","merge_opt","open","open","open_as_secondary","open_cf","open_cf_as_secondary","open_cf_descriptors","open_cf_for_read_only","open_default","open_for_read_only","open_with_ttl","optimize_for_point_lookup","optimize_level_style_compaction","optimize_universal_style_compaction","path","prefix_iterator","prefix_iterator_cf","prepare_for_bulk_load","property_int_value","property_int_value_cf","property_value","property_value_cf","put","put","put_cf","put_cf","put_cf_opt","put_opt","raw_iterator","raw_iterator_cf","raw_iterator_cf_opt","raw_iterator_opt","read","repair","set_access_hint_on_compaction_start","set_advise_random_on_open","set_allow_concurrent_memtable_write","set_allow_mmap_reads","set_allow_mmap_writes","set_allow_os_buffer","set_arena_block_size","set_atomic_flush","set_block_based_table_factory","set_bloom_locality","set_bytes_per_sync","set_compaction_filter","set_compaction_filter_factory","set_compaction_readahead_size","set_compaction_style","set_comparator","set_compression_options","set_compression_per_level","set_compression_type","set_db_log_dir","set_db_paths","set_db_write_buffer_size","set_delete_obsolete_files_period_micros","set_disable_auto_compactions","set_dump_malloc_stats","set_enable_pipelined_write","set_enable_write_thread_adaptive_yield","set_env","set_error_if_exists","set_fifo_compaction_options","set_hard_pending_compaction_bytes_limit","set_hard_rate_limit","set_inplace_update_locks","set_inplace_update_support","set_is_fd_close_on_exec","set_keep_log_file_num","set_level_compaction_dynamic_level_bytes","set_level_zero_file_num_compaction_trigger","set_level_zero_slowdown_writes_trigger","set_level_zero_stop_writes_trigger","set_log_file_time_to_roll","set_manifest_preallocation_size","set_max_background_compactions","set_max_background_flushes","set_max_background_jobs","set_max_bytes_for_level_base","set_max_bytes_for_level_multiplier","set_max_bytes_for_level_multiplier_additional","set_max_compaction_bytes","set_max_file_opening_threads","set_max_log_file_size","set_max_manifest_file_size","set_max_open_files","set_max_sequential_skip_in_iterations","set_max_subcompactions","set_max_successive_merges","set_max_total_wal_size","set_max_write_buffer_number","set_max_write_buffer_size_to_maintain","set_memtable_factory","set_memtable_huge_page_size","set_memtable_prefix_bloom_ratio","set_memtable_whole_key_filtering","set_merge_operator","set_min_level_to_compress","set_min_write_buffer_number","set_min_write_buffer_number_to_merge","set_num_levels","set_optimize_filters_for_hits","set_options","set_paranoid_checks","set_plain_table_factory","set_prefix_extractor","set_purge_redundant_kvs_while_flush","set_rate_limit_delay_max_milliseconds","set_ratelimiter","set_recycle_log_file_num","set_report_bg_io_stats","set_row_cache","set_skip_checking_sst_file_sizes_on_db_open","set_skip_log_error_on_recovery","set_skip_stats_update_on_db_open","set_soft_pending_compaction_bytes_limit","set_soft_rate_limit","set_stats_dump_period_sec","set_table_cache_num_shard_bits","set_target_file_size_base","set_target_file_size_multiplier","set_universal_compaction_options","set_unordered_write","set_use_adaptive_mutex","set_use_direct_io_for_flush_and_compaction","set_use_direct_reads","set_use_fsync","set_wal_bytes_per_sync","set_wal_dir","set_wal_recovery_mode","set_wal_size_limit_mb","set_wal_ttl_seconds","set_writable_file_max_buffer_size","set_write_buffer_size","size_in_bytes","snapshot","to_owned","try_catch_up_with_primary","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","write","write","write_opt","write_without_wal"],"q":["forest_db","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","forest_db::rocksd":["","","Database error","","A thread-safe <code>HashMap</code> wrapper.","","Store interface used as a KV store implementation","","","","","","Bulk delete keys from the data store.","Read slice of keys and return a vector of optional values.","Write slice of KV pairs.","","","","Delete value at key.","","","Returns <code>Ok(true)</code> if key exists in store","","","","","","","","","","","Read single value from data store and return <code>None</code> if key …","","","","","","","","","","","","Write a single value to the data store.","","A RocksDB database.","Database-wide options around performance and behavior.","RocksDB instance this satisfies the Store interface.","An atomic batch of write operations.","","","","","","","","","","","","Return the underlying column family handle.","Clear all updates buffered in this batch.","","","Runs a manual compaction on the Range of keys given. This …","Runs a manual compaction on the Range of keys given on the…","Same as <code>compact_range_cf</code> but with custom options.","Same as <code>compact_range</code> but with custom options.","","If true, the database will be created if it is missing.","If true, any column families that didn’t exist when …","","","","","","Removes the database entry for key. Does nothing if the …","","","","Delete sst files whose keys are entirely in the given …","Same as <code>delete_file_in_range</code> but only for specific column …","","Remove database entries from start key to end key.","Removes the database entries in the range <code>[\\\"from\\\", \\\"to\\\")</code> …","Remove database entries in column family from start key …","Removes the database entries in the range <code>[\\\"from\\\", \\\"to\\\")</code> …","","","","","","","","Flushes database memtables to SST files on the disk using …","Flushes database memtables to SST files on the disk for a …","Flushes database memtables to SST files on the disk for a …","Flushes database memtables to SST files on the disk.","","","","","","","Opens an iterator with <code>set_total_order_seek</code> enabled. This …","","Return the bytes associated with a key value. If you only …","Return the bytes associated with a key value and the …","Return the bytes associated with a key value and the …","Return the bytes associated with a key value with read …","Return the value associated with a key using RocksDB’s …","Return the value associated with a key using RocksDB’s …","Return the value associated with a key using RocksDB’s …","Return the value associated with a key using RocksDB’s …","","Iterate over batches of write operations since a given …","By default, RocksDB uses only one background thread for …","Loads a list of external SST files created with …","Loads a list of external SST files created with …","Loads a list of external SST files created with …","Loads a list of external SST files created with …","","","","","","Iterate the put and delete operations within this write …","","","Opens an iterator using the provided ReadOptions. This is …","","The sequence number of the most recent transaction.","","","Returns a list of all table files with their level, start …","","","","","","","","Opens the database with the specified options.","Opens the database as a secondary.","Opens a database with the given database options and …","Opens the database as a secondary with the given database …","Opens a database with the given database options and …","Opens a database for read only with the given database …","Opens a database with default options.","Opens the database for read only with the specified …","Opens the database with a Time to Live compaction filter.","","Optimize level style compaction.","Optimize universal style compaction.","","","","Prepare the DB for bulk loading.","Retrieves a RocksDB property and casts it to an integer.","Retrieves a RocksDB property for a specific column family …","Retrieves a RocksDB property by name.","Retrieves a RocksDB property by name, for a specific …","","Insert a value into the database under the given key.","","","","","Opens a raw iterator over the database, using the default …","Opens a raw iterator over the given column family, using …","Opens a raw iterator over the given column family, using …","Opens a raw iterator over the database, using the given …","","","Specifies the file access pattern once a compaction is …","When set to true, reading SST files will opt out of the …","If true, allow multi-writers to update mem tables in …","Allow the OS to mmap file for reading sst tables.","Allow the OS to mmap file for writing.","Hints to the OS that it should not buffer disk I/O. …","Sets the size of one block in arena memory allocation.","Guarantee that all column families are flushed together …","","Control locality of bloom filter probes to improve cache …","Allows OS to incrementally sync files to disk while they …","Sets a compaction filter used to determine if entries …","This is a factory that provides compaction filter objects …","If non-zero, we perform bigger reads when doing …","Sets the compaction style.","Sets the comparator used to define the order of keys in …","Maximum size of dictionaries used to prime the …","Different levels can have different compression policies. …","Sets the compression algorithm that will be used for …","Specifies the absolute info LOG dir.","A list of paths where SST files can be put into, with its …","Amount of data to build up in memtables across all column …","Sets the periodicity when obsolete files get deleted.","Disables automatic compactions. Manual compactions can …","If true, then print malloc stats together with …","By default, a single write thread queue is maintained. …","If true, threads synchronizing with the write batch group …","Use the specified object to interact with the environment,…","Specifies whether an error should be raised if the …","Sets the options for FIFO compaction style.","Sets the bytes threshold at which all writes are stopped …","Sets the hard rate limit.","Sets the number of locks used for inplace update.","Enable/disable thread-safe inplace updates.","Enable/dsiable child process inherit open files.","Specify the maximal number of info log files to be kept.","Allow RocksDB to pick dynamic base of bytes for levels. …","Sets the number of files to trigger level-0 compaction. A …","Sets the soft limit on number of level-0 files. We start …","Sets the maximum number of level-0 files.  We stop writes …","Sets the time for the info log file to roll (in seconds).","Sets the number of bytes to preallocate (via fallocate) …","Sets the maximum number of concurrent background …","Sets the maximum number of concurrent background memtable …","Sets maximum number of concurrent background jobs …","Control maximum total data size for a level. …","Default: <code>10</code>","Different max-size multipliers for different levels. …","Sets the maximum number of bytes in all compacted files. …","If max_open_files is -1, DB will open all files on …","Sets the maximal size of the info log file.","The manifest file is rolled over on reaching this limit. …","Sets the number of open files that can be used by the DB. …","Specifies whether an iteration->Next() sequentially skips …","Sets maximum number of threads that will concurrently …","Sets the maximum number of successive merge operations on …","Once write-ahead logs exceed this size, we will start …","Sets the maximum number of write buffers that are built …","The total maximum size(bytes) of write buffers to …","Defines the underlying memtable implementation. See …","SetMemtableHugePageSize sets the page size for huge page …","When a <code>prefix_extractor</code> is defined through …","Enable whole key bloom filter in memtable. Note this will …","","Sets the start level to use compression.","Sets the minimum number of write buffers that will be …","Sets the minimum number of write buffers that will be …","Sets the number of levels for this database.","Sets the optimize_filters_for_hits flag","","Enable/disable paranoid checks.","Sets the factory as plain table. See official wiki for …","","Enable/disable purging of duplicate/deleted keys when a …","Sets the max time a put will be stalled when …","Use to control write rate of flush and compaction. Flush …","Controls the recycling of log files.","Measure IO stats in compactions and flushes, if <code>true</code>.","Sets global cache for table-level rows. Cache must …","If true, then DB::Open() will not fetch and check sizes …","Enable/disable skipping of log corruption error on …","If true, then DB::Open() will not update the statistics …","Sets the threshold at which all writes will be slowed …","Sets the soft rate limit.","If not zero, dump <code>rocksdb.stats</code> to LOG every …","Sets the number of shards used for table cache.","Sets the target file size for compaction. …","By default target_file_size_multiplier is 1, which means …","Sets the options needed to support Universal Style …","Sets unordered_write to true trades higher write …","Enable/disable adaptive mutex, which spins in the user …","Enable direct I/O mode for flush and compaction","Enable direct I/O mode for reading they may or may not …","If true, then every store to stable storage will issue a …","Same as bytes_per_sync, but applies to WAL files.","Specifies the absolute path of the directory the …","Recovery mode to control the consistency while replaying …","Sets the WAL size limit in MB.","Sets the WAL ttl in seconds.","Sets the maximum buffer size that is used by …","Sets the amount of data to build up in memory (backed by …","Return WriteBatch serialized size (in bytes).","","","Tries to catch up with the primary by reading as much as …","","","","","","","","","","","","","","","",""],"i":[1,1,0,1,0,1,0,1,1,2,1,2,3,3,3,2,2,2,3,2,1,3,2,1,1,2,1,1,1,2,1,2,3,2,0,1,2,1,1,2,1,2,1,2,3,2,0,0,0,0,4,4,5,6,4,7,5,6,4,7,5,6,7,4,4,6,6,6,6,6,4,4,5,4,7,5,6,7,6,7,6,6,6,6,7,6,7,6,6,6,4,7,6,4,5,6,6,6,6,5,6,5,6,4,7,6,6,6,6,6,6,6,6,6,6,4,6,4,6,6,6,6,5,6,4,7,7,7,6,6,6,6,6,7,6,6,6,7,6,7,6,6,5,6,6,6,6,6,6,6,6,6,4,4,4,6,6,6,4,6,6,6,6,6,7,6,7,6,6,6,6,6,6,5,6,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,6,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,7,6,4,6,5,6,4,7,5,6,4,7,5,6,4,7,5,6,6,6],"f":[null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],[["error",4],["result",4,["error"]]]],[[],[["result",4,["vec","error"]],["vec",3,["option"]],["error",4]]],[[],[["error",4],["result",4,["error"]]]],[[]],[[]],[[],["memorydb",3]],[[],[["error",4],["result",4,["error"]]]],[[],[["error",4],["result",4,["error"]]]],[[],["bool",15]],[[],[["result",4,["bool","error"]],["error",4],["bool",15]]],[[],[["result",4,["bool","error"]],["error",4],["bool",15]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["cborerror",3]]],[[["error",3]]],[[]],[[]],[[]],[[],[["result",4,["option","error"]],["error",4],["option",4,["vec"]]]],[[],[["result",4,["option","error"]],["error",4],["option",4,["vec"]]]],null,[[],[["error",8],["option",4,["error"]]]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],[["error",4],["result",4,["error"]]]],[[],[["error",4],["result",4,["error"]]]],null,null,null,null,[[["str",15]]],[[["str",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["error",4],["result",4,["error"]]]],[[["str",15]],[["columnfamily",3],["option",4,["columnfamily"]]]],[[]],[[],["options",3]],[[]],[[["option",4],["option",4]]],[[["columnfamily",3],["option",4],["option",4]]],[[["compactoptions",3],["columnfamily",3],["option",4],["option",4]]],[[["compactoptions",3],["option",4],["option",4]]],[[["options",3]],[["error",3],["result",4,["error"]]]],[[["bool",15]]],[[["bool",15]]],null,[[],["options",3]],[[],["writebatch",3]],[[],[["error",4],["result",4,["error"]]]],[[],[["error",3],["result",4,["error"]]]],[[]],[[["columnfamily",3]],[["error",3],["result",4,["error"]]]],[[["columnfamily",3]]],[[["columnfamily",3],["writeoptions",3]],[["error",3],["result",4,["error"]]]],[[],[["error",3],["result",4,["error"]]]],[[["columnfamily",3]],[["error",3],["result",4,["error"]]]],[[["writeoptions",3]],[["error",3],["result",4,["error"]]]],[[]],[[["columnfamily",3]],[["error",3],["result",4,["error"]]]],[[["columnfamily",3]]],[[["columnfamily",3],["writeoptions",3]],[["error",3],["result",4,["error"]]]],[[["options",3]],[["error",3],["result",4,["error"]]]],[[]],[[]],[[]],[[["str",15]],[["error",3],["result",4,["error"]]]],[[]],[[],[["result",4,["bool","error"]],["error",4],["bool",15]]],[[],[["error",3],["result",4,["error"]]]],[[["columnfamily",3]],[["error",3],["result",4,["error"]]]],[[["columnfamily",3],["flushoptions",3]],[["error",3],["result",4,["error"]]]],[[["flushoptions",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[]],[[]],[[]],[[]],[[["iteratormode",4]],["dbiterator",3]],[[["iteratormode",4],["columnfamily",3]],["dbiterator",3]],[[],[["option",4,["vec"]],["error",3],["result",4,["option","error"]]]],[[["columnfamily",3]],[["option",4,["vec"]],["error",3],["result",4,["option","error"]]]],[[["columnfamily",3],["readoptions",3]],[["option",4,["vec"]],["error",3],["result",4,["option","error"]]]],[[["readoptions",3]],[["option",4,["vec"]],["error",3],["result",4,["option","error"]]]],[[],[["result",4,["option","error"]],["option",4,["dbpinnableslice"]],["error",3]]],[[["columnfamily",3]],[["result",4,["option","error"]],["option",4,["dbpinnableslice"]],["error",3]]],[[["columnfamily",3],["readoptions",3]],[["result",4,["option","error"]],["option",4,["dbpinnableslice"]],["error",3]]],[[["readoptions",3]],[["result",4,["option","error"]],["option",4,["dbpinnableslice"]],["error",3]]],[[],[["string",3],["option",4,["string"]]]],[[["u64",15]],[["dbwaliterator",3],["result",4,["dbwaliterator","error"]],["error",3]]],[[["i32",15]]],[[["vec",3,["global"]],["global",3]],[["error",3],["result",4,["error"]]]],[[["columnfamily",3],["vec",3,["global"]],["global",3]],[["error",3],["result",4,["error"]]]],[[["columnfamily",3],["ingestexternalfileoptions",3],["vec",3,["global"]],["global",3]],[["error",3],["result",4,["error"]]]],[[["ingestexternalfileoptions",3],["vec",3,["global"]],["global",3]],[["error",3],["result",4,["error"]]]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[["writebatchiterator",8]]],[[["iteratormode",4]],["dbiterator",3]],[[["iteratormode",4],["columnfamily",3]],["dbiterator",3]],[[["readoptions",3],["columnfamily",3],["iteratormode",4]],["dbiterator",3]],[[["iteratormode",4],["readoptions",3]],["dbiterator",3]],[[],["u64",15]],[[],["usize",15]],[[["options",3]],[["error",3],["result",4,["vec","error"]],["vec",3,["string","global"]]]],[[],[["error",3],["result",4,["vec","error"]],["vec",3,["livefile","global"]]]],[[],[["error",3],["result",4,["error"]]]],[[]],[[["columnfamily",3]],[["error",3],["result",4,["error"]]]],[[["columnfamily",3]]],[[["columnfamily",3],["writeoptions",3]],[["error",3],["result",4,["error"]]]],[[["writeoptions",3]],[["error",3],["result",4,["error"]]]],[[],[["result",4,["error"]],["error",4]]],[[["options",3]],[["error",3],["result",4,["db","error"]],["db",3]]],[[["options",3]],[["error",3],["result",4,["db","error"]],["db",3]]],[[["options",3]],[["error",3],["result",4,["db","error"]],["db",3]]],[[["options",3]],[["error",3],["result",4,["db","error"]],["db",3]]],[[["options",3]],[["error",3],["result",4,["db","error"]],["db",3]]],[[["options",3],["bool",15]],[["error",3],["result",4,["db","error"]],["db",3]]],[[],[["error",3],["result",4,["db","error"]],["db",3]]],[[["options",3],["bool",15]],[["error",3],["result",4,["db","error"]],["db",3]]],[[["options",3],["duration",3]],[["error",3],["result",4,["db","error"]],["db",3]]],[[["u64",15]]],[[["usize",15]]],[[["usize",15]]],[[],["path",3]],[[],["dbiterator",3]],[[["columnfamily",3]],["dbiterator",3]],[[]],[[["str",15]],[["result",4,["option","error"]],["option",4,["u64"]],["error",3]]],[[["columnfamily",3],["str",15]],[["result",4,["option","error"]],["option",4,["u64"]],["error",3]]],[[["str",15]],[["option",4,["string"]],["error",3],["result",4,["option","error"]]]],[[["columnfamily",3],["str",15]],[["option",4,["string"]],["error",3],["result",4,["option","error"]]]],[[],[["error",3],["result",4,["error"]]]],[[]],[[["columnfamily",3]],[["error",3],["result",4,["error"]]]],[[["columnfamily",3]]],[[["columnfamily",3],["writeoptions",3]],[["error",3],["result",4,["error"]]]],[[["writeoptions",3]],[["error",3],["result",4,["error"]]]],[[],["dbrawiterator",3]],[[["columnfamily",3]],["dbrawiterator",3]],[[["readoptions",3],["columnfamily",3]],["dbrawiterator",3]],[[["readoptions",3]],["dbrawiterator",3]],[[],[["result",4,["option","error"]],["error",4],["option",4,["vec"]]]],[[["options",3]],[["error",3],["result",4,["error"]]]],[[["accesshint",4]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["usize",15]]],[[["bool",15]]],[[["blockbasedoptions",3]]],[[["u32",15]]],[[["u64",15]]],[[["str",15]]],[[]],[[["usize",15]]],[[["dbcompactionstyle",4]]],[[["str",15]]],[[["i32",15]]],[[]],[[["dbcompressiontype",4]]],[[]],[[]],[[["usize",15]]],[[["u64",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["env",3]]],[[["bool",15]]],[[["fifocompactoptions",3]]],[[["usize",15]]],[[["f64",15]]],[[["usize",15]]],[[["bool",15]]],[[["bool",15]]],[[["usize",15]]],[[["bool",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["usize",15]]],[[["usize",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["u64",15]]],[[["f64",15]]],[[]],[[["u64",15]]],[[["i32",15]]],[[["usize",15]]],[[["usize",15]]],[[["i32",15]]],[[["u64",15]]],[[["u32",15]]],[[["usize",15]]],[[["u64",15]]],[[["i32",15]]],[[["i64",15]]],[[["memtablefactory",4]]],[[["usize",15]]],[[["f64",15]]],[[["bool",15]]],[[["str",15],["option",4]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["bool",15]]],[[],[["error",3],["result",4,["error"]]]],[[["bool",15]]],[[["plaintablefactoryoptions",3]]],[[["slicetransform",3]]],[[["bool",15]]],[[["u32",15]]],[[["i32",15],["i64",15]]],[[["usize",15]]],[[["bool",15]]],[[["cache",3]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["usize",15]]],[[["f64",15]]],[[["u32",15]]],[[["i32",15]]],[[["u64",15]]],[[["i32",15]]],[[["universalcompactoptions",3]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["u64",15]]],[[]],[[["dbrecoverymode",4]]],[[["u64",15]]],[[["u64",15]]],[[["u64",15]]],[[["usize",15]]],[[],["usize",15]],[[],["snapshot",3]],[[]],[[],[["error",3],["result",4,["error"]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],[["error",4],["result",4,["error"]]]],[[["writebatch",3]],[["error",3],["result",4,["error"]]]],[[["writeoptions",3],["writebatch",3]],[["error",3],["result",4,["error"]]]],[[["writebatch",3]],[["error",3],["result",4,["error"]]]]],"p":[[4,"Error"],[3,"MemoryDB"],[8,"Store"],[3,"Options"],[3,"RocksDb"],[3,"DB"],[3,"WriteBatch"]]},\
"forest_encoding":{"doc":"","t":[12,12,12,3,3,3,8,13,4,3,5,5,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,0,12,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,12,0,0,11,11,11,0,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,13,13,13,8,8,8,8,16,13,8,8,16,16,16,16,16,8,13,3,8,13,8,13,13,13,13,13,8,13,8,13,13,13,4,13,13,13,16,16,16,8,8,11,11,11,11,11,11,11,11,11,11,10,11,11,10,10,11,10,10,10,10,10,10,10,10,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,10,10,10,10,10,10,11,11,10,11,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,10,11,10,11,11,11,10,11,10,11,11,11,10,11,11,11,11,11,11,11,10,11,11,10,11,11,0,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,4,13,13,3,13,6,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,24,24,8,16,16,16,16,16,16,16,16,3,16,16,16,16,16,16,16,16,8,8,16,8,16,8,16,8,16,8,16,8,16,8,16,8,8,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,10,10,10,11,11,11,10,10,10,10,10,10,11,11,11,11,11,10,10,10,10,10,11,10,10,10,10,10,10,10,10,10,10,10,10,11,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,3,11,11,5,11,11,11,11,11,12,11,11,11,12,24,24],"n":["0","0","0","Byte32De","BytesDe","BytesSer","Cbor","Cbor","CodecProtocol","Error","blake2b_256","blake2b_variable","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bytes_32","cid","cid","clone","clone_into","de","description","deserialize","deserialize","eq","eq","eq","error","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_reader","from_slice","into","into","into","into","into","marshal_cbor","marshal_cbor","ne","ne","protocol","repr","ser","serialize","serialize","serialize","tags","to_owned","to_string","to_string","to_vec","to_writer","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","tuple","type_id","type_id","type_id","type_id","type_id","unmarshal_cbor","unmarshal_cbor","Bool","Bytes","Char","Deserialize","DeserializeOwned","DeserializeSeed","Deserializer","Deserializer","Enum","EnumAccess","Error","Error","Error","Error","Error","Error","Expected","Float","IgnoredAny","IntoDeserializer","Map","MapAccess","NewtypeStruct","NewtypeVariant","Option","Other","Seq","SeqAccess","Signed","StdError","Str","StructVariant","TupleVariant","Unexpected","Unit","UnitVariant","Unsigned","Value","Value","Variant","VariantAccess","Visitor","backtrace","borrow","borrow","borrow_mut","borrow_mut","cause","clone","clone","clone_into","clone_into","custom","default","description","deserialize","deserialize","deserialize","deserialize_any","deserialize_bool","deserialize_byte_buf","deserialize_bytes","deserialize_char","deserialize_enum","deserialize_f32","deserialize_f64","deserialize_i128","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i8","deserialize_identifier","deserialize_ignored_any","deserialize_map","deserialize_newtype_struct","deserialize_option","deserialize_seq","deserialize_str","deserialize_string","deserialize_struct","deserialize_tuple","deserialize_tuple_struct","deserialize_u128","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u8","deserialize_unit","deserialize_unit_struct","duplicate_field","eq","expecting","expecting","fmt","fmt","fmt","fmt","fmt","fmt","from","from","into","into","into_deserializer","invalid_length","invalid_type","invalid_value","is_human_readable","missing_field","ne","newtype_variant","newtype_variant_seed","next_element","next_element_seed","next_entry","next_entry_seed","next_key","next_key_seed","next_value","next_value_seed","size_hint","size_hint","source","struct_variant","to_owned","to_owned","to_string","try_from","try_from","try_into","try_into","tuple_variant","type_id","type_id","unit_variant","unknown_field","unknown_variant","value","variant","variant_seed","visit_bool","visit_bool","visit_borrowed_bytes","visit_borrowed_str","visit_byte_buf","visit_bytes","visit_bytes","visit_char","visit_enum","visit_enum","visit_f32","visit_f64","visit_f64","visit_i128","visit_i128","visit_i16","visit_i32","visit_i64","visit_i64","visit_i8","visit_map","visit_map","visit_newtype_struct","visit_newtype_struct","visit_none","visit_none","visit_seq","visit_seq","visit_some","visit_some","visit_str","visit_str","visit_string","visit_u128","visit_u128","visit_u16","visit_u32","visit_u64","visit_u64","visit_u8","visit_unit","visit_unit","BoolDeserializer","BorrowedBytesDeserializer","BorrowedStrDeserializer","BytesDeserializer","CharDeserializer","CowStrDeserializer","Error","F32Deserializer","F64Deserializer","I128Deserializer","I16Deserializer","I32Deserializer","I64Deserializer","I8Deserializer","IsizeDeserializer","MapAccessDeserializer","MapDeserializer","SeqAccessDeserializer","SeqDeserializer","StrDeserializer","StringDeserializer","U128Deserializer","U16Deserializer","U32Deserializer","U64Deserializer","U8Deserializer","UnitDeserializer","UsizeDeserializer","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","custom","custom","description","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","end","end","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","ne","new","new","new","new","new","new","new","next_element_seed","next_element_seed","next_entry_seed","next_key_seed","next_value_seed","size_hint","size_hint","size_hint","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","variant_seed","variant_seed","variant_seed","variant_seed","variant_seed","variant_seed","Category","Data","Eof","Error","Io","Result","Syntax","borrow","borrow","borrow_mut","borrow_mut","classify","clone","clone_into","custom","custom","eq","fmt","fmt","fmt","from","from","from","into","into","invalid_type","is_data","is_eof","is_io","is_scratch_too_small","is_syntax","offset","source","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","Deserialize_repr","Serialize_repr","Error","Error","Error","Error","Error","Error","Error","Error","Error","Impossible","Ok","Ok","Ok","Ok","Ok","Ok","Ok","Ok","Serialize","SerializeMap","SerializeMap","SerializeSeq","SerializeSeq","SerializeStruct","SerializeStruct","SerializeStructVariant","SerializeStructVariant","SerializeTuple","SerializeTuple","SerializeTupleStruct","SerializeTupleStruct","SerializeTupleVariant","SerializeTupleVariant","Serializer","StdError","backtrace","borrow","borrow_mut","cause","chain","collect_map","collect_seq","collect_str","custom","description","downcast","downcast","downcast","downcast_mut","downcast_mut","downcast_mut","downcast_ref","downcast_ref","downcast_ref","end","end","end","end","end","end","end","end","end","end","end","end","end","end","from","into","is","is","is","is_human_readable","serialize","serialize_bool","serialize_bytes","serialize_char","serialize_element","serialize_element","serialize_element","serialize_element","serialize_entry","serialize_f32","serialize_f64","serialize_field","serialize_field","serialize_field","serialize_field","serialize_field","serialize_field","serialize_field","serialize_field","serialize_i128","serialize_i16","serialize_i32","serialize_i64","serialize_i8","serialize_key","serialize_key","serialize_map","serialize_newtype_struct","serialize_newtype_variant","serialize_none","serialize_seq","serialize_some","serialize_str","serialize_struct","serialize_struct_variant","serialize_tuple","serialize_tuple_struct","serialize_tuple_variant","serialize_u128","serialize_u16","serialize_u32","serialize_u64","serialize_u8","serialize_unit","serialize_unit_struct","serialize_unit_variant","serialize_value","serialize_value","skip_field","skip_field","source","try_from","try_into","type_id","Tagged","borrow","borrow_mut","current_cbor_tag","deserialize","from","into","new","serialize","tag","try_from","try_into","type_id","value","Deserialize_tuple","Serialize_tuple"],"q":["forest_encoding","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","forest_encoding::deforest_encoding::de::valueforest_encoding::error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","forest_encoding::repr","","forest_encoding::ser","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","forest_encoding::tags","","","","","","","","","","","","","","forest_encoding::tuple",""],"d":["","","","Wrapper for deserializing array of 32 Bytes.","Wrapper for deserializing dynamic sized Bytes.","Wrapper for serializing slice of bytes.","Cbor utility functions for serializable objects","","CodecProtocol defines the protocol in which the data is …","Error type for encoding and decoding data through any …","Generates blake2b hash of fixed 32 bytes size.","Generates blake2b hash with provided size.","","","","","","","","","","","","Returns the content identifier of the raw block of data …","Returns the content identifier of the raw block of data …","","","Generic data structure deserialization framework.","","","","","","","When serializing or deserializing CBOR goes wrong.","","","","","","","","","","","","","Decodes a value from CBOR data in a reader.","Decodes a value from CBOR data in a slice.","","","","","","Marshalls cbor encodable object into cbor bytes","Marshalls cbor encodable object into cbor bytes","","","","","Generic data structure serialization framework.","","","","Support for cbor tags","","","","Serializes a value to a vector.","Serializes a value to a writer.","","","","","","","","","","","","","","","","","Unmarshals cbor encoded bytes to object","Unmarshals cbor encoded bytes to object","The input contained a boolean value that was not expected.","The input contained a <code>&[u8]</code> or <code>Vec<u8></code> that was not …","The input contained a <code>char</code> that was not expected.","A <strong>data structure</strong> that can be deserialized from any data …","A data structure that can be deserialized without …","<code>DeserializeSeed</code> is the stateful form of the <code>Deserialize</code> …","A <strong>data format</strong> that can deserialize any data structure …","The type of the deserializer being converted into.","The input contained an enum that was not expected.","Provides a <code>Visitor</code> access to the data of an enum in the …","The <code>Error</code> trait allows <code>Deserialize</code> implementations to …","The error type that can be returned if some error occurs …","The error type that can be returned if some error occurs …","The error type that can be returned if some error occurs …","The error type that can be returned if some error occurs …","The error type that can be returned if some error occurs …","<code>Expected</code> represents an explanation of what data a <code>Visitor</code> …","The input contained a floating point <code>f32</code> or <code>f64</code> that was …","An efficient way of discarding data from a deserializer.","Converts an existing value into a <code>Deserializer</code> from which …","The input contained a map that was not expected.","Provides a <code>Visitor</code> access to each entry of a map in the …","The input contained a newtype struct that was not …","The input contained a newtype variant that was not …","The input contained an <code>Option<T></code> that was not expected.","A message stating what uncategorized thing the input …","The input contained a sequence that was not expected.","Provides a <code>Visitor</code> access to each element of a sequence …","The input contained a signed integer <code>i8</code>, <code>i16</code>, <code>i32</code> or <code>i64</code> …","<code>Error</code> is a trait representing the basic expectations for …","The input contained a <code>&str</code> or <code>String</code> that was not …","The input contained a struct variant that was not …","The input contained a tuple variant that was not expected.","<code>Unexpected</code> represents an unexpected invocation of any one …","The input contained a unit <code>()</code> that was not expected.","The input contained a unit variant that was not expected.","The input contained an unsigned integer <code>u8</code>, <code>u16</code>, <code>u32</code> or …","The type produced by using this seed.","The value produced by this visitor.","The <code>Visitor</code> that will be used to deserialize the content …","<code>VariantAccess</code> is a visitor that is created by the …","This trait represents a visitor that walks through a …","Returns a stack backtrace, if available, of where this …","","","","","","","","","","Raised when there is general error when deserializing a …","","","Deserialize this value from the given Serde deserializer.","Equivalent to the more common <code>Deserialize::deserialize</code> …","","Require the <code>Deserializer</code> to figure out how to drive the …","Hint that the <code>Deserialize</code> type is expecting a <code>bool</code> value.","Hint that the <code>Deserialize</code> type is expecting a byte array …","Hint that the <code>Deserialize</code> type is expecting a byte array …","Hint that the <code>Deserialize</code> type is expecting a <code>char</code> value.","Hint that the <code>Deserialize</code> type is expecting an enum value …","Hint that the <code>Deserialize</code> type is expecting a <code>f32</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>f64</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i128</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i16</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i32</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i64</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i8</code> value.","Hint that the <code>Deserialize</code> type is expecting the name of a …","Hint that the <code>Deserialize</code> type needs to deserialize a …","Hint that the <code>Deserialize</code> type is expecting a map of …","Hint that the <code>Deserialize</code> type is expecting a newtype …","Hint that the <code>Deserialize</code> type is expecting an optional …","Hint that the <code>Deserialize</code> type is expecting a sequence of …","Hint that the <code>Deserialize</code> type is expecting a string …","Hint that the <code>Deserialize</code> type is expecting a string …","Hint that the <code>Deserialize</code> type is expecting a struct with …","Hint that the <code>Deserialize</code> type is expecting a sequence of …","Hint that the <code>Deserialize</code> type is expecting a tuple …","Hint that the <code>Deserialize</code> type is expecting an <code>u128</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u16</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u32</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u64</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u8</code> value.","Hint that the <code>Deserialize</code> type is expecting a unit value.","Hint that the <code>Deserialize</code> type is expecting a unit struct …","Raised when a <code>Deserialize</code> struct type received more than …","","Format a message stating what data this Visitor expects …","","Format an explanation of what data was being expected. …","","","","","","","","","","Convert this value into a deserializer.","Raised when deserializing a sequence or map and the input …","Raised when a <code>Deserialize</code> receives a type different from …","Raised when a <code>Deserialize</code> receives a value of the right …","Determine whether <code>Deserialize</code> implementations should …","Raised when a <code>Deserialize</code> struct type expected to receive …","","Called when deserializing a variant with a single value.","Called when deserializing a variant with a single value.","This returns <code>Ok(Some(value))</code> for the next value in the …","This returns <code>Ok(Some(value))</code> for the next value in the …","This returns <code>Ok(Some((key, value)))</code> for the next …","This returns <code>Ok(Some((key, value)))</code> for the next …","This returns <code>Ok(Some(key))</code> for the next key in the map, …","This returns <code>Ok(Some(key))</code> for the next key in the map, …","This returns a <code>Ok(value)</code> for the next value in the map.","This returns a <code>Ok(value)</code> for the next value in the map.","Returns the number of elements remaining in the sequence, …","Returns the number of entries remaining in the map, if …","The lower-level source of this error, if any.","Called when deserializing a struct-like variant.","","","","","","","","Called when deserializing a tuple-like variant.","","","Called when deserializing a variant with no values.","Raised when a <code>Deserialize</code> struct type received a field …","Raised when a <code>Deserialize</code> enum type received a variant …","Building blocks for deserializing basic values using the …","<code>variant</code> is called to identify which variant to …","<code>variant</code> is called to identify which variant to …","The input contains a boolean.","","The input contains a byte array that lives at least as …","The input contains a string that lives at least as long …","The input contains a byte array and ownership of the byte …","The input contains a byte array. The lifetime of the byte …","","The input contains a <code>char</code>.","The input contains an enum.","","The input contains an <code>f32</code>.","The input contains an <code>f64</code>.","","The input contains a <code>i128</code>.","","The input contains an <code>i16</code>.","The input contains an <code>i32</code>.","The input contains an <code>i64</code>.","","The input contains an <code>i8</code>.","The input contains a key-value map.","","The input contains a newtype struct.","","The input contains an optional that is absent.","","The input contains a sequence of elements.","","The input contains an optional that is present.","","The input contains a string. The lifetime of the string …","","The input contains a string and ownership of the string …","The input contains a <code>u128</code>.","","The input contains a <code>u16</code>.","The input contains a <code>u32</code>.","The input contains a <code>u64</code>.","","The input contains a <code>u8</code>.","The input contains a unit <code>()</code>.","","A deserializer holding a <code>bool</code>.","A deserializer holding a <code>&[u8]</code> with a lifetime tied to …","A deserializer holding a <code>&str</code> with a lifetime tied to …","A deserializer holding a <code>&[u8]</code>. Always calls …","A deserializer holding a <code>char</code>.","A deserializer holding a <code>Cow<str></code>.","A minimal representation of all possible errors that can …","A deserializer holding an <code>f32</code>.","A deserializer holding an <code>f64</code>.","A deserializer holding an <code>i128</code>.","A deserializer holding an <code>i16</code>.","A deserializer holding an <code>i32</code>.","A deserializer holding an <code>i64</code>.","A deserializer holding an <code>i8</code>.","A deserializer holding an <code>isize</code>.","A deserializer holding a <code>MapAccess</code>.","A deserializer that iterates over a map.","A deserializer holding a <code>SeqAccess</code>.","A deserializer that iterates over a sequence.","A deserializer holding a <code>&str</code>.","A deserializer holding a <code>String</code>.","A deserializer holding a <code>u128</code>.","A deserializer holding a <code>u16</code>.","A deserializer holding a <code>u32</code>.","A deserializer holding a <code>u64</code>.","A deserializer holding a <code>u8</code>.","A deserializer holding a <code>()</code>.","A deserializer holding a <code>usize</codeheck for remaining elements after passing a …","Check for remaining elements after passing a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create a new borrowed deserializer from the given string.","Create a new deserializer from the given bytes.","Create a new borrowed deserializer from the given …","Construct a new <code>MapDeserializer<I, E></code>.","Construct a new <code>SeqDeserializer<I, E></code>.","Construct a new <code>SeqAccessDeserializer<A></code>.","Construct a new <code>MapAccessDeserializer<A></code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Categorizes the cause of a <code>serde_cbor::Error</code>.","The error was caused by input data that was semantically …","The error was caused by prematurely reaching the end of …","This type represents all possible errors that can occur …","The error was caused by a failure to read or write bytes …","Alias for a <code>Result</code> with the error type <code>serde_cbor::Error</code>.","The error was caused by input that was not syntactically …","","","","","Categorizes the cause of this error.","","","","","","","","","","","","","","","Returns true if this error was caused by data that was …","Returns true if this error was caused by prematurely …","Returns true if this error was caused by a failure to …","Returns true if this error was caused by the scratch …","Returns true if this error was caused by input that was …","The byte offset at which the error occurred.","","","","","","","","","","","","Trait used by <code>Serialize</code> implementations to generically …","The error type when some error occurs during …","Must match the <code>Error</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Helper type for implementing a <code>Serializer</code> that does not …","The output type produced by this <code>Serializer</code> during …","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","A <strong>data structure</strong> that can be serialized into any data …","Returned from <code>Serializer::serialize_map</code>.","Type returned from <code>serialize_map</code> for serializing the …","Returned from <code>Serializer::serialize_seq</code>.","Type returned from <code>serialize_seq</code> for serializing the …","Returned from <code>Serializer::serialize_struct</code>.","Type returned from <code>serialize_struct</code> for serializing the …","Returned from <code>Serializer::serialize_struct_variant</code>.","Type returned from <code>serialize_struct_variant</code> for …","Returned from <code>Serializer::serialize_tuple</code>.","Type returned from <code>serialize_tuple</code> for serializing the …","Returned from <code>Serializer::serialize_tuple_struct</code>.","Type returned from <code>serialize_tuple_struct</code> for serializing …","Returned from <code>Serializer::serialize_tuple_variant</code>.","Type returned from <code>serialize_tuple_variant</code> for …","A <strong>data format</strong> that can serialize any data structure …","<code>Error</code> is a trait representing the basic expectations for …","Returns a stack backtrace, if available, of where this …","","","","Returns an iterator starting with the current error and …","Collect an iterator as a map.","Collect an iterator as a sequence.","Serialize a string produced by an implementation of …","Used when a <code>Serialize</code> implementation encounters any error …","","Attempts to downcast the box to a concrete type.","Attempts to downcast the box to a concrete type.","Attempts to downcast the box to a concrete type.","Returns some mutable reference to the boxed value if it …","Forwards to the method defined on the type <code>dyn Error</code>.","Forwards to the method defined on the type <code>dyn Error</code>.","Returns some reference to the boxed value if it is of …","Forwards to the method defined on the type <code>dyn Error</code>.","Forwards to the method defined on the type <code>dyn Error</code>.","Finish serializing a sequence.","Finish serializing a tuple.","Finish serializing a tuple struct.","Finish serializing a tuple variant.","Finish serializing a map.","Finish serializing a struct.","Finish serializing a struct variant.","","","","","","","","","","Forwards to the method defined on the type <code>dyn Error</code>.","Forwards to the method defined on the type <code>dyn Error</code>.","Returns <code>true</code> if the boxed type is the same as <code>T</code>","Determine whether <code>Serialize</code> implementations should …","Serialize this value into the given Serde serializer.","Serialize a <code>bool</code> value.","Serialize a chunk of raw byte data.","Serialize a character.","Serialize a sequence element.","Serialize a tuple element.","","","Serialize a map entry consisting of a key and a value.","Serialize an <code>f32</code> value.","Serialize an <code>f64</code> value.","Serialize a tuple struct field.","Serialize a tuple variant field.","Serialize a struct field.","Serialize a struct variant field.","","","","","Serialize an <code>i128</code> value.","Serialize an <code>i16</code> value.","Serialize an <code>i32</code> value.","Serialize an <code>i64</code> value.","Serialize an <code>i8</code> value.","Serialize a map key.","","Begin to serialize a map. This call must be followed by …","Serialize a newtype struct like <code>struct Millimeters(u8)</code>.","Serialize a newtype variant like <code>E::N</code> in <code>enum E { N(u8) }</code>.","Serialize a <code>None</code> value.","Begin to serialize a variably sized sequence. This call …","Serialize a <code>Some(T)</code> value.","Serialize a <code>&str</code>.","Begin to serialize a struct like …","Begin to serialize a struct variant like <code>E::S</code> in …","Begin to serialize a statically sized sequence whose …","Begin to serialize a tuple struct like …","Begin to serialize a tuple variant like <code>E::T</code> in …","Serialize a <code>u128</code> value.","Serialize a <code>u16</code> value.","Serialize a <code>u32</code> value.","Serialize a <code>u64</code> value.","Serialize a <code>u8</code> value.","Serialize a <code>()</code> value.","Serialize a unit struct like <code>struct Unit</code> or <code>PhantomData<T></code>…","Serialize a unit variant like <code>E::A</code> in <code>enum E { A, B }</code>.","Serialize a map value.","","Indicate that a struct field has been skipped.","Indicate that a struct variant field has been skipped.","The lower-level source of this error, if any.","","","","A value that is optionally tagged with a cbor tag","","","function to get the current cbor tag","","","","Create a new tagged value","","cbor tag","","","","value","",""],"i":[1,2,3,0,0,0,0,4,0,0,0,0,1,2,3,5,4,1,2,3,5,4,0,6,6,3,3,0,5,1,3,3,5,4,0,3,5,5,4,4,1,2,3,5,5,5,4,0,0,1,2,3,5,4,6,6,3,5,5,0,0,1,2,3,0,3,5,4,0,0,1,2,3,5,4,1,2,3,5,4,0,1,2,3,5,4,6,6,7,7,7,0,0,0,0,8,7,0,0,9,10,11,12,13,0,7,0,0,7,0,7,7,7,7,7,0,7,0,7,7,7,0,7,7,7,14,15,12,0,0,16,17,7,17,7,16,17,7,17,7,18,17,16,19,14,17,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,18,7,15,17,20,20,17,17,7,7,17,7,17,7,8,18,18,18,9,18,7,13,13,10,10,11,11,11,11,11,11,10,11,16,13,17,7,7,17,7,17,7,13,17,7,13,18,18,0,12,12,15,17,15,15,15,15,17,15,15,17,15,15,17,15,17,15,15,15,17,15,15,17,15,17,15,17,15,17,15,17,15,17,15,15,17,15,15,15,17,15,15,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,30,30,30,21,22,23,24,25,26,27,28,29,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,21,22,23,24,25,26,27,28,29,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,21,22,23,24,25,26,27,28,29,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,21,22,23,24,25,26,27,28,29,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,21,22,23,24,25,26,27,28,29,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,21,22,23,24,25,26,27,28,29,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,21,22,23,24,25,26,27,28,29,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,21,22,23,24,25,26,27,28,29,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,21,22,23,24,25,26,27,28,29,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,21,22,23,24,25,26,27,28,29,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,21,22,23,24,25,26,27,28,29,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,21,22,23,24,25,26,27,28,29,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,21,22,23,24,25,26,27,28,29,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,21,22,23,24,25,26,27,28,29,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,21,22,23,24,25,26,27,28,29,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,21,22,23,24,25,26,27,28,29,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,21,22,23,24,25,26,27,28,29,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,21,22,23,24,25,26,27,28,29,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,21,22,23,24,25,26,27,28,29,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,21,22,23,24,25,26,27,28,29,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,21,22,23,24,25,26,27,28,29,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,21,22,23,24,25,26,27,28,29,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,21,22,23,24,25,26,27,28,29,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,21,22,23,24,25,26,27,28,29,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,21,22,23,24,25,26,27,28,29,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,21,22,23,24,25,26,27,28,29,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,21,22,23,24,25,26,27,28,29,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,21,22,23,24,25,26,27,28,29,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,21,22,23,24,25,26,27,28,29,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,21,22,23,24,25,26,27,28,29,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,21,22,23,24,25,26,27,28,29,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,29,46,30,21,22,23,24,25,26,27,28,29,30,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,30,24,27,28,29,46,47,48,29,46,29,29,29,29,29,46,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,30,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,22,23,24,25,26,48,0,49,49,0,49,0,49,50,49,50,49,50,49,49,50,50,49,50,50,49,50,50,49,50,49,50,50,50,50,50,50,50,50,49,50,50,49,50,49,50,49,0,0,0,51,52,53,54,55,56,57,58,0,51,52,53,54,55,56,57,58,0,0,51,0,51,0,51,0,51,0,51,0,51,0,51,0,0,16,59,59,16,16,51,51,51,60,16,16,16,16,16,16,16,16,16,16,52,53,54,55,56,57,58,59,59,59,59,59,59,59,59,59,16,16,16,51,61,51,51,51,52,53,59,59,56,51,51,54,55,57,58,59,59,59,59,51,51,51,51,51,56,59,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,56,59,57,58,16,59,59,59,0,62,62,0,62,62,62,62,62,62,62,62,62,62,0,0],"f":[null,null,null,null,null,null,null,null,null,null,[[]],[[["usize",15]],[["vec",3,["u8"]],["u8",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["result",4,["cid","error"]],["error",3],["cid",3]]],[[],[["result",4,["cid","error"]],["error",3],["cid",3]]],[[],["bytesde",3]],[[]],null,null,[[],["result",4]],[[],["result",4]],[[["bytesde",3]],["bool",15]],[[["error",3]],["bool",15]],[[["codecprotocol",4]],["bool",15]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["cborerror",3]],["error",3]],[[["ciderror",4]]],[[]],[[]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[]],[[]],[[]],[[]],[[]],[[],[["vec",3,["u8"]],["error",3],["result",4,["vec","error"]]]],[[],[["vec",3,["u8"]],["error",3],["result",4,["vec","error"]]]],[[["bytesde",3]],["bool",15]],[[["error",3]],["bool",15]],null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],null,[[]],[[],["string",3]],[[],["string",3]],[[],[["error",3],["vec",3,["u8","global"]],["result",4,["vec","error"]]]],[[],[["error",3],["result",4,["error"]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],[["backtrace",3],["option",4,["backtrace"]]]],[[]],[[]],[[]],[[]],[[],[["option",4,["error"]],["error",8]]],[[],["ignoredany",3]],[[],["unexpected",4]],[[]],[[]],[[]],[[],["ignoredany",3]],[[],["str",15]],[[],["result",4]],[[],["result",4]],[[],[["ignoredany",3],["result",4,["ignoredany"]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]]],[[["unexpected",4]],["bool",15]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[]],[[]],[[]],[[]],[[]],[[["usize",15],["expected",8]]],[[["expected",8],["unexpected",4]]],[[["expected",8],["unexpected",4]]],[[],["bool",15]],[[["str",15]]],[[["unexpected",4]],["bool",15]],[[],["result",4]],[[],["result",4]],[[],[["result",4,["option"]],["option",4]]],[[],[["option",4],["result",4,["option"]]]],[[],[["option",4],["result",4,["option"]]]],[[],[["option",4],["result",4,["option"]]]],[[],[["result",4,["option"]],["option",4]]],[[],[["result",4,["option"]],["option",4]]],[[],["result",4]],[[],["result",4]],[[],[["usize",15],["option",4,["usize"]]]],[[],[["usize",15],["option",4,["usize"]]]],[[],[["option",4,["error"]],["error",8]]],[[],["result",4]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["usize",15]],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["result",4]],[[["str",15]]],[[["str",15]]],null,[[],["result",4]],[[],["result",4]],[[["bool",15]],["result",4]],[[["bool",15]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["global",3],["u8",15],["vec",3,["u8","global"]]],["result",4]],[[],["result",4]],[[],["result",4]],[[["char",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[["f32",15]],["result",4]],[[["f64",15]],["result",4]],[[["f64",15]],["result",4]],[[["i128",15]],["result",4]],[[["i128",15]],["result",4]],[[["i16",15]],["result",4]],[[["i32",15]],["result",4]],[[["i64",15]],["result",4]],[[["i64",15]],["result",4]],[[["i8",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["string",3]],["result",4]],[[["u128",15]],["result",4]],[[["u128",15]],["result",4]],[[["u16",15]],["result",4]],[[["u32",15]],["result",4]],[[["u64",15]],["result",4]],[[["u64",15]],["result",4]],[[["u8",15]],["result",4]],[[],["result",4]],[[],["result",4]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["unitdeserializer",3]],[[],["u32deserializer",3]],[[],["strdeserializer",3]],[[],["borrowedstrdeserializer",3]],[[],["stringdeserializer",3]],[[],["cowstrdeserializer",3]],[[],["bytesdeserializer",3]],[[],["borrowedbytesdeserializer",3]],[[],["mapdeserializer",3]],[[],["error",3]],[[],["booldeserializer",3]],[[],["i8deserializer",3]],[[],["i16deserializer",3]],[[],["i32deserializer",3]],[[],["i64deserializer",3]],[[],["isizedeserializer",3]],[[],["u8deserializer",3]],[[],["u16deserializer",3]],[[],["u64deserializer",3]],[[],["usizedeserializer",3]],[[],["f32deserializer",3]],[[],["f64deserializer",3]],[[],["chardeserializer",3]],[[],["i128deserializer",3]],[[],["u128deserializer",3]],[[],["seqdeserializer",3]],[[],["seqaccessdeserializer",3]],[[],["mapaccessdeserializer",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["error",3]],[[],["error",3]],[[],["str",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[["error",3]],["bool",15]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["error",3]],["bool",15]],[[["str",15]],["borrowedstrdeserializer",3]],[[],["bytesdeserializer",3]],[[],["borrowedbytesdeserializer",3]],[[],["mapdeserializer",3]],[[],["seqdeserializer",3]],[[],["seqaccessdeserializer",3]],[[],["mapaccessdeserializer",3]],[[],[["option",4],["result",4,["option"]]]],[[],[["option",4],["result",4,["option"]]]],[[],[["option",4],["result",4,["option"]]]],[[],[["option",4],["result",4,["option"]]]],[[],["result",4]],[[],[["usize",15],["option",4,["usize"]]]],[[],[["usize",15],["option",4,["usize"]]]],[[],[["usize",15],["option",4,["usize"]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["category",4]],[[],["category",4]],[[]],[[],["error",3]],[[],["error",3]],[[["category",4]],["bool",15]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["error",3]],["error",3]],[[]],[[]],[[]],[[]],[[["expected",8],["unexpected",4]],["error",3]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["u64",15]],[[],[["option",4,["error"]],["error",8]]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],[["backtrace",3],["option",4,["backtrace"]]]],[[]],[[]],[[],[["option",4,["error"]],["error",8]]],[[],["chain",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[]],[[],["str",15]],[[["global",3],["box",3,["error","global"]],["error",8]],[["result",4,["box","box"]],["box",3,["global"]],["box",3,["error","global"]]]],[[["error",8],["global",3],["box",3,["error","global"]]],[["result",4,["box","box"]],["box",3,["global"]],["box",3,["error","global"]]]],[[["global",3],["box",3,["error","global"]],["error",8]],[["box",3,["error","global"]],["result",4,["box","box"]],["box",3,["global"]]]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["result",4]],[[["bool",15]],["result",4]],[[],["result",4]],[[["char",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["f32",15]],["result",4]],[[["f64",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[["i128",15]],["result",4]],[[["i16",15]],["result",4]],[[["i32",15]],["result",4]],[[["i64",15]],["result",4]],[[["i8",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[["usize",15],["option",4,["usize"]]],["result",4]],[[["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[],["result",4]],[[["usize",15],["option",4,["usize"]]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[["usize",15],["u32",15],["str",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[["usize",15],["u32",15],["str",15]],["result",4]],[[["u128",15]],["result",4]],[[["u16",15]],["result",4]],[[["u32",15]],["result",4]],[[["u64",15]],["result",4]],[[["u8",15]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],[["option",4,["error"]],["error",8]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[]],[[]],[[],[["option",4,["u64"]],["u64",15]]],[[],[["tagged",3],["result",4,["tagged"]]]],[[]],[[]],[[["option",4,["u64"]],["u64",15]],["tagged",3]],[[],["result",4]],null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null],"p":[[3,"Byte32De"],[3,"BytesSer"],[3,"BytesDe"],[4,"CodecProtocol"],[3,"Error"],[8,"Cbor"],[4,"Unexpected"],[8,"IntoDeserializer"],[8,"Deserializer"],[8,"SeqAccess"],[8,"MapAccess"],[8,"EnumAccess"],[8,"VariantAccess"],[8,"DeserializeSeed"],[8,"Visitor"],[8,"StdError"],[3,"IgnoredAny"],[8,"Error"],[8,"Deserialize"],[8,"Expected"],[3,"UnitDeserializer"],[3,"U32Deserializer"],[3,"StrDeserializer"],[3,"BorrowedStrDeserializer"],[3,"StringDeserializer"],[3,"CowStrDeserializer"],[3,"BytesDeserializer"],[3,"BorrowedBytesDeserializer"],[3,"MapDeserializer"],[3,"Error"],[3,"BoolDeserializer"],[3,"I8Deserializer"],[3,"I16Deserializer"],[3,"I32Deserializer"],[3,"I64Deserializer"],[3,"IsizeDeserializer"],[3,"U8Deserializer"],[3,"U16Deserializer"],[3,"U64Deserializer"],[3,"UsizeDeserializer"],[3,"F32Deserializer"],[3,"F64Deserializer"],[3,"CharDeserializer"],[3,"I128Deserializer"],[3,"U128Deserializer"],[3,"SeqDeserializer"],[3,"SeqAccessDeserializer"],[3,"MapAccessDeserializer"],[4,"Category"],[3,"Error"],[8,"Serializer"],[8,"SerializeSeq"],[8,"SerializeTuple"],[8,"SerializeTupleStruct"],[8,"SerializeTupleVariant"],[8,"SerializeMap"],[8,"SerializeStruct"],[8,"SerializeStructVariant"],[3,"Impossible"],[8,"Error"],[8,"Serialize"],[3,"Tagged"]]},\
"forest_hash_utils":{"doc":"","t":[12,3,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11],"n":["0","BytesKey","Hash","borrow","borrow","borrow","borrow_mut","clone","clone_into","deref","deserialize","eq","fmt","from","from","from","from","hash","hash","hash_slice","into","ne","partial_cmp","serialize","to_owned","try_from","try_into","type_id"],"q":["forest_hash_utils","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Key type to be used to serialize as byte string instead …","Custom trait to avoid issues like …","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,1,1,1,1,1,1,1],"f":[null,null,null,[[],["vec",3]],[[]],[[]],[[]],[[],["byteskey",3]],[[]],[[]],[[],["result",4]],[[["byteskey",3]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[["vec",3,["u8"]],["u8",15]]],[[]],[[["str",15]]],[[]],[[]],[[]],[[]],[[["byteskey",3]],["bool",15]],[[["byteskey",3]],[["option",4,["ordering"]],["ordering",4]]],[[],["result",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]]],"p":[[3,"BytesKey"],[8,"Hash"]]},\
"forest_ipld":{"doc":"","t":[13,13,13,13,4,13,13,13,4,13,13,13,13,13,13,3,4,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,14,0,11,11,11,11,11,11,11,11,0,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,12,12,3,3,11,11,11,11,5,11,11,11,11,11,5,11,11,11,11,11,11,11,11,13,4,13,13,13,13,13,13,13,13,13,13,13,13,13,3,13,8,13,13,13,3,4,13,13,4,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,10,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,5],"n":["Bool","Bytes","Custom","Encoding","Error","Float","Int","Integer","Ipld","Link","Link","List","Map","Null","Other","Path","PathSegment","String","String","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","custom","default","deserialize","deserialize","eq","eq","eq","eq","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_ipld","into","into","into","into","ipld","json","ne","ne","ne","ne","new","pop","push","segments","selector","serialize","to_index","to_ipld","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","util","0","0","IpldJson","IpldJsonRef","borrow","borrow","borrow_mut","borrow_mut","deserialize","deserialize","from","from","into","into","serialize","serialize","serialize","try_from","try_from","try_into","try_into","type_id","type_id","And","Condition","Depth","ExploreAll","ExploreFields","ExploreIndex","ExploreRange","ExploreRecursive","ExploreRecursiveEdge","ExploreUnion","GreaterThan","HasField","HasKind","HasValue","IsLink","LastBlockInfo","LessThan","LinkResolver","Matcher","None","Or","Progress","RecursionLimit","SelectionCandidate","SelectionMatch","Selector","VisitReason","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","decide","default","deserialize","deserialize","deserialize","eq","eq","eq","eq","eq","explore","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","interests","into","into","into","into","into","into","last_block","link","load_link","ne","ne","ne","path","path","serialize","serialize","serialize","sub_assign","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","walk_all","walk_matching","current","end","fields","index","limit","next","next","next","sequence","start","stop_at","recurse_links"],"q":["forest_ipld","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","forest_ipld::json","","","","","","","","","","","","","","","","","","","","","","","forest_ipld::selector","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","forest_ipld::selector::Selector","","","","","","","","","","","forest_ipld::util"],"d":["Represents a boolean value.","Represents Bytes.","","","Ipld error","Represents a floating point value.","Index in a list","Represents a signed integer value.","Represents IPLD data structure used when serializing and …","","Represents a link to another piece of data through a …","Represents List of IPLD objects.","Represents a map of strings to Ipld objects.","Represents a null value.","","Describes a series of steps across a tree or DAG of Ipld, …","Represents either a key in a map or an index in a list.","Key in a map","Represents a String.","","","","","","","","","","","","","","","","","","","","","","","Extend <code>Path</code> with another <code>Path</code> by cloning and appending …","","","","","","","","","","","","","","","","","Convert a <code>Ipld</code> structure into a type <code>T</code> Currently converts …","","","","","Construct a <code>forest_ipld::Ipld</code> roughly matching JSON …","","","","","","","Pops a <code>PathSegment</code> from the end of the path.","Pushes a <code>PathSegment</code> to the end of the <code>Path</code>.","Returns slice of <code>PathSegment</code>s of the <code>Path</code>.","","","Return index or conversion from string to index. If path …","Convert any object into an IPLD object","","","","","","","","","","","","","","","","","","","","","","Wrapper for serializing and deserializing a Ipld from …","Wrapper for serializing a ipld reference to JSON.","","","","","","","","","","","","","","","","","","","","","Condition is expresses a predicate with a boolean result.","","ExploreAll is similar to a <code>*</code> – it traverses all …","ExploreFields traverses named fields in a map (or …","ExploreIndex traverses a specific index in a list, and …","ExploreRange traverses a list, and for each element in …","ExploreRecursive traverses some structure recursively. To …","ExploreRecursiveEdge is a special sentinel value which is …","ExploreUnion allows selection to continue with two or …","","","","","","Contains information about the last block that was …","","","Matcher marks a node to be included in the “result” …","","","Contains progress of traversal and last block information …","","Ipld node was visited while searching for matches.","Ipld node visited was a specific match.","Selectors are expressions that identify and select a …","Provides reason for callback in traversal for <code>walk_all</code>.","","","","","","","","","","","","","","","","","","","","","","","Returns true if matcher, false otherwise","","","","","","","","","","Processes and returns resultant selector node","","","","","","","","","","","","","Returns a vector of all sectors of interest, <code>None</code> variant …","","","","","","","Returns the last block information from a link traversal.","","Resolves a Cid link into it’s respective Ipld node, if …","","","","Returns the path of the current progress","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Walks all nodes visited (not just matched nodes) and …","Walks a graph of Ipld nodes, executing the callback only …","Used to index current","","","","","","","","","","if a node matches, we won’t match it nor explore its …",""],"i":[1,1,2,2,0,1,3,1,0,2,1,1,1,1,2,0,0,3,1,2,4,3,1,2,4,3,1,4,3,1,4,3,1,2,4,3,1,2,4,3,1,4,2,2,4,4,3,3,1,2,2,4,4,3,3,3,3,1,0,2,4,3,1,0,0,2,4,3,1,4,4,4,4,0,1,3,0,4,3,1,2,4,3,2,4,3,1,2,4,3,1,2,4,3,1,0,5,6,0,0,5,6,5,6,0,5,5,6,5,6,0,5,6,5,6,5,6,5,6,7,0,8,9,9,9,9,9,9,9,7,7,7,7,7,0,7,0,9,8,7,0,0,10,10,0,0,10,11,12,9,8,7,10,11,12,9,8,7,10,12,9,8,7,10,12,9,8,7,9,11,9,8,7,10,12,9,8,7,9,10,11,12,9,8,7,10,11,12,9,8,7,9,10,11,12,9,8,7,11,12,13,12,9,8,11,12,9,8,7,8,10,12,9,8,7,10,11,12,9,8,7,10,11,12,9,8,7,10,11,12,9,8,7,9,9,14,15,16,17,14,18,17,15,14,15,14,0],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["path",3]],[[],["pathsegment",4]],[[],["ipld",4]],[[]],[[]],[[]],[[["display",8]],["error",4]],[[],["path",3]],[[],["result",4]],[[],["result",4]],[[["error",4]],["bool",15]],[[["path",3]],["bool",15]],[[["pathsegment",4]],["bool",15]],[[["ipld",4]],["bool",15]],[[["path",3]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["cborerror",3]],["error",4]],[[]],[[["str",15]]],[[]],[[["string",3]]],[[["usize",15]]],[[]],[[["str",15]]],[[]],[[["ipld",4]],[["result",4,["string"]],["string",3]]],[[]],[[]],[[]],[[]],null,null,[[["error",4]],["bool",15]],[[["path",3]],["bool",15]],[[["pathsegment",4]],["bool",15]],[[["ipld",4]],["bool",15]],[[["vec",3,["pathsegment"]],["pathsegment",4]]],[[],[["option",4,["pathsegment"]],["pathsegment",4]]],[[["pathsegment",4]]],[[]],null,[[],["result",4]],[[],[["usize",15],["option",4,["usize"]]]],[[],[["ipld",4],["result",4,["ipld","error"]],["error",4]]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,[[]],[[]],[[]],[[]],[[],[["result",4,["ipld"]],["ipld",4]]],[[],["result",4]],[[]],[[]],[[]],[[]],[[["ipld",4]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["visitreason",4]],[[],["lastblockinfo",3]],[[],["selector",4]],[[],["recursionlimit",4]],[[],["condition",4]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["progress",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["visitreason",4]],["bool",15]],[[["lastblockinfo",3]],["bool",15]],[[["selector",4]],["bool",15]],[[["recursionlimit",4]],["bool",15]],[[["condition",4]],["bool",15]],[[["pathsegment",4],["ipld",4]],[["selector",4],["option",4,["selector"]]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["option",4,["vec"]],["vec",3,["pathsegment"]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["lastblockinfo",3],["option",4,["lastblockinfo"]]]],null,[[["cid",3]],[["box",3,["future"]],["pin",3,["box"]]]],[[["lastblockinfo",3]],["bool",15]],[[["selector",4]],["bool",15]],[[["recursionlimit",4]],["bool",15]],[[],["path",3]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["u64",15]]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["option",4],["ipld",4]]],[[["option",4],["ipld",4]]],null,null,null,null,null,null,null,null,null,null,null,[[["hashset",3],["cid",3]],[["result",4,["box"]],["box",3,["stderror"]]]]],"p":[[4,"Ipld"],[4,"Error"],[4,"PathSegment"],[3,"Path"],[3,"IpldJson"],[3,"IpldJsonRef"],[4,"Condition"],[4,"RecursionLimit"],[4,"Selector"],[4,"VisitReason"],[3,"Progress"],[3,"LastBlockInfo"],[8,"LinkResolver"],[13,"ExploreRecursive"],[13,"ExploreRange"],[13,"ExploreFields"],[13,"ExploreIndex"],[13,"ExploreAll"]]},\
"forest_json_utils":{"doc":"","t":[3,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,5,5],"n":["GoVecVisitor","borrow","borrow_mut","default","expecting","fmt","from","go_vec_visitor","into","new","try_from","try_into","type_id","visit_none","visit_seq","visit_unit","deserialize","serialize"],"q":["forest_json_utils","","","","","","","","","","","","","","","","forest_json_utils::go_vec_visitor",""],"d":["Helper visitor to match Go’s default behaviour of …","","","","","","","","","","","","","","","","",""],"i":[0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,0],"f":[null,[[]],[[]],[[],["govecvisitor",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[]],null,[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["result",4]],[[],[["result",4,["vec"]],["vec",3]]],[[],["result",4]],[[],[["result",4,["vec"]],["vec",3]]],[[],["result",4]]],"p":[[3,"GoVecVisitor"]]},\
"forest_libp2p":{"doc":"","t":[13,13,13,13,13,13,13,13,13,13,13,13,13,13,6,13,13,13,3,3,13,13,3,6,13,13,13,13,4,4,4,13,13,13,13,13,13,13,17,17,13,13,3,4,4,13,13,13,13,13,3,13,13,13,13,13,13,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,17,6,3,3,3,4,3,13,17,13,17,13,13,13,3,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,12,12,11,11,11,11,11,12,11,12,12,12,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,17,6,3,3,3,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,13,13,4,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["BitswapBlock","BitswapRequest","Block","ChainExchangeRequest","ChainExchangeRequest","Dccp","Dns","Dns4","Dns6","Dnsaddr","HelloRequest","HelloRequest","Http","Https","IdentTopic","Ip4","Ip6","JSONRPCRequest","Libp2pConfig","Libp2pService","Memory","Message","Multiaddr","Multihash","NetAddrsListen","NetConnect","NetDisconnect","NetPeers","NetRPCMethods","NetworkEvent","NetworkMessage","Onion","Onion3","P2p","P2pCircuit","P2pWebRtcDirect","P2pWebRtcStar","P2pWebSocketStar","PUBSUB_BLOCK_STR","PUBSUB_MSG_STR","PeerConnected","PeerDisconnected","PeerId","Protocol","PubsubMessage","PubsubMessage","PubsubMessage","Quic","Sctp","Tcp","Topic","Udp","Udt","Unix","Utp","Ws","Wss","acquire","as_byte_slice","as_ref","as_ref","as_slice_of","bootstrap_peers","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build_transport","chain_exchange","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","empty","encode_hex","encode_hex_upper","ends_with","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bytes","from_bytes","from_iter","from_multihash","from_public_key","from_str","from_str","from_str_parts","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_keypair","hash","hash","hash","hello","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","is_empty","is_public_key","iter","kademlia","len","listening_multiaddr","mdns","ne","ne","ne","ne","network_receiver","network_sender","new","new","partial_cmp","partial_cmp","partial_cmp","pop","protocol_name","push","random","replace","rpc","run","serialize","target_peer_count","to_base58","to_bytes","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_vec","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","with","with_capacity","write_bytes","channel","cid","message","request","request","source","source","cid","message","method","peer_id","peer_id","request","request","response_channel","response_channel","response_channel","topic","BadRequest","BlockNotFound","CHAIN_XCHG_PROTOCOL_ID","ChainExchangeCodec","ChainExchangeProtocolName","ChainExchangeRequest","ChainExchangeResponse","ChainExchangeResponseStatus","CompactedMessages","GoAway","HEADERS","InternalError","MESSAGES","Other","PartialResponse","Success","TipsetBundle","blocks","bls_msg_includes","bls_msgs","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chain","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","include_blocks","include_messages","init","init","init","init","init","init","into","into","into","into","into","into","into_result","make_chain_exchange_response","message","messages","ne","ne","ne","ne","ne","options","protocol_name","request_len","secp_msg_includes","secp_msgs","serialize","serialize","serialize","serialize","serialize","start","status","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","HELLO_PROTOCOL_ID","HelloCodec","HelloProtocolName","HelloRequest","HelloResponse","arrival","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","drop","drop","drop","eq","eq","eq","fmt","fmt","fmt","from","from","from","genesis_hash","heaviest_tip_set","heaviest_tipset_height","heaviest_tipset_weight","init","init","init","into","into","into","ne","ne","protocol_name","sent","serialize","serialize","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","CborRequestResponse","ConnectionClosed","DialFailure","RequestResponseError","Timeout","UnsupportedProtocols","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","default","deref","deref","deref_mut","deref_mut","drop","drop","fmt","from","from","from","init","init","into","into","read_request","read_response","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","write_request","write_response"],"q":["forest_libp2pforest_libp2p::NetworkEvent","","","","","","","forest_libp2p::NetworkMessage","","","","","","","","","","","forest_libp2p::chain_exchange","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","forest_libp2p::hello","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","forest_libp2p::rpc","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","Messages that come over the block topic","","","","","","","","","","","","","","","","Libp2p config for the Forest node.","The Libp2pService listens to events from the Libp2p swarm.","Contains the “port” to contact. Similar to TCP or …","Messages that come over the message topic","Representation of a Multiaddr.","A Multihash with the same allocated size as the …","","","","","Network RPC API methods used to gather data from libp2p …","Events emitted by this Service.","Messages into the service to handle.","","","","","","","","Gossipsub Filecoin blocks topic identifier.","Gossipsub Filecoin messages topic identifier.","","","Identifier of a peer of the network.","<code>Protocol</code> describes all possible multiaddress protocols.","Message types that can come over GossipSub","","","","","","A gossipsub topic.","","","","","","","Turn this <code>Protocol</code> into one that owns its data, thus …","","","","","Bootstrap peer list.","","","","","","","","","","","","","","","","","","","","","Builds the transport stack that LibP2P will communicate …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create a new, empty multiaddress.","","","Checks whether the given <code>Multiaddr</code> is a suffix of this …","","","","","","","","","","","","","","","","","","","Convert a Multiaddr to a string","","","","","","","","","","","","","","","","","","","","","","Parses a <code>PeerId</code> from bytes.","Parse a single <code>Protocol</code> value from its byte slice …","","Tries to turn a <code>Multihash</code> into a <code>PeerId</code>.","Builds a <code>PeerId</code> from a public key.","","","Parse a protocol value from the given iterator of string …","","","","","","","","","Fetch keypair from disk, returning none if it cannot be …","","","","","","","","","","","","","","","","","","","","","","","","","Returns true if the length of this multiaddress is 0.","Checks whether the public key passed as parameter matches …","Returns the components of this multiaddress.","Kademlia discovery enabled.","Return the length in bytes of this multiaddress.","Local address.","Mdns discovery enabled.","","","","","Returns a receiver to listen to network events emitted …","Returns a sender which allows sending messages to the …","","","","","","Pops the last <code>Protocol</code> of this multiaddr, or <code>None</code> if the …","","Adds an already-parsed address component to the end of …","Generates a random peer ID from a cryptographically …","Replace a <code>Protocol</code> at some position in this <code>Multiaddr</code>.","","Starts the libp2p service networking stack. This Future …","","Target peer count.","Returns a base-58 encoded string of this <code>PeerId</code>.","Returns a raw bytes representation of this <code>PeerId</code>.","","","","","","","","","","Return a copy of this <code>Multiaddr</code>’s byte representation.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Like <code>Multiaddr::push</code> but consumes <code>self</code>.","Create a new, empty multiaddress with the given capacity.","Encode this protocol by writing its binary representation …","","","","","","","","","","","","","","","","","","","Request was bad.","Request.Start not found.","Libp2p protocol ID for ChainExchange.","ChainExchange protocol codec to be used within the RPC …","Type to satisfy <code>ProtocolName</code> interface for ChainExchange …","The payload that gets sent to another node to request for …","The response to a ChainExchange request.","Status codes of a chain_exchange response.","Contains all bls and secp messages and their indexes per …","Requester is making too many requests.","ChainExchange Filecoin header set bit.","Internal error occured.","ChainExchange Filecoin messages set bit.","Other undefined response code.","We could not fetch all blocks requested (but at least we …","All is well.","Contains the blocks and messages in a particular tipset","The blocks in the tipset.","Describes which block each message belongs to.","Unsigned bls messages.","","","","","","","","","","","","","The tipsets requested.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","If a request has the HEADERS bit set and requests …","If a request has the MESSAGES bit set and requests …","","","","","","","","","","","","","Converts chain_exchange response into result. Returns an …","Builds chain exchange response out of chain data.","Status message indicating failure reason.","Compressed messages format.","","","","","","1 = Block only, 2 = Messages only, 3 = Blocks and …","","The amount of epochs to request.","Describes which block each message belongs to.","Signed secp messages.","","","","","","The tipset Cid to start the request from.","Status code of the response.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Libp2p Hello protocol ID.","Hello protocol codec to be used within the RPC service.","Type to satisfy <code>ProtocolName</code> interface for Hello RPC.","Hello message …","Response to a Hello message. This just handles latency of …","Time of arrival to peer in unix nanoseconds.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Time sent from peer in unix nanoseconds.","","","","","","","","","","","","","","","","","","Generic Cbor RequestResponse type. This is just needed to …","The connection closed before a response was received.","The request could not be sent because a dialing attempt …","libp2p request response outbound error type. This …","The request timed out before a response was received.","The remote supports none of the requested protocols.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[1,2,3,1,2,4,4,4,4,4,1,2,4,4,0,4,4,2,0,0,4,3,0,0,5,5,5,5,0,0,0,4,4,4,4,4,4,4,0,0,1,1,0,0,0,1,2,4,4,4,0,4,4,4,4,4,4,4,6,7,6,6,8,9,8,1,3,2,5,7,4,6,10,9,8,1,3,2,5,7,4,6,10,0,0,3,7,4,6,10,3,7,4,6,10,7,6,10,8,9,8,1,3,2,5,7,4,6,10,9,8,1,3,2,5,7,4,6,10,8,6,9,8,1,3,2,5,7,4,6,10,6,6,6,6,7,4,6,10,7,4,6,10,8,1,3,2,5,7,7,4,4,6,6,10,10,9,8,1,3,2,5,7,7,7,4,4,4,4,6,6,6,6,6,10,7,4,6,7,7,7,6,4,7,7,7,7,6,6,6,6,0,7,6,10,0,9,8,1,3,2,5,7,4,6,10,9,8,1,3,2,5,7,4,6,10,6,7,6,8,6,8,8,7,4,6,10,9,9,9,10,7,6,10,6,6,6,7,6,0,9,6,8,7,7,3,7,4,6,10,7,4,6,10,6,9,8,1,3,2,5,7,7,7,4,6,6,6,6,10,9,8,1,3,2,5,7,4,6,10,9,8,1,3,2,5,7,4,6,10,9,8,1,3,2,5,7,4,6,10,6,6,4,11,12,13,14,11,13,14,15,16,17,18,19,18,19,18,19,15,16,20,20,0,0,0,0,0,0,0,20,0,20,0,20,20,20,0,21,22,22,23,20,24,22,21,25,23,20,24,22,21,25,24,23,20,24,22,21,25,23,20,24,22,21,25,21,25,23,20,24,22,21,25,23,20,24,22,21,25,23,20,24,22,21,23,20,24,22,21,25,23,20,24,22,21,25,23,20,24,22,21,25,23,20,24,22,21,25,23,23,23,20,24,22,21,25,23,20,24,22,21,25,24,0,24,21,23,20,24,22,21,23,25,23,22,22,23,20,24,22,21,23,24,23,20,24,22,21,25,23,20,24,22,22,21,25,23,20,24,22,21,25,23,20,24,22,21,25,23,20,24,22,21,25,0,0,0,0,0,26,27,26,28,27,26,28,27,26,28,27,26,28,28,27,26,28,27,26,28,27,26,27,26,28,27,26,28,27,26,28,27,26,28,27,27,27,27,27,26,28,27,26,28,27,26,28,26,27,26,27,26,28,27,26,28,27,26,28,27,26,28,27,26,28,0,29,29,0,29,29,30,29,30,29,30,30,30,30,29,30,29,30,29,29,30,29,29,30,29,30,29,30,30,30,30,29,30,29,30,29,30,29,30,30],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["protocol",4]],[[]],[[],["multihash",3]],[[]],[[],[["result",4,["error"]],["error",4]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["keypair",4]],["boxed",3]],null,[[],["pubsubmessage",4]],[[],["peerid",3]],[[],["protocol",4]],[[],["multiaddr",3]],[[],["topic",3]],[[]],[[]],[[]],[[]],[[]],[[["peerid",3]],["ordering",4]],[[["multiaddr",3]],["ordering",4]],[[["topic",3]],["ordering",4]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[],[["result",4,["multiaddr"]],["multiaddr",3]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["multiaddr",3]],[[]],[[]],[[["multiaddr",3]],["bool",15]],[[["peerid",3]],["bool",15]],[[["protocol",4]],["bool",15]],[[["multiaddr",3]],["bool",15]],[[["topic",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["publickey",4]],["peerid",3]],[[]],[[["publickey",4]],["peerid",3]],[[["ipv6addr",3]],["protocol",4]],[[["ipv4addr",3]],["protocol",4]],[[["ipaddr",4]],["protocol",4]],[[]],[[["ipv4addr",3]],["multiaddr",3]],[[["protocol",4]],["multiaddr",3]],[[["ipv6addr",3]],["multiaddr",3]],[[]],[[["ipaddr",4]],["multiaddr",3]],[[]],[[],[["peerid",3],["error",4],["result",4,["peerid","error"]]]],[[],[["result",4,["error"]],["error",4]]],[[],["multiaddr",3]],[[["uint",3,["uint","b0"]],["multihash",3,["uint"]]],[["result",4,["peerid","multihash"]],["peerid",3],["multihash",3,["uint"]]]],[[["publickey",4]],["peerid",3]],[[["str",15]],[["result",4,["peerid"]],["peerid",3]]],[[["str",15]],[["error",4],["result",4,["multiaddr","error"]],["multiaddr",3]]],[[],[["result",4,["protocol","error"]],["protocol",4],["error",4]]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[["path",3]],[["keypair",4],["option",4,["keypair"]]]],[[]],[[]],[[],["topichash",3]],null,[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[["publickey",4]],[["option",4,["bool"]],["bool",15]]],[[],["iter",3]],null,[[],["usize",15]],null,null,[[["peerid",3]],["bool",15]],[[["protocol",4]],["bool",15]],[[["multiaddr",3]],["bool",15]],[[["topic",3]],["bool",15]],[[],[["receiver",3,["networkevent"]],["networkevent",4]]],[[],[["sender",3,["networkmessage"]],["networkmessage",4]]],[[["str",15],["keypair",4],["libp2pconfig",3],["chainstore",3],["arc",3,["chainstore"]]]],[[],["topic",3]],[[["peerid",3]],[["option",4,["ordering"]],["ordering",4]]],[[["multiaddr",3]],[["option",4,["ordering"]],["ordering",4]]],[[["topic",3]],[["option",4,["ordering"]],["ordering",4]]],[[],[["option",4,["protocol"]],["protocol",4]]],[[]],[[["protocol",4]]],[[],["peerid",3]],[[["usize",15]],[["option",4,["multiaddr"]],["multiaddr",3]]],null,[[]],[[],["result",4]],null,[[],["string",3]],[[],[["vec",3,["u8","global"]],["u8",15],["global",3]]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],[["vec",3,["u8","global"]],["u8",15],["global",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["uint",3,["uint","b0"]],["multihash",3,["uint"]]],[["result",4,["peerid"]],["peerid",3]]],[[["vec",3,["u8","global"]],["u8",15],["global",3]],[["result",4,["peerid"]],["peerid",3]]],[[],["result",4]],[[["str",15]],[["error",4],["result",4,["multiaddr","error"]],["multiaddr",3]]],[[["string",3]],[["error",4],["result",4,["multiaddr","error"]],["multiaddr",3]]],[[["vec",3,["u8","global"]],["u8",15],["global",3]],[["error",4],["result",4,["multiaddr","error"]],["multiaddr",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["protocol",4]],["multiaddr",3]],[[["usize",15]],["multiaddr",3]],[[],[["result",4,["error"]],["error",4]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["chainexchangerequest",3]],[[],["chainexchangeresponsestatus",4]],[[],["chainexchangeresponse",3]],[[],["compactedmessages",3]],[[],["tipsetbundle",3]],[[],["chainexchangeprotocolname",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["tipsetbundle",3]],[[],["chainexchangeprotocolname",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["chainexchangerequest",3]],["bool",15]],[[["chainexchangeresponsestatus",4]],["bool",15]],[[["chainexchangeresponse",3]],["bool",15]],[[["compactedmessages",3]],["bool",15]],[[["tipsetbundle",3]],["bool",15]],[[["chainexchangeprotocolname",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["vec",3],["result",4,["vec","string"]],["string",3]]],[[["chainstore",3],["chainexchangerequest",3]]],null,null,[[["chainexchangerequest",3]],["bool",15]],[[["chainexchangeresponsestatus",4]],["bool",15]],[[["chainexchangeresponse",3]],["bool",15]],[[["compactedmessages",3]],["bool",15]],[[["tipsetbundle",3]],["bool",15]],null,[[]],null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["tipsetbundle",3]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["hellorequest",3]],[[],["helloresponse",3]],[[],["helloprotocolname",3]],[[]],[[]],[[]],[[],["helloprotocolname",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[],["result",4]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["hellorequest",3]],["bool",15]],[[["helloresponse",3]],["bool",15]],[[["helloprotocolname",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],null,null,null,null,[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[["hellorequest",3]],["bool",15]],[[["helloresponse",3]],["bool",15]],[[]],null,[[],["result",4]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["cborrequestresponse",3]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[]],[[["outboundfailure",4]]],[[]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[],[["box",3,["future"]],["pin",3,["box"]]]],[[],[["box",3,["future"]],["pin",3,["box"]]]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[],[["pin",3,["box"]],["box",3,["future"]]]],[[],[["pin",3,["box"]],["box",3,["future"]]]]],"p":[[4,"NetworkEvent"],[4,"NetworkMessage"],[4,"PubsubMessage"],[4,"Protocol"],[4,"NetRPCMethods"],[3,"Multiaddr"],[3,"PeerId"],[3,"Libp2pConfig"],[3,"Libp2pService"],[3,"Topic"],[13,"ChainExchangeRequest"],[13,"BitswapBlock"],[13,"PubsubMessage"],[13,"HelloRequest"],[13,"BitswapRequest"],[13,"PubsubMessage"],[13,"JSONRPCRequest"],[13,"ChainExchangeRequest"],[13,"HelloRequest"],[4,"ChainExchangeResponseStatus"],[3,"TipsetBundle"],[3,"CompactedMessages"],[3,"ChainExchangeRequest"],[3,"ChainExchangeResponse"],[3,"ChainExchangeProtocolName"],[3,"HelloResponse"],[3,"HelloRequest"],[3,"HelloProtocolName"],[4,"RequestResponseError"],[3,"CborRequestResponse"]]},\
"forest_message":{"doc":"","t":[8,0,10,10,10,10,0,10,10,10,10,10,10,10,10,0,10,0,10,4,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,12,11,11,11,12,11,11,0,11,12,11,11,11,11,11,11,12,12,3,3,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,0,5,11,11,11,11,11,11,11,11,0,11,11,5,5,5,5,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,12,3,3,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,0,11,11,5,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,12,11,11,12,11,11,11,11,11,0,11,11,12,11,11,11,12,11,11,11,12,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,12,12,3,3,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,0,11,11,5,5],"n":["Message","chain_message","from","gas_fee_cap","gas_limit","gas_premium","message_receipt","method_num","params","required_funds","sequence","set_gas_fee_cap","set_gas_limit","set_gas_premium","set_sequence","signed_message","to","unsigned_message","value","ChainMessage","Signed","Unsigned","borrow","borrow_mut","cid","clone","clone_into","deref","deref_mut","deserialize","drop","fmt","from","from","gas_fee_cap","gas_limit","gas_premium","hash","init","into","message","method_num","params","required_funds","sequence","serialize","set_gas_fee_cap","set_gas_limit","set_gas_premium","set_sequence","to","to_owned","try_from","try_into","type_id","value","vzip","MessageReceipt","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","exit_code","fmt","from","from","gas_used","init","into","json","ne","return_data","serialize","to_owned","try_from","try_into","type_id","vzip","0","0","MessageReceiptJson","MessageReceiptJsonRef","borrow","borrow","borrow_mut","borrow_mut","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","from","from","from","init","init","into","into","opt","serialize","serialize","serialize","try_from","try_from","try_into","try_into","type_id","type_id","vec","vzip","vzip","deserialize","serialize","deserialize","serialize","SignedMessage","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","fmt","from","from","from","gas_fee_cap","gas_limit","gas_premium","hash","init","into","into_message","is_bls","is_secp256k1","json","marshal_cbor","message","message","method_num","ne","new","new_from_parts","params","required_funds","sequence","serialize","set_gas_fee_cap","set_gas_limit","set_gas_premium","set_sequence","signature","signature","to","to_owned","try_from","try_into","type_id","value","verify","vzip","0","0","SignedMessageJson","SignedMessageJsonRef","borrow","borrow","borrow_mut","borrow_mut","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","from","from","from","init","init","into","into","serialize","serialize","serialize","try_from","try_from","try_into","try_into","type_id","type_id","vec","vzip","vzip","deserialize","serialize","MessageBuilder","UnsignedMessage","borrow","borrow","borrow_mut","borrow_mut","build","builder","clone","clone","clone_into","clone_into","default","deref","deref","deref_mut","deref_mut","deserialize","drop","drop","eq","fmt","from","from","from","from","from","from","gas_fee_cap","gas_fee_cap","gas_fee_cap","gas_limit","gas_limit","gas_limit","gas_premium","gas_premium","gas_premium","hash","init","init","into","into","json","method_num","method_num","method_num","ne","params","params","params","required_funds","sequence","sequence","sequence","serialize","set_gas_fee_cap","set_gas_limit","set_gas_premium","set_sequence","to","to","to","to_owned","to_owned","to_signing_bytes","try_from","try_from","try_into","try_into","type_id","type_id","valid_for_block_inclusion","value","value","value","version","version","vzip","vzip","0","0","UnsignedMessageJson","UnsignedMessageJsonRef","borrow","borrow","borrow_mut","borrow_mut","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","fmt","from","from","from","init","init","into","into","serialize","serialize","serialize","try_from","try_from","try_into","try_into","type_id","type_id","vec","vzip","vzip","deserialize","serialize"],"q":["forest_message","","","","","","","","","","","","","","","","","","","forest_message::chain_message","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","forest_message::message_receipt","","","","","","","","","","","","","","","","","","","","","","","","","","forest_message::message_receipt::json","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","forest_message::message_receipt::json::opt","","forest_message::message_receipt::json::vec","","forest_message::signed_message","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","forest_message::signed_message::json","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","forest_message::signed_message::json::vec","","forest_message::unsigned_message","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","forest_message::unsigned_message::json","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","forest_message::unsigned_message::json::vec",""],"d":["Message interface to interact with Signed and unsigned …","","Returns the from address of the message.","gets gas fee cap for the message.","Returns the gas limit for the message.","gets gas premium for the message.","","Returns the method number to be called.","Returns the encoded parameters for the method call.","Returns the required funds for the message.","Returns the message sequence or nonce.","sets the gas fee cap.","sets the gas limit for the message.","sets the gas premium.","sets a new sequence to the message.","","Returns the destination address of the message.","","Returns the amount sent in message.","Enum to encpasulate signed and unsigned messages. Useful …","","","","","Returns the content identifier of the raw block of data …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Result of a state transition from a message","","","","","","","","","","","","","","","","","","","","","","","","","","","","Wrapper for serializing and deserializing a SignedMessage …","Wrapper for serializing a SignedMessage reference to JSON.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Represents a wrapped message with signature bytes.","","","","","","","","","","","","","","","","","","","","Consumes self and returns it’s unsigned message.","Checks if the signed message is a BLS message.","Checks if the signed message is a Secp256k1 message.","","","Returns reference to the unsigned message.","","","","Generate new signed message from an unsigned message and …","Generate a new signed message from fields.","","","","","","","","","Returns signature of the signed message.","","","","","","","","Verifies that the from address of the message generated …","","","","Wrapper for serializing and deserializing a SignedMessage …","Wrapper for serializing a SignedMessage reference to JSON.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Builder for <code>UnsignedMessage</code>.","Default Unsigned VM message type which includes all data …","","","","","Builds a new <code>UnsignedMessage</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Helper function to convert the message into signing bytes.…","","","","","","","Semantic validation and validates the message has enough …","","","","","","","","","","Wrapper for serializing and deserializing a …","Wrapper for serializing a UnsignedMessage reference to …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,0,1,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,3,3,3,3,3,3,3,3,4,5,0,0,4,5,4,5,4,5,4,5,0,4,4,5,4,4,5,4,5,4,5,0,0,4,5,4,5,4,5,4,5,0,4,5,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,8,0,0,7,8,7,8,7,8,7,8,0,7,7,8,7,7,8,7,8,7,8,0,7,8,7,8,7,8,7,8,0,7,8,0,0,0,0,9,10,9,10,9,10,9,10,9,10,9,9,10,9,10,10,9,10,10,10,9,9,10,10,10,10,9,10,10,9,10,10,9,10,10,10,9,10,9,10,0,9,10,10,10,9,10,10,10,9,10,10,10,10,10,10,10,9,10,10,9,10,10,9,10,9,10,9,10,10,9,10,10,9,10,9,10,11,12,0,0,11,12,11,12,11,12,11,12,0,11,11,12,11,11,11,12,11,12,11,12,0,11,12,11,12,11,12,11,12,0,11,12,0,0],"f":[null,null,[[],["address",3]],[[],["tokenamount",6]],[[],["i64",15]],[[],["tokenamount",6]],null,[[],["methodnum",6]],[[],["serialized",3]],[[],["tokenamount",6]],[[],["u64",15]],[[["tokenamount",6]]],[[["i64",15]]],[[["tokenamount",6]]],[[["u64",15]]],null,[[],["address",3]],null,[[],["tokenamount",6]],null,null,null,[[]],[[]],[[],[["error",3],["cid",3],["result",4,["cid","error"]]]],[[],["chainmessage",4]],[[]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[],["address",3]],[[]],[[],["tokenamount",6]],[[],["i64",15]],[[],["tokenamount",6]],[[]],[[],["usize",15]],[[]],[[],["unsignedmessage",3]],[[],["methodnum",6]],[[],["serialized",3]],[[],["tokenamount",6]],[[],["u64",15]],[[],["result",4]],[[["tokenamount",6]]],[[["i64",15]]],[[["tokenamount",6]]],[[["u64",15]]],[[],["address",3]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["tokenamount",6]],[[]],null,[[]],[[]],[[],["messagereceipt",3]],[[]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[["usize",15]]],[[["messagereceipt",3]],["bool",15]],null,[[["formatter",3]],["result",6]],[[["messagereceiptjson",3]]],[[]],null,[[],["usize",15]],[[]],null,[[["messagereceipt",3]],["bool",15]],null,[[],["result",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],[["messagereceipt",3],["result",4,["messagereceipt"]]]],[[],["result",4]],[[["usize",15]]],[[["usize",15]]],[[["messagereceipt",3]]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],null,[[["messagereceipt",3]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,[[]],[[]],[[],[["option",4,["messagereceipt"]],["result",4,["option"]]]],[[["option",4]],["result",4]],[[],[["result",4,["vec"]],["vec",3,["messagereceipt"]]]],[[],["result",4]],null,[[]],[[]],[[],["signedmessage",3]],[[]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[["usize",15]]],[[["signedmessage",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["signedmessagejson",3]]],[[]],[[],["address",3]],[[],["tokenamount",6]],[[],["i64",15]],[[],["tokenamount",6]],[[]],[[],["usize",15]],[[]],[[],["unsignedmessage",3]],[[],["bool",15]],[[],["bool",15]],null,[[],[["result",4,["vec","error"]],["vec",3,["u8"]],["error",3]]],[[],["unsignedmessage",3]],null,[[],["methodnum",6]],[[["signedmessage",3]],["bool",15]],[[["unsignedmessage",3]],[["result",4,["cryptoerror"]],["cryptoerror",4]]],[[["signature",3],["unsignedmessage",3]],[["result",4,["signedmessage","string"]],["string",3],["signedmessage",3]]],[[],["serialized",3]],[[],["tokenamount",6]],[[],["u64",15]],[[],["result",4]],[[["tokenamount",6]]],[[["i64",15]]],[[["tokenamount",6]]],[[["u64",15]]],[[],["signature",3]],null,[[],["address",3]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["tokenamount",6]],[[],[["string",3],["result",4,["string"]]]],[[]],null,null,null,null,[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],[["result",4,["signedmessage"]],["signedmessage",3]]],[[],["result",4]],[[["usize",15]]],[[["usize",15]]],[[]],[[["signedmessage",3]]],[[]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[["signedmessage",3]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,[[]],[[]],[[],[["result",4,["vec"]],["vec",3,["signedmessage"]]]],[[],["result",4]],null,null,[[]],[[]],[[]],[[]],[[],[["result",4,["unsignedmessage","string"]],["string",3],["unsignedmessage",3]]],[[],["messagebuilder",3]],[[],["messagebuilder",3]],[[],["unsignedmessage",3]],[[]],[[]],[[],["messagebuilder",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[["usize",15]]],[[["usize",15]]],[[["unsignedmessage",3]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[["address",3]]],[[["unsignedmessagejson",3]]],[[]],[[],["address",3]],null,[[["tokenamount",6]]],[[],["tokenamount",6]],null,[[["i64",15]]],[[],["i64",15]],null,[[["tokenamount",6]]],[[],["tokenamount",6]],null,[[]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],null,[[["methodnum",6]]],[[],["methodnum",6]],null,[[["unsignedmessage",3]],["bool",15]],[[["serialized",3]]],[[],["serialized",3]],null,[[],["tokenamount",6]],[[["u64",15]]],[[],["u64",15]],null,[[],["result",4]],[[["tokenamount",6]]],[[["i64",15]]],[[["tokenamount",6]]],[[["u64",15]]],[[["address",3]]],[[],["address",3]],null,[[]],[[]],[[],[["vec",3,["u8"]],["u8",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[["networkversion",4],["i64",15]],[["string",3],["result",4,["string"]]]],[[["tokenamount",6]]],[[],["tokenamount",6]],null,[[["i64",15]]],null,[[]],[[]],null,null,null,null,[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],[["result",4,["unsignedmessage"]],["unsignedmessage",3]]],[[],["result",4]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[]],[[["unsignedmessage",3]]],[[]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[["unsignedmessage",3]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,[[]],[[]],[[],[["result",4,["vec"]],["vec",3,["unsignedmessage"]]]],[[],["result",4]]],"p":[[8,"Message"],[4,"ChainMessage"],[3,"MessageReceipt"],[3,"MessageReceiptJson"],[3,"MessageReceiptJsonRef"],[3,"SignedMessage"],[3,"SignedMessageJson"],[3,"SignedMessageJsonRef"],[3,"MessageBuilder"],[3,"UnsignedMessage"],[3,"UnsignedMessageJson"],[3,"UnsignedMessageJsonRef"]]},\
"forest_runtime":{"doc":"","t":[8,3,4,13,8,13,8,8,13,10,11,11,11,11,11,10,10,11,11,11,11,5,11,10,10,10,10,10,11,11,11,11,11,11,11,12,12,11,11,10,10,10,11,11,11,11,11,10,10,10,10,10,10,10,10,10,12,11,11,10,10,11,11,11,11,11,11,10,10,10,10,10,10,10,10,10,11,11],"n":["ActorCode","ConsensusFault","ConsensusFaultType","DoubleForkMining","MessageInfo","ParentGrinding","Runtime","Syscalls","TimeOffsetMining","base_fee","batch_verify_seals","borrow","borrow","borrow_mut","borrow_mut","caller","charge_gas","clone","clone","clone_into","clone_into","compute_unsealed_sector_cid","compute_unsealed_sector_cid","create","create_actor","curr_epoch","current_balance","delete_actor","deref","deref","deref_mut","deref_mut","deserialize_params","drop","drop","epoch","fault_type","from","from","get_actor_code_cid","get_randomness_from_beacon","get_randomness_from_tickets","hash_blake2b","init","init","into","into","invoke_method","message","network_version","new_actor_address","receiver","resolve_address","send","state","store","target","to_owned","to_owned","total_fil_circ_supply","transaction","try_from","try_from","try_into","try_into","type_id","type_id","validate_immediate_caller_accept_any","validate_immediate_caller_is","validate_immediate_caller_type","value_received","verify_aggregate_seals","verify_consensus_fault","verify_post","verify_seal","verify_signature","vzip","vzip"],"q":["forest_runtime","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Interface for invoking methods on an Actor","Result of checking two headers for a consensus fault.","Consensus fault types in VM.","","Message information available to the actor about …","","Runtime is the VM’s internal runtime object. this is …","Pure functions implemented as primitives by the runtime.","","","","","","","","The address of the immediate calling actor. Always an …","ChargeGas charges specified amount of <code>gas</code> for execution. …","","","","","Computes sector Cid from proof type and pieces for …","Computes an unsealed sector CID (CommD) from its …","Initializes the state object. This is only valid in a …","Creates an actor with code <code>codeID</code> and address <code>address</code>, …","The current chain epoch number. The genesis block has …","The balance of the receiver.","Deletes the executing actor from the state tree, …","","","","","This function is a workaround for go-implementation’s …","","","Epoch of the fault, which is the higher epoch of the two …","Type of fault.","","","Look up the code ID at an actor address.","Randomness returns a (pseudo)random byte array drawing …","Randomness returns a (pseudo)random byte array drawing …","Hashes input data using blake2b with 256 bit output.","","","","","Invokes method with runtime on the actor’s code. Method …","Information related to the current message being executed.","The network protocol version number at the current epoch.","Computes an address for a new actor. The returned address …","The address of the actor receiving the message. Always an …","Resolves an address of any protocol to an ID address (via …","Sends a message to another actor, returning the exit code …","Loads a readonly copy of the state of the receiver into …","Returns reference to blockstore","Address of the miner at fault (always an ID address).","","","Returns the total token supply in circulation at the …","Loads a mutable version of the state into the <code>obj</code> …","","","","","","","Validates the caller against some predicate. Exported …","","","The value attached to the message being processed, …","","Verifies that two block headers provide proof of a …","Verifies a window proof of spacetime.","Verifies a sector seal proof.","Verifies that a signature is valid for an address and …","",""],"i":[0,0,0,1,0,1,0,0,1,2,3,4,1,4,1,5,2,4,1,4,1,0,3,2,2,2,2,2,4,1,4,1,2,4,1,4,4,4,1,2,2,2,3,4,1,4,1,6,2,2,2,5,2,2,2,2,4,4,1,2,2,4,1,4,1,4,1,2,2,2,5,3,3,3,3,3,4,1],"f":[null,null,null,null,null,null,null,null,null,[[],["tokenamount",6]],[[],[["result",4,["hashmap","box"]],["box",3,["stderror"]],["hashmap",3,["address","vec"]]]],[[]],[[]],[[]],[[]],[[],["address",3]],[[["i64",15],["str",15]],[["result",4,["actorerror"]],["actorerror",3]]],[[],["consensusfault",3]],[[],["consensusfaulttype",4]],[[]],[[]],[[["registeredsealproof",4]],[["box",3,["stderror"]],["result",4,["cid","box"]],["cid",3]]],[[["registeredsealproof",4]],[["box",3,["stderror"]],["result",4,["cid","box"]],["cid",3]]],[[],[["result",4,["actorerror"]],["actorerror",3]]],[[["cid",3],["address",3]],[["result",4,["actorerror"]],["actorerror",3]]],[[],["chainepoch",6]],[[],[["tokenamount",6],["result",4,["tokenamount","actorerror"]],["actorerror",3]]],[[["address",3]],[["result",4,["actorerror"]],["actorerror",3]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["serialized",3]],[["actorerror",3],["deserializeowned",8],["result",4,["actorerror"]]]],[[["usize",15]]],[[["usize",15]]],null,null,[[]],[[]],[[["address",3]],[["option",4,["cid"]],["result",4,["option","actorerror"]],["actorerror",3]]],[[["domainseparationtag",4],["chainepoch",6]],[["randomness",3],["result",4,["randomness","actorerror"]],["actorerror",3]]],[[["domainseparationtag",4],["chainepoch",6]],[["randomness",3],["result",4,["randomness","actorerror"]],["actorerror",3]]],[[],[["box",3,["stderror"]],["result",4,["box"]]]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[["methodnum",6],["serialized",3]],[["actorerror",3],["result",4,["serialized","actorerror"]],["serialized",3]]],[[],["messageinfo",8]],[[],["networkversion",4]],[[],[["actorerror",3],["address",3],["result",4,["address","actorerror"]]]],[[],["address",3]],[[["address",3]],[["option",4,["address"]],["actorerror",3],["result",4,["option","actorerror"]]]],[[["tokenamount",6],["address",3],["methodnum",6],["serialized",3]],[["actorerror",3],["result",4,["serialized","actorerror"]],["serialized",3]]],[[],[["result",4,["actorerror"]],["cbor",8],["actorerror",3]]],[[]],null,[[]],[[]],[[],[["tokenamount",6],["result",4,["tokenamount","actorerror"]],["actorerror",3]]],[[],[["result",4,["actorerror"]],["actorerror",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],[["result",4,["actorerror"]],["actorerror",3]]],[[],[["result",4,["actorerror"]],["actorerror",3]]],[[],[["result",4,["actorerror"]],["actorerror",3]]],[[],["tokenamount",6]],[[["aggregatesealverifyproofandinfos",3]],[["box",3,["stderror"]],["result",4,["box"]]]],[[],[["result",4,["option","box"]],["box",3,["stderror"]],["option",4,["consensusfault"]]]],[[["windowpostverifyinfo",3]],[["box",3,["stderror"]],["result",4,["box"]]]],[[["sealverifyinfo",3]],[["box",3,["stderror"]],["result",4,["box"]]]],[[["signature",3],["address",3]],[["box",3,["stderror"]],["result",4,["box"]]]],[[]],[[]]],"p":[[4,"ConsensusFaultType"],[8,"Runtime"],[8,"Syscalls"],[3,"ConsensusFault"],[8,"MessageInfo"],[8,"ActorCode"]]},\
"forest_vm":{"doc":"","t":[3,3,6,3,3,13,13,13,13,13,13,13,13,4,17,17,6,13,3,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,6,14,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["ActorError","ActorState","DealID","EMPTY_ARR_BYTES","EMPTY_ARR_CID","ErrForbidden","ErrIllegalArgument","ErrIllegalState","ErrInsufficientFunds","ErrNotFound","ErrPlaceholder","ErrSerialization","ErrTooManyProveCommits","ExitCode","METHOD_CONSTRUCTOR","METHOD_SEND","MethodNum","Ok","Serialized","SysErrActorPanic","SysErrForbidden","SysErrIllegalActor","SysErrIllegalArgument","SysErrInsufficientFunds","SysErrInvalidMethod","SysErrInvalidReceiver","SysErrOutOfGas","SysErrReserved2","SysErrReserved3","SysErrReserved4","SysErrReserved5","SysErrReserved6","SysErrSenderInvalid","SysErrSenderStateInvalid","TokenAmount","actor_error","balance","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bytes","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","code","deduct_funds","default","deposit_funds","deref","deref","deref","deserialize","deserialize","deserialize","deserialize","eq","eq","eq","eq","exit_code","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_i64","from_u64","hash","initialize","initialize","into","into","into","into","into","into","is_fatal","is_ok","is_success","msg","ne","ne","ne","new","new","new","new_fatal","sequence","serialize","serialize","serialize","serialize","state","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","wrap"],"q":["forest_vm","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["The error type that gets returned by actor method calls.","State of all actor implementations.","Deal identifier used in market and miner actors","Cbor bytes of an empty array serialized.","Cid of the empty array Cbor bytes (<code>EMPTY_ARR_BYTES</code>).","Indicates an action is disallowed.","Indicates a method parameter is invalid.","Indicates an actor’s internal state is invalid.","Indicates a balance of funds is insufficient.","Indicates a requested resource does not exist.","","Indicates de/serialization failure within actor code.","Power actor specific exit code.","ExitCode defines the exit code from the VM execution.","Base actor constructor method.","Base actor send method.","Method number indicator for calling actor methods.","","Serialized bytes to be used as parameters into actor …","Used for catching panics currently. (marked as …","Indicates a message execution is forbidden for the caller.","Indicates actor code performed a disallowed operation. …","Indicates an invalid argument passed to a runtime method.","Indicates a message invocation out of sequence.","Indicates failure to find a method in an actor.","Indicates a message sender has insufficient funds for a …","Indicates message execution (including subcalls) used …","Reserved exit codes, do not use.","","","","","Indicates failure to find an actor in the state tree.","Indicates failure to find the code for an actor.","Token type to be used within the VM.","Convenience macro for generating Actor Errors","Tokens available to the actor.","","","","","","","","","","","","","Returns serialized bytes.","","","","","","","","","Link to code for the actor.","Safely deducts funds from an Actor","","Deposits funds to an Actor","","","","","","","Deserializes the serialized bytes into a defined type.","","","","","Returns the exit code of the error.","","","","","","","","","","","","","","","","","","","","","","","","","Returns true if error is fatal.","Returns true when the exit code is <code>Ok</code>.","returns true if the exit code was a success","Error message of the actor error.","","","","Constructor for actor state","","Constructor if data is encoded already","","Sequence of the actor.","","","Contructor for encoding Cbor encodable structure.","","Link to the state of the actor.","","","","","","","","","","","","","","","","","","","","","","","","Prefix error message with a string message."],"i":[0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,2,2,3,1,4,5,6,2,3,1,4,5,6,4,2,3,1,4,2,3,1,4,2,2,4,2,4,5,6,2,1,4,4,2,3,1,4,3,2,3,3,1,4,2,3,3,3,1,4,5,6,1,1,4,5,6,2,3,1,4,5,6,3,3,1,3,2,3,4,2,3,4,3,2,2,1,4,4,2,2,3,1,4,3,2,3,1,4,5,6,2,3,1,4,5,6,2,3,1,4,5,6,3],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["actorstate",3]],[[],["actorerror",3]],[[],["exitcode",4]],[[],["serialized",3]],[[]],[[]],[[]],[[]],null,[[["tokenamount",6]],[["string",3],["result",4,["string"]]]],[[],["serialized",3]],[[["tokenamount",6]]],[[]],[[],["vec",3]],[[],["cid",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],[["result",4,["encodingerror"]],["deserializeowned",8],["encodingerror",3]]],[[["actorstate",3]],["bool",15]],[[["actorerror",3]],["bool",15]],[[["exitcode",4]],["bool",15]],[[["serialized",3]],["bool",15]],[[],["exitcode",4]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["encodingerror",3]]],[[]],[[["cborerror",3]]],[[]],[[]],[[]],[[]],[[["i64",15]],["option",4]],[[["u64",15]],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["str",15]],[[["actorstate",3]],["bool",15]],[[["actorerror",3]],["bool",15]],[[["serialized",3]],["bool",15]],[[["cid",3],["tokenamount",6],["u64",15]]],[[["string",3],["exitcode",4]]],[[["vec",3,["u8"]],["u8",15]]],[[["string",3]]],null,[[],["result",4]],[[],["result",4]],[[["serialize",8]],[["result",4,["encodingerror"]],["encodingerror",3]]],[[],["result",4]],null,[[]],[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]]],"p":[[4,"ExitCode"],[3,"ActorState"],[3,"ActorError"],[3,"Serialized"],[3,"EMPTY_ARR_BYTES"],[3,"EMPTY_ARR_CID"]]},\
"genesis":{"doc":"","t":[5,5],"n":["import_chain","initialize_genesis"],"q":["genesis",""],"d":["Import a chain from a CAR file. If the snapshot boolean …","Uses an optional file path or the default genesis to …"],"i":[0,0],"f":[[[["option",4,["i64"]],["bool",15],["str",15],["arc",3],["i64",15]]],[[["option",4,["string"]],["statemanager",3],["string",3]]]],"p":[]},\
"interpreter":{"doc":"","t":[3,3,8,3,3,8,3,8,3,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,5,11,11,5,11,11,10,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12],"n":["ApplyRet","BlockMessages","CircSupplyCalc","DefaultRuntime","GasCharge","LookbackStateGetter","PriceList","Rand","VM","act_error","apply_block_messages","apply_implicit_message","apply_message","batch_verify_seals","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","charge_gas","clone","clone","clone_into","clone_into","compute_gas","compute_unsealed_sector_cid","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","flush","fmt","fmt","fmt","from","from","from","from","from","from","gas_used","get_beacon_randomness","get_beacon_randomness_looking_forward","get_chain_randomness","get_chain_randomness_looking_forward","get_supply","hash_blake2b","init","init","init","init","init","init","into","into","into","into","into","into","messages","migrate_state","miner","miner_tip","msg_receipt","name","new","new","new","on_chain_message","on_chain_return_value","on_compute_unsealed_sector_cid","on_create_actor","on_delete_actor","on_hashing","on_ipld_get","on_ipld_put","on_method_invocation","on_verify_aggregate_seals","on_verify_consensus_fault","on_verify_post","on_verify_seal","on_verify_signature","penalty","price_list","price_list_by_epoch","register_actor","registered_actors","resolve_to_key_addr","send","state","state_lookback","storage_gas","to_owned","to_owned","total","try_create_account_actor","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","verify_aggregate_seals","verify_consensus_fault","verify_post","verify_seal","verify_signature","vzip","vzip","vzip","vzip","vzip","vzip","win_count"],"q":["interpreter","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Apply message return data.","Contains all messages to process through the VM as well …","Allows generation of the current circulating supply given …","Implementation of the Runtime trait.","Single gas charge in the VM. Contains information about …","Trait to allow VM to retrieve state at an old epoch.","Provides prices for operations in the VM","Randomness provider trait","Interpreter which handles execution of state …","Actor error from the transaction, if one exists.","Apply block messages from a Tipset. Returns the receipts …","Applies single message through vm and returns result from …","Applies the state transition for a single message. …","","","","","","","","","","","","","","Adds to amount of used.","","","","","","","","","","","","","","","","","","","","","","","","","Flush stores in VM and return state root.","","","","","","","","","","Returns gas used by runtime.","Gets 32 bytes of randomness for ChainRand paramaterized …","","Gets 32 bytes of randomness for ChainRand paramaterized …","","Retrieves total circulating supply on the network.","","","","","","","","","","","","","","","Flushes the StateTree and perform a state migration if …","","Tip given to miner from message.","Message receipt for the transaction. This data is stored …","","Constructs a new Runtime","","","Returns the gas required for storing a message of a given …","Returns the gas required for storing the response of a …","Returns gas required for computing unsealed sector Cid.","Returns the gas required for creating an actor.","Returns the gas required for deleting an actor.","Returns gas required for hashing data.","Returns the gas required for storing an object.","Returns the gas required for storing an object.","Returns the gas required when invoking a method.","","Returns gas required for verifying consensus fault.","Returns gas required for PoSt verification.","Returns gas required for seal verification.","Returns gas required for signature verification.","Gas penalty from transaction, if any.","Returns the price list for gas charges within the runtime.","Returns gas price list by Epoch for gas consumption.","Registers an actor that is not part of the set of default …","Gets registered actors that are not part of the set of …","returns the public key type of address (<code>BLS</code>/<code>SECP256K1</code>) of …","Shared logic between the DefaultRuntime and the …","Returns a reference to the VM’s state tree.","Returns a state tree from the given epoch.","","","","Calculates total gas charge based on compute and storage …","creates account actors from only BLS/SECP256K1 addresses.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,1,2,2,2,3,3,4,2,5,6,1,3,4,2,5,6,1,3,5,1,5,1,4,3,3,4,2,5,6,1,3,4,2,5,6,1,3,4,2,5,6,1,2,5,6,1,3,4,2,5,6,1,3,7,7,7,7,8,3,3,4,2,5,6,1,3,4,2,5,6,1,6,2,6,1,1,4,3,4,2,5,5,5,5,5,5,5,5,5,5,5,5,5,5,1,3,0,2,2,0,3,2,9,4,5,1,4,3,3,4,2,5,6,1,3,4,2,5,6,1,3,4,2,5,6,1,3,3,3,3,3,3,4,2,5,6,1,6],"f":[null,null,null,null,null,null,null,null,null,null,[[["chainepoch",6],["option",4],["arc",3]],[["vec",3,["messagereceipt"]],["box",3,["stderror"]],["result",4,["vec","box"]]]],[[["unsignedmessage",3]],["applyret",3]],[[["chainmessage",4]],[["string",3],["applyret",3],["result",4,["applyret","string"]]]],[[],[["hashmap",3,["address","vec"]],["box",3,["stderror"]],["result",4,["hashmap","box"]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["gascharge",3]],[["actorerror",3],["result",4,["actorerror"]]]],[[],["pricelist",3]],[[],["applyret",3]],[[]],[[]],null,[[["registeredsealproof",4]],[["result",4,["cid","box"]],["cid",3],["box",3,["stderror"]]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],[["result",4,["cid","box"]],["cid",3],["box",3,["stderror"]]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["i64",15]],[[["chainepoch",6],["domainseparationtag",4]],[["result",4,["box"]],["box",3,["error"]]]],[[["chainepoch",6],["domainseparationtag",4]],[["result",4,["box"]],["box",3,["error"]]]],[[["chainepoch",6],["domainseparationtag",4]],[["result",4,["box"]],["box",3,["error"]]]],[[["chainepoch",6],["domainseparationtag",4]],[["result",4,["box"]],["box",3,["error"]]]],[[["chainepoch",6],["statetree",3]],[["tokenamount",6],["box",3,["stderror"]],["result",4,["tokenamount","box"]]]],[[],[["result",4,["box"]],["box",3,["stderror"]]]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[["chainepoch",6],["arc",3]],[["option",4,["cid"]],["result",4,["option","box"]],["box",3,["stderror"]]]],null,null,null,null,[[["u64",15],["networkversion",4],["tokenamount",6],["unsignedmessage",3],["hashset",3],["statetree",3],["chainepoch",6],["address",3],["i64",15]],[["result",4,["actorerror"]],["actorerror",3]]],[[["i64",15],["str",15]]],[[["cid",3],["chainepoch",6],["bigint",3]],[["string",3],["result",4,["string"]]]],[[["usize",15]],["gascharge",3]],[[["usize",15]],["gascharge",3]],[[["registeredsealproof",4]],["gascharge",3]],[[],["gascharge",3]],[[],["gascharge",3]],[[["usize",15]],["gascharge",3]],[[],["gascharge",3]],[[["usize",15]],["gascharge",3]],[[["tokenamount",6],["methodnum",6]],["gascharge",3]],[[["aggregatesealverifyproofandinfos",3]],["gascharge",3]],[[],["gascharge",3]],[[["windowpostverifyinfo",3]],["gascharge",3]],[[["sealverifyinfo",3]],["gascharge",3]],[[["signaturetype",4]],["gascharge",3]],null,[[],["pricelist",3]],[[["chainepoch",6]],["pricelist",3]],[[["cid",3]],["bool",15]],[[],["hashset",3]],[[["address",3],["statetree",3]],[["box",3,["stderror"]],["address",3],["result",4,["address","box"]]]],[[["option",4,["gascharge"]],["unsignedmessage",3],["gascharge",3]],[["actorerror",3],["result",4,["serialized","actorerror"]],["serialized",3]]],[[],["statetree",3]],[[["chainepoch",6]],[["box",3,["stderror"]],["result",4,["statetree","box"]],["statetree",3]]],null,[[]],[[]],[[],["i64",15]],[[["address",3]],[["result",4,["actorerror"]],["actorerror",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["aggregatesealverifyproofandinfos",3]],[["result",4,["box"]],["box",3,["stderror"]]]],[[],[["result",4,["option","box"]],["option",4,["consensusfault"]],["box",3,["stderror"]]]],[[["windowpostverifyinfo",3]],[["result",4,["box"]],["box",3,["stderror"]]]],[[["sealverifyinfo",3]],[["result",4,["box"]],["box",3,["stderror"]]]],[[["address",3],["signature",3]],[["result",4,["box"]],["box",3,["stderror"]]]],[[]],[[]],[[]],[[]],[[]],[[]],null],"p":[[3,"ApplyRet"],[3,"VM"],[3,"DefaultRuntime"],[3,"GasCharge"],[3,"PriceList"],[3,"BlockMessages"],[8,"Rand"],[8,"CircSupplyCalc"],[8,"LookbackStateGetter"]]},\
"ipld_amt":{"doc":"AMT crate for use as rust IPLD data structure","t":[3,13,13,13,13,4,13,13,17,13,13,13,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Amt","Cached","Cid","CidNotFound","Dynamic","Error","InvalidVecLength","LinksAndValues","MAX_INDEX","MaxHeight","Other","OutOfRange","ValueMut","batch_delete","batch_set","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","count","delete","deref","deref_mut","eq","flush","fmt","fmt","fmt","for_each","for_each_mut","for_each_while","for_each_while_mut","from","from","from","from","from","from","get","height","into","into","into","load","mark_unchanged","new","new","new_from_iter","new_with_bit_width","set","source","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","value_changed"],"q":["ipld_amt","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Array Mapped Trie allows for the insertion and …","Error when trying to serialize an AMT without a flushed …","Error generating a Cid for data","Cid not found in store error","Dynamic error for when the error needs to be forwarded as …","AMT Error","Serialized vector less than number of bits set","Invalid formatted serialized node.","MaxIndex is the maximum index for elements in the AMT. …","Height of root node is greater than max.","Custom AMT error","Index referenced it above arbitrary max set","A wrapper around a mutable reference to a value in an …","Deletes multiple items from AMT If <code>strict</code> is true, all …","Batch set (naive for now)","","","","","","","Gets count of elements added in the <code>Amt</code>.","Delete item from AMT at index","","","","flush root and return Cid used as key in block store","","","","Iterates over each value in the Amt and runs a function …","Iterates over each value in the Amt and runs a function …","Iterates over each value in the Amt and runs a function …","Iterates over each value in the Amt and runs a function …","","","","","","","Get value at index of AMT","Gets the height of the <code>Amt</code>.","","","","Constructs an AMT with a blockstore and a Cid of the root …","Marks guard as unchanged. This should only be used when …","","Constructor for Root AMT node","Generates an AMT with block store and array of cbor …","Construct new Amt with given bit width.","Set value at index","","","","","","","","","","","",""],"i":[0,1,1,1,1,0,1,1,0,1,1,1,0,2,2,3,2,1,3,2,1,2,2,3,3,2,2,2,1,1,2,2,2,2,3,2,1,1,1,1,2,2,3,2,1,2,3,3,2,2,2,2,1,1,3,2,1,3,2,1,3,2,1,3],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,[[["bool",15]],[["bool",15],["error",4],["result",4,["bool","error"]]]],[[],[["result",4,["error"]],["error",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[["usize",15]],[["error",4],["result",4,["option","error"]],["option",4]]],[[]],[[]],[[],["bool",15]],[[],[["cid",3],["result",4,["cid","error"]],["error",4]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[],[["result",4,["box"]],["box",3,["stderror"]]]],[[],[["result",4,["box"]],["box",3,["stderror"]]]],[[],[["result",4,["box"]],["box",3,["stderror"]]]],[[],[["result",4,["box"]],["box",3,["stderror"]]]],[[]],[[]],[[]],[[["ciderror",4]]],[[["encodingerror",3]]],[[["stderror",8],["box",3,["stderror"]]]],[[["usize",15]],[["option",4],["error",4],["result",4,["option","error"]]]],[[],["usize",15]],[[]],[[]],[[]],[[["cid",3]],[["result",4,["error"]],["error",4]]],[[]],[[]],[[]],[[],[["cid",3],["result",4,["cid","error"]],["error",4]]],[[["usize",15]]],[[["usize",15]],[["result",4,["error"]],["error",4]]],[[],[["option",4,["error"]],["error",8]]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["bool",15]]],"p":[[4,"Error"],[3,"Amt"],[3,"ValueMut"]]},\
"ipld_blockstore":{"doc":"","t":[8,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,5,5],"n":["BlockStore","BufferedBlockStore","borrow","borrow_mut","bulk_delete","bulk_put","bulk_read","bulk_write","delete","exists","flush","fmt","from","get","get_bytes","get_bytes","into","new","put","put_raw","put_raw","read","resolve","try_from","try_into","type_id","write","resolve_cids_recursive","resolve_ipld"],"q":["ipld_blockstore","","","","","","","","","","","","","","","","","","","","","","","","","","","ipld_blockstore::resolve",""],"d":["Wrapper for database to handle inserting and retrieving …","Wrapper around <code>BlockStore</code> to limit and have control over …","","","","Batch put cbor objects into blockstore and returns vector …","","","","","Flushes the buffered cache based on the root node. This …","","","Get typed object from block store by Cid.","Get bytes from block store by Cid.","","","","Put an object in the block store and return the Cid …","Put raw bytes in the block store and return the Cid …","","","This module is used for resolving Cids and Ipld …","","","","","Resolves link to recursively resolved Ipld with no hash …","Resolves Ipld links recursively, building an Ipld …"],"i":[0,0,1,1,1,2,1,1,1,1,1,1,1,2,2,1,1,1,2,2,1,1,0,1,1,1,1,0,0],"f":[null,null,[[]],[[]],[[],[["result",4,["error"]],["error",4]]],[[["code",4]],[["vec",3,["cid"]],["box",3,["stderror"]],["result",4,["vec","box"]]]],[[],[["vec",3,["option"]],["error",4],["result",4,["vec","error"]]]],[[],[["result",4,["error"]],["error",4]]],[[],[["result",4,["error"]],["error",4]]],[[],[["bool",15],["error",4],["result",4,["bool","error"]]]],[[["cid",3]],[["result",4,["box"]],["box",3,["stderror"]]]],[[["formatter",3]],["result",6]],[[]],[[["cid",3]],[["result",4,["option","box"]],["box",3,["stderror"]],["option",4]]],[[["cid",3]],[["result",4,["option","box"]],["box",3,["stderror"]],["option",4,["vec"]]]],[[["cid",3]],[["result",4,["option","box"]],["box",3,["stderror"]],["option",4,["vec"]]]],[[]],[[]],[[["code",4]],[["box",3,["stderror"]],["cid",3],["result",4,["cid","box"]]]],[[["vec",3,["u8"]],["u8",15],["code",4]],[["box",3,["stderror"]],["cid",3],["result",4,["cid","box"]]]],[[["vec",3,["u8"]],["u8",15],["code",4]],[["box",3,["stderror"]],["cid",3],["result",4,["cid","box"]]]],[[],[["error",4],["result",4,["option","error"]],["option",4,["vec"]]]],null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],[["result",4,["error"]],["error",4]]],[[["u64",15],["cid",3],["option",4,["u64"]]],[["result",4,["ipld","box"]],["box",3,["stderror"]],["ipld",4]]],[[["ipld",4],["u64",15],["option",4,["u64"]]],[["result",4,["box"]],["box",3,["stderror"]]]]],"p":[[3,"BufferedBlockStore"],[8,"BlockStore"]]},\
"ipld_hamt":{"doc":"HAMT crate for use as rust IPLD data structure","t":[12,3,13,13,4,3,8,8,13,13,13,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["0","BytesKey","CidNotFound","Dynamic","Error","Hamt","Hash","HashAlgorithm","InvalidHashBitLen","MaxDepth","Other","Sha256","ZeroPointers","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","contains_key","delete","deref","deserialize","eq","eq","equivalent","flush","fmt","fmt","fmt","fmt","fmt","for_each","from","from","from","from","from","from","from","from","from","get","hash","hash","hash","hash","hash_slice","into","into","into","into","is_empty","load","load_with_bit_width","ne","new","new_with_bit_width","partial_cmp","serialize","serialize","set","set_if_absent","set_root","store","to_owned","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id"],"q":["ipld_hamt","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Key type to be used to serialize as byte string instead …","Cid not found in store error","Dynamic error for when the error needs to be forwarded as …","HAMT Error","Implementation of the HAMT data structure for IPLD.","Custom trait to avoid issues like …","Algorithm used as the hasher for the Hamt.","Hash bits does not support greater than 8 bit width","Maximum depth error","Custom HAMT error","Sha256 hashing algorithm used for hashing keys in the …","This should be treated as a fatal error, must have at …","","","","","","","","","","","","","Returns <code>true</code> if a value exists for the given key in the …","Removes a key from the HAMT, returning the value at the …","","","","","","Flush root and return Cid for hamt","","","","","","Iterates over each KV in the Hamt and runs a function on …","","","","","","","","","","Returns a reference to the value corresponding to the key.","","","","","","","","","","Returns true if the HAMT has no entries","Lazily instantiate a hamt from this root Cid.","Lazily instantiate a hamt from this root Cid with a …","","","Construct hamt with a bit width","","","","Inserts a key-value pair into the HAMT.","Inserts a key-value pair into the HAMT only if that key …","Sets the root based on the Cid of the root node using the …","Returns a reference to the underlying store of the Hamt.","","","","","","","","","","","","","",""],"i":[1,0,2,2,0,0,0,0,2,2,2,0,2,2,3,4,1,1,1,2,3,4,1,1,1,3,3,1,1,3,1,1,3,2,2,3,4,1,3,2,2,2,3,4,1,1,1,1,3,5,6,4,1,6,2,3,4,1,3,3,3,1,3,3,1,3,1,3,3,3,3,1,2,2,3,4,1,2,3,4,1,2,3,4,1],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[],["vec",3]],[[]],[[]],[[]],[[]],[[],["byteskey",3]],[[]],[[],[["error",4],["result",4,["bool","error"]],["bool",15]]],[[],[["option",4],["result",4,["option","error"]],["error",4]]],[[]],[[],[["byteskey",3],["result",4,["byteskey"]]]],[[],["bool",15]],[[["byteskey",3]],["bool",15]],[[],["bool",15]],[[],[["result",4,["cid","error"]],["error",4],["cid",3]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[],[["result",4,["box"]],["box",3,["stderror"]]]],[[["box",3,["stderror"]],["stderror",8]]],[[]],[[["encodingerror",3]]],[[]],[[]],[[]],[[],["byteskey",3]],[[["u8",15],["vec",3,["u8","global"]],["global",3]],["byteskey",3]],[[["str",15]],["byteskey",3]],[[],[["error",4],["option",4],["result",4,["option","error"]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[["cid",3]],[["result",4,["error"]],["error",4]]],[[["cid",3],["u32",15]],[["result",4,["error"]],["error",4]]],[[["byteskey",3]],["bool",15]],[[]],[[["u32",15]]],[[["byteskey",3]],[["option",4,["ordering"]],["ordering",4]]],[[],["result",4]],[[],["result",4]],[[],[["error",4],["result",4,["option","error"]],["option",4]]],[[],[["error",4],["result",4,["bool","error"]],["bool",15]]],[[["cid",3]],[["result",4,["error"]],["error",4]]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[3,"BytesKey"],[4,"Error"],[3,"Hamt"],[4,"Sha256"],[8,"HashAlgorithm"],[8,"Hash"]]},\
"key_management":{"doc":"","t":[13,13,17,13,4,13,4,13,17,3,13,3,13,13,13,3,4,13,13,13,13,3,8,3,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,5,10,11,5,11,11,5,11,11,11,11,11,11,11,11,11,0,12,11,10,11,5,11,11,11,11,11,11,11,11,11,11,5,11,11,12,10,11,10,11,11,11,11,11,5,11,11,11,11,11,11,5,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,3,3,11,11,11,11,11,11,5,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11],"n":["ConfigurationError","DecryptionError","ENCRYPTED_KEYSTORE_NAME","Encrypted","EncryptedKeyStoreError","EncryptionError","Error","IO","KEYSTORE_NAME","Key","KeyExists","KeyInfo","KeyInfo","KeyInfoConversion","KeyNotExists","KeyStore","KeyStoreConfig","Memory","NoKey","Other","Persistent","PersistentKeyInfo","Store","Wallet","address","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","deserialize","deserialize","deserialize","eq","eq","eq","eq","eq","eq","export","export_key_info","find_key","find_key","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","generate","generate_addr","generate_key","get","get","get_default","get_default","has_key","import","import","into","into","into","into","into","into","into","into","json","key_info","key_type","list","list","list_addrs","list_addrs","ne","ne","ne","ne","ne","ne","new","new","new","new_address","new_from_keys","private_key","public_key","put","put","remove","remove","serialize","serialize","serialize","set_default","sign","sign","to_owned","to_owned","to_owned","to_owned","to_owned","to_public","to_string","to_string","try_find","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","0","0","KeyInfoJson","KeyInfoJsonRef","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","deserialize","deserialize","from","from","into","into","serialize","serialize","serialize","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip"],"q":["key_managementkey_management::json","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Unlock called without <code>encrypted_keystore</code> being enabled in …","Possibly indicates incorrect passphrase","","","","An error occured while encrypting keys","","","","A Key, this contains a key_info, address, and public_key …","Key already exists in keystore","KeyInfo struct, this contains the type of key (stored as …","info that corresponds to key does not exist","","","KeyStore struct, this contains a HashMap that is a set of …","","","","","","","KeyStore struct, this contains a HashMap that is a set of …","This is a Wallet, it contains 2 HashMaps:","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return the KeyInfo for a given Address","Return keyInfo for given Address in KeyStore","Return Key corresponding to given Address in KeyStore","Return the Key that is resolved by a given Address, If …","","","","","","","","","","","","","","","","","","","","","Generate a new private key","Generate a new Address that fits the requirement of the …","Generate new Key of given SignatureType","Return Keyinfo that corresponds to a given key","Return Keyinfo that corresponds to a given key","Return the default Address for KeyStore","Return the Address of the default KeyInfo in the Wallet","Return whether or not the Wallet contains a Key that is …","Import KeyInfo into KeyStore","Add Key_Info to the Wallet, return the Address that …","","","","","","","","","","","Return a reference to the key_type","Return all of the keys that are stored in the KeyStore","Return all of the keys that are stored in the KeyStore","Return Vec of Addresses sorted by their string …","Return a Vec that contains all of the Addresses in the …","","","","","","","Return a new KeyInfo given the key_type and private_key","","Return a new Wallet with a given KeyStore","Return a new Address that is of a given SignatureType and …","Return a wallet from a given amount of keys. This wallet …","Return a reference to the private_key","","Save a key key_info pair to the KeyStore","Save a key key_info pair to the KeyStore","Remove the Key and corresponding key_info from the …","Remove the Key and corresponding key_info from the …","","","","Set a default KeyInfo to the Wallet","Sign takes in SignatureType, private key and message. …","Return the resultant Signature after signing a given …","","","","","","Return the public key for a given private_key and …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Wrapper for serializing and deserializing a SignedMessage …","Wrapper for serializing a SignedMessage reference to JSON.","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[1,1,0,2,0,1,0,3,0,0,3,0,3,3,3,0,0,2,3,3,2,0,0,0,4,2,3,5,6,7,1,4,8,2,3,5,6,7,1,4,8,5,6,7,4,8,5,6,7,4,8,5,6,4,3,5,6,7,4,8,8,0,0,8,7,3,3,5,6,7,1,1,4,8,2,3,3,5,5,6,7,1,4,8,0,8,0,9,7,0,8,8,0,8,2,3,5,6,7,1,4,8,0,4,5,9,7,0,8,3,5,6,7,4,8,5,7,8,0,8,5,4,9,7,9,7,5,6,4,8,0,8,5,6,7,4,8,0,3,1,0,2,3,5,6,7,1,4,4,8,2,3,5,6,7,1,4,8,2,3,5,6,7,1,4,8,2,3,5,6,7,1,4,8,10,11,0,0,10,11,10,11,10,10,0,10,10,11,10,11,0,10,11,10,10,11,10,11,10,11,10,11],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["keyinfo",3]],[[],["persistentkeyinfo",3]],[[],["keystore",3]],[[],["key",3]],[[],["wallet",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["error",4]],["bool",15]],[[["keyinfo",3]],["bool",15]],[[["persistentkeyinfo",3]],["bool",15]],[[["keystore",3]],["bool",15]],[[["key",3]],["bool",15]],[[["wallet",3]],["bool",15]],[[["address",3]],[["error",4],["result",4,["keyinfo","error"]],["keyinfo",3]]],[[["address",3],["keystore",3]],[["error",4],["result",4,["keyinfo","error"]],["keyinfo",3]]],[[["address",3],["keystore",3]],[["key",3],["result",4,["key","error"]],["error",4]]],[[["address",3]],[["key",3],["result",4,["key","error"]],["error",4]]],[[],[["result",4,["error"]],["error",4]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["error",3]]],[[]],[[]],[[["keyinfojson",3]],["keyinfo",3]],[[]],[[]],[[]],[[]],[[]],[[["signaturetype",4]],[["vec",3,["u8"]],["result",4,["vec","error"]],["error",4]]],[[["signaturetype",4]],[["address",3],["error",4],["result",4,["address","error"]]]],[[["signaturetype",4]],[["key",3],["result",4,["key","error"]],["error",4]]],[[["str",15]],[["error",4],["result",4,["keyinfo","error"]],["keyinfo",3]]],[[["str",15]],[["error",4],["result",4,["keyinfo","error"]],["keyinfo",3]]],[[["keystore",3]],[["address",3],["error",4],["result",4,["address","error"]]]],[[],[["address",3],["error",4],["result",4,["address","error"]]]],[[["address",3]],["bool",15]],[[["keystore",3],["keyinfo",3]],[["address",3],["error",4],["result",4,["address","error"]]]],[[["keyinfo",3]],[["address",3],["error",4],["result",4,["address","error"]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[],["signaturetype",4]],[[],[["string",3],["vec",3,["string"]]]],[[],[["string",3],["vec",3,["string"]]]],[[["keystore",3]],[["error",4],["vec",3,["address"]],["result",4,["vec","error"]]]],[[],[["error",4],["vec",3,["address"]],["result",4,["vec","error"]]]],[[["error",4]],["bool",15]],[[["keyinfo",3]],["bool",15]],[[["persistentkeyinfo",3]],["bool",15]],[[["keystore",3]],["bool",15]],[[["key",3]],["bool",15]],[[["wallet",3]],["bool",15]],[[["vec",3,["u8"]],["signaturetype",4],["u8",15]]],[[["keystoreconfig",4]],[["result",4,["error"]],["error",4]]],[[["keystore",3]]],[[["signaturetype",4]],[["address",3],["error",4],["result",4,["address","error"]]]],[[["keystore",3]]],[[],["vec",3]],null,[[["string",3],["keyinfo",3]],[["result",4,["error"]],["error",4]]],[[["string",3],["keyinfo",3]],[["result",4,["error"]],["error",4]]],[[["string",3]],[["error",4],["result",4,["keyinfo","error"]],["keyinfo",3]]],[[["string",3]],[["error",4],["result",4,["keyinfo","error"]],["keyinfo",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["address",3]],[["result",4,["error"]],["error",4]]],[[["signaturetype",4]],[["result",4,["signature","error"]],["signature",3],["error",4]]],[[["address",3]],[["result",4,["signature","error"]],["signature",3],["error",4]]],[[]],[[]],[[]],[[]],[[]],[[["signaturetype",4]],[["vec",3,["u8"]],["result",4,["vec","error"]],["error",4]]],[[],["string",3]],[[],["string",3]],[[["address",3],["keystore",3]],[["error",4],["result",4,["keyinfo","error"]],["keyinfo",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["keyinfo",3]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,[[]],[[]],[[]],[[]],[[],["keyinfojson",3]],[[]],[[],[["result",4,["keyinfo"]],["keyinfo",3]]],[[],["result",4]],[[]],[[]],[[]],[[]],[[["keyinfo",3]],["result",4]],[[],["result",4]],[[],["result",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]]],"p":[[4,"EncryptedKeyStoreError"],[4,"KeyStoreConfig"],[4,"Error"],[3,"Key"],[3,"KeyInfo"],[3,"PersistentKeyInfo"],[3,"KeyStore"],[3,"Wallet"],[8,"Store"],[3,"KeyInfoJson"],[3,"KeyInfoJsonRef"]]},\
"message_pool":{"doc":"","t":[13,4,13,13,13,13,3,13,13,3,3,13,13,8,13,13,13,11,11,12,5,12,11,11,11,11,11,11,11,11,10,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,10,11,11,10,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,12,10,11,11,10,11,12,11,12,12,11,11,11,11,12,11,11,12,12,11,11,10,11,11,12,12,12,11,11,11,11,12,12,11,12,10,11,10,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["DuplicateSequence","Error","GasFeeCapTooLow","GasPriceTooLow","InvalidFromAddr","InvalidToAddr","MessagePool","MessageTooBig","MessageValueTooHigh","MpoolConfig","MpoolRpcProvider","NotEnoughFunds","Other","Provider","SequenceTooLow","SoftValidationFailure","TryAgain","add","add_skip_checks","api","block_probabilities","bls_sig_cache","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chain_compute_base_fee","chain_compute_base_fee","clear","clone","clone_into","config","cur_tipset","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","drop","drop","drop","drop","eq","estimate_gas_premium","fmt","fmt","from","from","from","from","from","from","from_subset","from_subset","from_subset","from_subset","gas_limit_overestimation","get_actor_after","get_actor_after","get_config","get_heaviest_tipset","get_heaviest_tipset","get_sequence","head_change","init","init","init","init","into","into","into","into","is_in_subset","is_in_subset","is_in_subset","is_in_subset","load_config","load_local","load_tipset","load_tipset","max_tx_pool_size","messages_for_block","messages_for_block","messages_for_blocks","messages_for_tipset","messages_for_tipset","min_gas_price","ne","network_name","network_sender","new","new","new","pending","pending","pending_for","priority_addrs","priority_addrs","prune_cooldown","push","push_with_sequence","put_message","put_message","remove","replace_by_fee_ratio","repub_trigger","republished","save_config","select_messages","serialize","set_config","sig_val_cache","size_limit_high","size_limit_low","size_limit_low","state_account_key","state_account_key","subscribe_head_changes","subscribe_head_changes","test_provider","to_owned","to_string","to_subset","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","TestApi","borrow","borrow_mut","chain_compute_base_fee","create_header","default","deref","deref_mut","drop","from","from_subset","get_actor_after","get_heaviest_tipset","init","into","is_in_subset","load_tipset","messages_for_block","messages_for_tipset","mock_block","mock_block_with_epoch","mock_block_with_parents","next_block","put_message","set_block_messages","set_heaviest_tipset","set_state_balance_raw","set_state_sequence","state_account_key","subscribe_head_changes","to_subset","to_subset_unchecked","try_from","try_into","type_id","vzip"],"q":["message_pool","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","message_pool::test_provider","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","MessagePool error.","","","","","This contains all necessary information needed for the …","Error indicating message that’s too large","","Config available for the MessagePool.","This is the default Provider implementation that will be …","","","Provider Trait. This trait will be used by the …","","","","This is a helper to push that will help to make sure that …","Add a SignedMessage without doing any of the checks.","The underlying provider","","A cache for BLS signature keyed by Cid","","","","","","","","","Computes the base fee","","If <code>local = true</code>, the local messages will be removed as …","","","Configurable parameters of the message pool","The current tipset (a set of blocks)","","","","","","","","","","","","","","","","Return gas price estimate this has been translated from …","","","","","","","","","","","","","","Return state actor for given address given the tipset …","","","Get the heaviest Tipset in the provider","","Get the sequence for a given address, return Error if …","This function will revert and/or apply tipsets to the …","","","","","","","","","","","","","Load config from store, if exists. If there is no config, …","Loads local messages to the message pool to be applied.","Return a tipset given the tipset keys from the ChainStore","","This is max number of messages in the pool.","Return the signed messages for given blockheader","","Return Vector of signed messages given a block header for …","Return all messages for a tipset","","The minimum gas price needed for executing the …","","TODO","Sender half to send messages to other components","Creates a new MessagePool instance.","","","Return a tuple that contains a vector of all signed …","A map of pending messages where the key is the address","Return a Vector of signed messages for a given from …","Returns slice of Addresses to prioritize when selecting …","","","Push a signed message to the MessagePool. Additionally …","Adds a local message returned from the call back function …","Add a message to the MpoolProvider, return either Cid or …","","Remove a message given a sequence and address from the …","","Acts as a signal to republish messages from the …","A set of republished messages identified by their Cid","Saves message pool config to the database, to easily …","Forest employs a sophisticated algorithm for selecting …","","","A cache for BLS signature keyed by Cid","","Returns the low limit capacity of messages to allocate.","","Resolves to the key address","","Update Mpool’s cur_tipset whenever there is a chnge to …","","Contains mock implementations for testing internal …","","","","","","","","","","","","","","","","","","","","","","","","","","","Struct used for creating a provider when writing tests …","","","","","Create a new TestApi","","","","","","","","","","","","","","","","","","","Set the block messages for TestApi","Set the heaviest tipset for TestApi","Set the state balance for an Address for TestApi","Set the state sequence for an Address for TestApi","","","","","","","",""],"i":[1,0,1,1,1,1,0,1,1,0,0,1,1,0,1,1,1,2,2,2,0,2,2,3,4,1,2,3,4,1,5,3,2,4,4,2,2,4,2,3,4,1,2,3,4,1,4,2,3,4,1,1,2,1,1,2,3,4,1,1,1,2,3,4,1,4,5,3,2,5,3,2,0,2,3,4,1,2,3,4,1,2,3,4,1,4,2,5,3,2,5,3,2,5,3,2,1,2,2,2,3,4,2,2,2,4,4,4,2,2,5,3,2,4,2,2,4,2,4,2,2,4,4,4,5,3,5,3,0,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,0,6,6,6,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["signedmessage",3]]],[[["signedmessage",3]]],null,[[["f64",15]],[["vec",3,["f64"]],["f64",15]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["tipset",3]],[["bigint",3],["result",4,["bigint","error"]],["error",4]]],[[["tipset",3]],[["bigint",3],["result",4,["bigint","error"]],["error",4]]],[[["bool",15]]],[[],["mpoolconfig",3]],[[]],null,null,[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["error",4]],["bool",15]],[[["u64",15],["address",3],["tipsetkeys",3]],[["bigint",3],["result",4,["bigint","error"]],["error",4]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["chainerror",4]]],[[]],[[["encodeerror",3]]],[[]],[[]],[[]],[[]],null,[[["address",3],["tipset",3]],[["result",4,["actorstate","error"]],["actorstate",3],["error",4]]],[[["address",3],["tipset",3]],[["result",4,["actorstate","error"]],["actorstate",3],["error",4]]],[[],["mpoolconfig",3]],[[],[["pin",3,["box"]],["box",3,["future"]]]],[[],[["pin",3,["box"]],["box",3,["future"]]]],[[["address",3]]],[[["rwlock",3],["sender",3],["vec",3,["tipset"]],["rwlock",3],["rwlock",3],["rwlock",3],["tipset",3],["arc",3,["sender"]],["rwlock",3]]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],[["box",3,["stderror"]],["result",4,["box"]]]],[[]],[[["tipsetkeys",3]],[["pin",3,["box"]],["box",3,["future"]]]],[[["tipsetkeys",3]],[["pin",3,["box"]],["box",3,["future"]]]],null,[[["blockheader",3]],[["error",4],["result",4,["error"]]]],[[["blockheader",3]],[["error",4],["result",4,["error"]]]],[[]],[[["tipset",3]],[["vec",3,["chainmessage"]],["result",4,["vec","error"]],["error",4]]],[[["tipset",3]],[["vec",3,["chainmessage"]],["result",4,["vec","error"]],["error",4]]],null,[[["error",4]],["bool",15]],null,null,[[["mpoolconfig",3],["networkmessage",4],["string",3],["sender",3,["networkmessage"]]]],[[["headchange",4],["publisher",3,["headchange"]],["arc",3,["statemanager"]],["statemanager",3]]],[[["address",3],["f64",15],["duration",3],["vec",3,["address"]],["i64",15]],[["result",4,["string"]],["string",3]]],[[]],null,[[["address",3]]],[[]],null,null,[[["signedmessage",3]]],[[["address",3]]],[[["chainmessage",4]],[["cid",3],["result",4,["cid","error"]],["error",4]]],[[["chainmessage",4]],[["cid",3],["result",4,["cid","error"]],["error",4]]],[[["u64",15],["address",3],["bool",15]]],null,null,null,[[],[["result",4,["box"]],["box",3,["stderror"]]]],[[["tipset",3],["f64",15]]],[[],["result",4]],[[["mpoolconfig",3]],[["result",4,["error"]],["error",4]]],null,null,[[],["i64",15]],null,[[["address",3],["arc",3]],[["pin",3,["box"]],["box",3,["future"]]]],[[["address",3],["arc",3]],[["pin",3,["box"]],["box",3,["future"]]]],[[],[["pin",3,["box"]],["box",3,["future"]]]],[[],[["pin",3,["box"]],["box",3,["future"]]]],null,[[]],[[],["string",3]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],null,[[]],[[]],[[["tipset",3]],[["bigint",3],["result",4,["bigint","error"]],["error",4]]],[[["u64",15]],["blockheader",3]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[["address",3],["tipset",3]],[["result",4,["actorstate","error"]],["actorstate",3],["error",4]]],[[],[["pin",3,["box"]],["box",3,["future"]]]],[[],["usize",15]],[[]],[[],["bool",15]],[[["tipsetkeys",3]],[["pin",3,["box"]],["box",3,["future"]]]],[[["blockheader",3]],[["error",4],["result",4,["error"]]]],[[["tipset",3]],[["vec",3,["chainmessage"]],["result",4,["vec","error"]],["error",4]]],[[["u64",15]],["blockheader",3]],[[["u64",15],["i64",15]],["blockheader",3]],[[["u64",15],["tipset",3]],["blockheader",3]],[[],["blockheader",3]],[[["chainmessage",4]],[["cid",3],["result",4,["cid","error"]],["error",4]]],[[["signedmessage",3],["blockheader",3],["vec",3,["signedmessage"]]]],[[["arc",3,["tipset"]],["tipset",3]]],[[["bigint",3],["address",3]]],[[["u64",15],["address",3]]],[[["address",3],["arc",3]],[["pin",3,["box"]],["box",3,["future"]]]],[[],[["pin",3,["box"]],["box",3,["future"]]]],[[],["option",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]]],"p":[[4,"Error"],[3,"MessagePool"],[3,"MpoolRpcProvider"],[3,"MpoolConfig"],[8,"Provider"],[3,"TestApi"]]},\
"metrics":{"doc":"","t":[4,13,13,13,13,11,11,0,11,11,11,5,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11],"n":["Error","Io","PortInUse","Prometheus","Tide","borrow","borrow_mut","db","fmt","fmt","from","init_prometheus","into","to_string","try_from","try_into","type_id","vzip","DBCollector","borrow","borrow_mut","collect","desc","from","into","new","try_from","try_into","type_id","vzip"],"q":["metrics","","","","","","","","","","","","","","","","","","metrics::db","","","","","","","","","","",""],"d":["","I/O error.","Prometheus port is already in use.","","Tide internal error.","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,0,2,2,2,2,2,2,2,2,2,2,2],"f":[null,null,null,null,null,[[]],[[]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["string",3],["socketaddr",4]]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,[[]],[[]],[[],[["vec",3,["metricfamily"]],["metricfamily",3]]],[[],[["vec",3,["desc"]],["desc",3]]],[[]],[[]],[[["string",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]]],"p":[[4,"Error"],[3,"DBCollector"]]},\
"net_utils":{"doc":"","t":[3,11,11,11,11,12,11,11,12,11,11,11,11,11],"n":["FetchProgress","borrow","borrow_mut","finish","from","inner","into","poll_read","progress_bar","try_from","try_from","try_from","try_into","type_id"],"q":["net_utils","","","","","","","","","","","","",""],"d":["Holds a Reader, tracks read progress and draw a progress …","","","","","","","","","","","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[null,[[]],[[]],[[]],[[]],null,[[]],[[["context",3],["pin",3]],[["result",4,["usize","error"]],["poll",4,["result"]]]],null,[[],["result",4]],[[["url",3]],["result",4]],[[["file",3]],["result",4]],[[],["result",4]],[[],["typeid",3]]],"p":[[3,"FetchProgress"]]},\
"networks":{"doc":"","t":[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,5,5],"n":["BLOCK_DELAY_SECS","DEFAULT_BOOTSTRAP","DEFAULT_GENESIS","NEWEST_NETWORK_VERSION","UPGRADE_ACTORS_V2_HEIGHT","UPGRADE_ACTORS_V3_HEIGHT","UPGRADE_ACTORS_V4_HEIGHT","UPGRADE_BREEZE_HEIGHT","UPGRADE_CALICO_HEIGHT","UPGRADE_CLAUS_HEIGHT","UPGRADE_HYPERDRIVE_HEIGHT","UPGRADE_IGNITION_HEIGHT","UPGRADE_KUMQUAT_HEIGHT","UPGRADE_LIFTOFF_HEIGHT","UPGRADE_NORWEGIAN_HEIGHT","UPGRADE_ORANGE_HEIGHT","UPGRADE_PERSIAN_HEIGHT","UPGRADE_PLACEHOLDER_HEIGHT","UPGRADE_SMOKE_HEIGHT","UPGRADE_TAPE_HEIGHT","beacon_schedule_default","get_network_version_default"],"q":["networks","","","","","","","","","","","","","","","","","","","","",""],"d":["Time, in seconds, between each block.","Bootstrap peer ids","Default genesis car file bytes.","Current network version for the network","V4 network upgrade","V10 network upgrade","V12 network upgrade","V1 network upgrade","V7 network upgrade","Remove burn on window PoSt fork","V13 network upgrade","V3 network upgrade","V6 network upgrade","Switching to mainnet network name","V11 network upgrade","V9 network upgrade","V8 network upgrade","","V2 network upgrade","V5 network upgrade","Constructs a drand beacon schedule based on the build …","Gets network version from epoch using default Mainnet …"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["u64",15]]],[[["chainepoch",6]],["networkversion",4]]],"p":[]},\
"paramfetch":{"doc":"","t":[13,13,4,13,11,11,11,11,11,11,5,5,11,11,11,11,11,11],"n":["All","Keys","SectorSizeOpt","Size","borrow","borrow_mut","deref","deref_mut","drop","from","get_params","get_params_default","init","into","try_from","try_into","type_id","vzip"],"q":["paramfetch","","","","","","","","","","","","","","","","",""],"d":["All keys and proofs gen params","Only verification params","Sector size options for fetching.","All keys and proofs gen params for a given size","","","","","","","Get proofs parameters and all verification keys for a …","Get proofs parameters and all verification keys for a …","","","","","",""],"i":[1,1,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1],"f":[null,null,null,null,[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["str",15],["sectorsizeopt",4],["bool",15]]],[[["sectorsizeopt",4],["bool",15]]],[[],["usize",15]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]]],"p":[[4,"SectorSizeOpt"]]},\
"rpc":{"doc":"","t":[5],"n":["start_rpc"],"q":["rpc"],"d":[""],"i":[0],"f":[[[["rpcstate",3],["str",15],["arc",3,["rpcstate"]]]]],"p":[]},\
"rpc_api":{"doc":"","t":[7,17,4,13,17,13,13,13,0,0,11,11,0,5,0,0,11,11,11,11,11,0,11,11,11,0,0,0,0,11,11,11,11,11,11,0,17,17,6,6,6,6,17,6,6,17,17,17,17,17,17,17,17,17,17,17,17,17,17,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,17,6,6,3,3,3,3,13,3,13,13,13,13,3,13,13,13,13,6,3,13,3,3,3,3,13,13,13,13,13,13,13,3,3,4,13,3,3,13,3,13,13,13,13,13,13,13,11,12,12,12,12,11,11,11,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,12,12,12,12,12,12,12,12,11,11,12,12,12,12,11,12,12,11,11,12,12,12,11,11,12,12,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,17,17,17,17,6,6,6,6,6,6,6,6,17,17,17,17,17,17,17,6,6,6,6,6,6,6,6,6,6,6,6,6,6,17,17,17,17,6,6,6,6,6,6,6,6,17,17,6,6,6,6,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,17,17,17,17,6,6,6,6,6,6,6,6,17,17,17,17,17,17,17,17,17,17,17,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6],"n":["ACCESS_MAP","API_INFO_KEY","Access","Admin","DEFAULT_MULTIADDRESS","Read","Sign","Write","auth_api","beacon_api","borrow","borrow_mut","chain_api","check_access","common_api","data_types","deref","deref_mut","drop","from","from_subset","gas_api","init","into","is_in_subset","mpool_api","net_api","state_api","sync_api","to_subset","to_subset_unchecked","try_from","try_into","type_id","vzip","wallet_api","AUTH_NEW","AUTH_VERIFY","AuthNewParams","AuthNewResult","AuthVerifyParams","AuthVerifyResult","BEACON_GET_ENTRY","BeaconGetEntryParams","BeaconGetEntryResult","CHAIN_GET_BLOCK","CHAIN_GET_BLOCK_MESSAGES","CHAIN_GET_GENESIS","CHAIN_GET_MESSAGE","CHAIN_GET_RANDOMNESS_FROM_BEACON","CHAIN_GET_RANDOMNESS_FROM_TICKETS","CHAIN_GET_TIPSET","CHAIN_GET_TIPSET_BY_HEIGHT","CHAIN_HAS_OBJ","CHAIN_HEAD","CHAIN_HEAD_SUBSCRIPTION","CHAIN_NOTIFY","CHAIN_READ_OBJ","CHAIN_TIPSET_WEIGHT","ChainGetBlockMessagesParams","ChainGetBlockMessagesResult","ChainGetBlockParams","ChainGetBlockResult","ChainGetGenesisParams","ChainGetGenesisResult","ChainGetMessageParams","ChainGetMessageResult","ChainGetRandomnessFromBeaconParams","ChainGetRandomnessFromBeaconResult","ChainGetRandomnessFromTicketsParams","ChainGetRandomnessFromTicketsResult","ChainGetTipSetParams","ChainGetTipSetResult","ChainGetTipsetByHeightParams","ChainGetTipsetByHeightResult","ChainHasObjParams","ChainHasObjResult","ChainHeadParams","ChainHeadResult","ChainHeadSubscriptionParams","ChainHeadSubscriptionResult","ChainNotifyParams","ChainNotifyResult","ChainReadObjParams","ChainReadObjResult","ChainTipSetWeightParams","ChainTipSetWeightResult","VERSION","VersionParams","VersionResult","ActorStateJson","AddrInfo","BlockMessages","BlockTemplate","Dccp","Deadline","Dns","Dns4","Dns6","Dnsaddr","Fault","Http","Https","Ip4","Ip6","JsonRpcServerState","MarketDeal","Memory","MessageLookup","MessageSendSpec","MiningBaseInfoJson","Multiaddr","Onion","Onion3","P2p","P2pCircuit","P2pWebRtcDirect","P2pWebRtcStar","P2pWebSocketStar","Partition","PeerID","Protocol","Quic","RPCState","RPCSyncState","Sctp","StreamingData","Tcp","Udp","Udt","Unix","Utp","Ws","Wss","acquire","active_sectors","active_syncs","addrs","all_sectors","as_byte_slice","as_ref","as_slice_of","bad_blocks","beacon","beacon_entries","beacon_values","bls_msg","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chain_store","cids","clone","clone","clone_into","clone_into","cmp","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","disputable_proof_count","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","eligible_for_mining","empty","encode_hex","encode_hex_upper","ends_with","epoch","eproof","eq","eq","equivalent","equivalent","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","faulty_sectors","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bytes","from_iter","from_str","from_str_parts","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","get_hash","get_hash","get_hash","get_hash","hash","height","id","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_empty","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","iter","json_rpc","keystore","len","live_sectors","message","messages","method","miner","miner_power","mpool","multihash","ne","ne","network_name","network_power","network_send","new_mined_block_tx","nonce","params","parents","partial_cmp","pop","post_submissions","prev_beacon_entry","proposal","protocol_name","push","receipt","recovering_sectors","replace","return_dec","secp_msg","sector_size","sectors","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","state","state_manager","sync_state","ticket","timestamp","tipset","to_owned","to_owned","to_string","to_string","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_vec","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","winning_post_proof","with","with_capacity","worker_key","write_bytes","GAS_ESTIMATE_FEE_CAP","GAS_ESTIMATE_GAS_LIMIT","GAS_ESTIMATE_GAS_PREMIUM","GAS_ESTIMATE_MESSAGE_GAS","GasEstimateFeeCapParams","GasEstimateFeeCapResult","GasEstimateGasLimitParams","GasEstimateGasLimitResult","GasEstimateGasPremiumParams","GasEstimateGasPremiumResult","GasEstimateMessageGasParams","GasEstimateMessageGasResult","MPOOL_ESTIMATE_GAS_PRICE","MPOOL_GET_NONCE","MPOOL_PENDING","MPOOL_PUSH","MPOOL_PUSH_MESSAGE","MPOOL_SELECT","MPOOL_UPDATES","MpoolEstimateGasPriceParams","MpoolEstimateGasPriceResult","MpoolGetNonceParams","MpoolGetNonceResult","MpoolPendingParams","MpoolPendingResult","MpoolPushMessageParams","MpoolPushMessageResult","MpoolPushParams","MpoolPushResult","MpoolSelectParams","MpoolSelectResult","MpoolUpdatesParams","MpoolUpdatesResult","NET_ADDRS_LISTEN","NET_CONNECT","NET_DISCONNECT","NET_PEERS","NetAddrsListenParams","NetAddrsListenResult","NetConnectParams","NetConnectResult","NetDisconnectParams","NetDisconnectResult","NetPeersParams","NetPeersResult","MINER_CREATE_BLOCK","MINER_GET_BASE_INFO","MinerCreateBlockParams","MinerCreateBlockResult","MinerGetBaseInfoParams","MinerGetBaseInfoResult","STATE_ACCOUNT_KEY","STATE_ALL_MINER_FAULTS","STATE_CALL","STATE_GET_ACTOR","STATE_GET_RECEIPT","STATE_LIST_ACTORS","STATE_LOOKUP_ID","STATE_MARKET_BALANCE","STATE_MARKET_DEALS","STATE_MINER_DEADLINES","STATE_MINER_FAULTS","STATE_MINER_INFO","STATE_MINER_INITIAL_PLEDGE_COLLATERAL","STATE_MINER_PARTITIONS","STATE_MINER_POWER","STATE_MINER_PRE_COMMIT_DEPOSIT_FOR_POWER","STATE_MINER_PROVING_DEADLINE","STATE_MINER_RECOVERIES","STATE_MINER_SECTORS","STATE_MINER_SECTOR_ALLOCATED","STATE_NETWORK_NAME","STATE_NETWORK_VERSION","STATE_REPLAY","STATE_SECTOR_GET_INFO","STATE_SECTOR_PRECOMMIT_INFO","STATE_WAIT_MSG","StateAccountKeyParams","StateAccountKeyResult","StateAllMinerFaultsParams","StateAllMinerFaultsResult","StateCallParams","StateCallResult","StateGetActorParams","StateGetActorResult","StateGetReceiptParams","StateGetReceiptResult","StateListActorsParams","StateListActorsResult","StateLookupIdParams","StateLookupIdResult","StateMarketBalanceParams","StateMarketBalanceResult","StateMarketDealsParams","StateMarketDealsResult","StateMinerDeadlinesParams","StateMinerDeadlinesResult","StateMinerFaultsParams","StateMinerFaultsResult","StateMinerInfoParams","StateMinerInfoResult","StateMinerInitialPledgeCollateralParams","StateMinerInitialPledgeCollateralResult","StateMinerPartitionsParams","StateMinerPartitionsResult","StateMinerPowerParams","StateMinerPowerResult","StateMinerPreCommitDepositForPowerParams","StateMinerPreCommitDepositForPowerResult","StateMinerProvingDeadlineParams","StateMinerProvingDeadlineResult","StateMinerRecoveriesParams","StateMinerRecoveriesResult","StateMinerSectorAllocatedParams","StateMinerSectorAllocatedResult","StateMinerSectorsParams","StateMinerSectorsResult","StateNetworkNameParams","StateNetworkNameResult","StateNetworkVersionParams","StateNetworkVersionResult","StateReplayParams","StateReplayResult","StateSectorGetInfoParams","StateSectorGetInfoResult","StateSectorPrecommitInfoParams","StateSectorPrecommitInfoResult","StateWaitMsgParams","StateWaitMsgResult","SYNC_CHECK_BAD","SYNC_MARK_BAD","SYNC_STATE","SYNC_SUBMIT_BLOCK","SyncCheckBadParams","SyncCheckBadResult","SyncMarkBadParams","SyncMarkBadResult","SyncStateParams","SyncStateResult","SyncSubmitBlockParams","SyncSubmitBlockResult","WALLET_BALANCE","WALLET_DEFAULT_ADDRESS","WALLET_EXPORT","WALLET_HAS","WALLET_IMPORT","WALLET_LIST","WALLET_NEW","WALLET_SET_DEFAULT","WALLET_SIGN","WALLET_SIGN_MESSAGE","WALLET_VERIFY","WalletBalanceParams","WalletBalanceResult","WalletDefaultAddressParams","WalletDefaultAddressResult","WalletExportParams","WalletExportResult","WalletHasParams","WalletHasResult","WalletImportParams","WalletImportResult","WalletListParams","WalletListResult","WalletNewParams","WalletNewResult","WalletSetDefaultParams","WalletSetDefaultResult","WalletSignMessageParams","WalletSignMessageResult","WalletSignParams","WalletSignResult","WalletVerifyParams","WalletVerifyResult"],"q":["rpc_api","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rpc_api::auth_api","","","","","","rpc_api::beacon_api","","","rpc_api::chain_api","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rpc_api::common_api","","","rpc_api::data_typesrpc_api::gas_api","","","","","","","","","","","","rpc_api::mpool_api","","","","","","","","","","","","","","","","","","","","","rpc_api::net_api","","","","","","","","","","","","rpc_api::state_api","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rpc_api::sync_api","","","","","","","","","","","","rpc_api::wallet_api","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Access mapping between method names and access levels …","","Access levels to be checked against JWT claims","","JSON-RPC API defaults","","","","JSON-RPC API definitions Auth API","Beacon API","","","Chain API","Checks an access enum against provided JWT claims","Common API","","","","","","","Gas API","","","","Message Pool API","Net API","State API","Sync API","","","","","","","Wallet API","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Contains the “port” to contact. Similar to TCP or …","","","","Representation of a Multiaddr.","","","","","","","","","","<code>Protocol</code> describes all possible multiaddress protocols.","","This is where you store persistent data, or at least …","","","","","","","","","","","Turn this <code>Protocol</code> into one that owns its data, thus …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create a new, empty multiaddress.","","","Checks whether the given <code>Multiaddr</code> is a suffix of this …","","","","","","","","","","","","","","","","","","","","","","","","","","Convert a Multiaddr to a string","","","","","","","","","","","","","","","","","","","","","","","","","","","Parse a single <code>Protocol</code> value from its byte slice …","","","Parse a protocol value from the given iterator of string …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns true if the length of this multiaddress is 0.","","","","","","","","","","","","","","","","","","Returns the components of this multiaddress.","","","Return the length in bytes of this multiaddress.","","","","","","","","","","","","","","","","","","","Pops the last <code>Protocol</code> of this multiaddr, or <code>None</code> if the …","","","","","Adds an already-parsed address component to the end of …","","","Replace a <code>Protocol</code> at some position in this <code>Multiaddr</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return a copy of this <code>Multiaddr</code>’s byte representation.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Like <code>Multiaddr::push</code> but consumes <code>self</code>.","Create a new, empty multiaddress with the given capacity.","","Encode this protocol by writing its binary representation …i":[0,0,0,1,0,1,1,1,0,0,1,1,0,0,0,0,1,1,1,1,1,0,1,1,1,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,2,2,2,2,0,2,2,2,2,0,0,2,0,0,0,0,2,2,2,2,2,2,2,0,0,0,2,0,0,2,0,2,2,2,2,2,2,2,2,3,4,5,3,6,6,6,7,7,8,9,10,7,11,4,10,12,13,14,3,15,16,17,9,8,5,18,2,6,7,11,4,10,12,13,14,3,15,16,17,9,8,5,18,2,6,7,10,2,6,2,6,6,7,11,4,10,12,13,14,3,15,16,17,9,8,5,18,2,6,7,11,4,10,12,13,14,3,15,16,17,9,8,5,18,2,6,4,10,12,15,9,5,18,6,13,7,11,4,10,12,13,14,3,15,16,17,9,8,5,18,2,6,8,6,6,6,6,9,9,2,6,2,6,11,4,10,12,13,14,3,15,16,17,8,5,18,6,3,4,2,2,6,6,7,11,4,10,12,13,14,3,15,15,16,17,9,8,8,5,18,2,2,2,2,6,6,6,6,6,2,6,6,2,7,11,4,10,12,13,14,3,15,16,17,9,8,5,18,2,6,6,6,6,6,6,17,5,7,11,4,10,12,13,14,3,15,16,17,9,8,5,18,2,6,7,11,4,10,12,13,14,3,15,16,17,9,8,5,18,2,6,6,7,11,4,10,12,13,14,3,15,16,17,9,8,5,18,2,6,6,11,7,6,3,17,9,11,9,8,7,18,2,6,7,8,7,7,15,11,9,6,6,13,8,16,6,6,17,3,6,17,10,8,8,11,4,10,12,13,14,3,15,16,17,8,5,18,6,16,7,7,9,9,17,2,6,2,6,7,11,4,10,12,13,14,3,15,16,17,9,8,5,18,2,6,7,11,4,10,12,13,14,3,15,16,17,9,8,5,18,2,6,6,7,11,4,10,12,13,14,3,15,16,17,9,8,5,18,2,6,6,6,6,7,11,4,10,12,13,14,3,15,16,17,9,8,5,18,2,6,7,11,4,10,12,13,14,3,15,16,17,9,8,5,18,2,6,7,11,4,10,12,13,14,3,15,16,17,9,8,5,18,2,6,9,6,6,8,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[null,null,null,null,null,null,null,null,null,null,[[]],[[]],null,[[["access",4]],["bool",15]],null,null,[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],null,[[],["usize",15]],[[]],[[],["bool",15]],null,null,null,null,[[],["option",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["protocol",4]],null,null,null,null,[[]],[[]],[[],[["error",4],["result",4,["error"]]]],null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[],["protocol",4]],[[],["multiaddr",3]],[[]],[[]],[[["multiaddr",3]],["ordering",4]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],[["result",4,["multiaddr"]],["multiaddr",3]]],null,[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],null,[[],["multiaddr",3]],[[]],[[]],[[["multiaddr",3]],["bool",15]],null,null,[[["protocol",4]],["bool",15]],[[["multiaddr",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["serializer",8]],[["result",4,["ok","error"]],["ok",3],["error",3]]],[[["serializer",8]],[["result",4,["ok","error"]],["ok",3],["error",3]]],[[["serializer",8]],[["result",4,["ok","error"]],["ok",3],["error",3]]],[[["serializer",8]],[["result",4,["ok","error"]],["ok",3],["error",3]]],[[["serializer",8]],[["result",4,["ok","error"]],["ok",3],["error",3]]],[[["serializer",8]],[["result",4,["ok","error"]],["ok",3],["error",3]]],[[["serializer",8]],[["result",4,["ok","error"]],["ok",3],["error",3]]],[[["serializer",8]],[["result",4,["ok","error"]],["ok",3],["error",3]]],[[["serializer",8]],[["result",4,["ok","error"]],["ok",3],["error",3]]],[[["serializer",8]],[["result",4,["ok","error"]],["ok",3],["error",3]]],[[["serializer",8]],[["result",4,["ok","error"]],["ok",3],["error",3]]],[[["serializer",8]],[["result",4,["ok","error"]],["ok",3],["error",3]]],[[["serializer",8]],[["result",4,["ok","error"]],["ok",3],["error",3]]],[[["serializer",8]],[["result",4,["ok","error"]],["ok",3],["error",3]]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["actorstate",3]]],[[]],[[]],[[]],[[["miningbaseinfo",3]]],[[]],[[]],[[]],[[["ipv6addr",3]],["protocol",4]],[[]],[[["ipv4addr",3]],["protocol",4]],[[["ipaddr",4]],["protocol",4]],[[["ipv4addr",3]],["multiaddr",3]],[[["protocol",4]],["multiaddr",3]],[[["ipv6addr",3]],["multiaddr",3]],[[]],[[["ipaddr",4]],["multiaddr",3]],[[],[["error",4],["result",4,["error"]]]],[[],["multiaddr",3]],[[["str",15]],[["error",4],["result",4,["multiaddr","error"]],["multiaddr",3]]],[[],[["protocol",4],["error",4],["result",4,["protocol","error"]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[]],null,null,[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["iter",3]],null,null,[[],["usize",15]],null,null,null,null,null,null,null,null,[[["protocol",4]],["bool",15]],[[["multiaddr",3]],["bool",15]],null,null,null,null,[[],["u64",15]],null,null,[[["multiaddr",3]],[["option",4,["ordering"]],["ordering",4]]],[[],[["protocol",4],["option",4,["protocol"]]]],null,null,null,[[]],[[["protocol",4]]],null,null,[[["usize",15]],[["option",4,["multiaddr"]],["multiaddr",3]]],null,null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,null,null,null,null,null,[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["vec",3,["u8","global"]],["u8",15],["global",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["string",3]],[["error",4],["result",4,["multiaddr","error"]],["multiaddr",3]]],[[["str",15]],[["error",4],["result",4,["multiaddr","error"]],["multiaddr",3]]],[[["vec",3,["u8","global"]],["u8",15],["global",3]],[["error",4],["result",4,["multiaddr","error"]],["multiaddr",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[["protocol",4]],["multiaddr",3]],[[["usize",15]],["multiaddr",3]],null,[[],[["error",4],["result",4,["error"]]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"p":[[4,"Access"],[4,"Protocol"],[3,"Partition"],[3,"RPCSyncState"],[3,"AddrInfo"],[3,"Multiaddr"],[3,"RPCState"],[3,"MiningBaseInfoJson"],[3,"BlockTemplate"],[3,"BlockMessages"],[3,"StreamingData"],[3,"MessageSendSpec"],[3,"Deadline"],[3,"Fault"],[3,"ActorStateJson"],[3,"MarketDeal"],[3,"MessageLookup"],[3,"PeerID"]]},\
"rpc_client":{"doc":"","t":[7,17,3,17,17,17,17,17,13,3,4,17,13,0,11,11,11,11,11,11,0,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,0,12,0,0,0,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,0,12,12,12,12,12,12,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],"n":["API_INFO","API_INFO_KEY","ApiInfo","DEFAULT_HOST","DEFAULT_MULTIADDRESS","DEFAULT_PORT","DEFAULT_PROTOCOL","DEFAULT_URL","Error","JsonRpcError","JsonRpcResponse","RPC_ENDPOINT","Result","auth_ops","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","chain_ops","code","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","drop","drop","drop","from","from","from","from_subset","from_subset","from_subset","init","init","init","into","into","into","is_in_subset","is_in_subset","is_in_subset","message","mpool_ops","multiaddr","net_ops","state_ops","sync_ops","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","token","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","wallet_ops","error","id","id","jsonrpc","jsonrpc","result","auth_new","auth_verify","chain_get_block","chain_get_genesis","chain_get_message","chain_get_tipset","chain_head","chain_read_obj","mpool_pending","net_addrs_listen","net_connect","net_disconnect","net_peers","state_account_key","state_get_actor","state_list_actors","state_lookup","state_miner_power","sync_check_bad","sync_mark_bad","sync_status","wallet_balance","wallet_default_address","wallet_export","wallet_has","wallet_import","wallet_list","wallet_new","wallet_set_default","wallet_sign","wallet_verify"],"q":["rpc_client","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rpc_client::JsonRpcResponse","","","","","","rpc_client::auth_ops","","rpc_client::chain_ops","","","","","","rpc_client::mpool_ops","rpc_client::net_ops","","","","rpc_client::state_ops","","","","","rpc_client::sync_ops","","","rpc_client::wallet_ops","","","","","","","","",""],"d":["","","","","","","","","","Error object in a response","","","","Filecoin RPC client interface methods","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new JWT Token","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,1,0,0,0,1,0,2,3,1,2,3,1,0,3,2,3,1,2,3,1,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,3,0,2,0,0,0,2,3,1,2,3,1,2,2,3,1,2,3,1,2,3,1,2,3,1,0,4,5,4,5,4,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[],["result",4]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,null,null,null,null,null,[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],null,null,null,null,null,null,null,[[["authnewparams",6]]],[[["authverifyparams",6]]],[[["chaingetblockparams",6]]],[[]],[[["chaingetmessageparams",6]]],[[["chaingettipsetparams",6]]],[[]],[[["chainreadobjparams",6]]],[[["mpoolpendingparams",6]]],[[["netaddrslistenparams",6]]],[[["netconnectparams",6]]],[[["netdisconnectparams",6]]],[[["netpeersparams",6]]],[[["stateaccountkeyparams",6]]],[[["stategetactorparams",6]]],[[["statelistactorsparams",6]]],[[["statelookupidparams",6]]],[[["stateminerpowerparams",6]]],[[["synccheckbadparams",6]]],[[["syncmarkbadparams",6]]],[[["syncstateparams",6]]],[[["walletbalanceparams",6]]],[[]],[[["walletexportparams",6]]],[[["wallethasparams",6]]],[[["walletimportparams",6]]],[[]],[[["walletnewparams",6]]],[[["walletsetdefaultparams",6]]],[[["walletsignparams",6]]],[[["walletverifyparams",6]]]],"p":[[4,"JsonRpcResponse"],[3,"ApiInfo"],[3,"JsonRpcError"],[13,"Error"],[13,"Result"]]},\
"serialization_tests":{"doc":"","t":[],"n":[],"q":[],"d":[],"i":[],"f":[],"p":[]},\
"state_manager":{"doc":"","t":[13,13,13,4,3,3,3,13,13,3,13,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,12,11,12,11,11,11,12,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12],"n":["ActorNotFound","ActorStateNotFound","DB","Error","InvocResult","MarketBalance","MiningBaseInfo","Other","State","StateManager","VM","apply_blocks","beacon_entries","blockstore","blockstore_cloned","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call","call_with_gas","chain_store","compute_tipset_state","default","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","drop","drop","drop","drop","drop","eligible_for_mining","eligible_to_mine","eq","error","fmt","fmt","from","from","from","from","from","from","from","from","get_actor","get_balance","get_bls_public_key","get_circulating_supply","get_heaviest_balance","get_lookback_tipset_for_round","get_market_state","get_miner_faults","get_miner_info","get_miner_recoveries","get_miner_sector_set","get_miner_work_addr","get_miner_worker_raw","get_network_name","get_network_version","get_power","get_receipt","get_sectors_for_winning_post","get_subscriber","init","init","init","init","init","into","into","into","into","into","is_miner_slashed","list_miner_actors","lookup_id","market_balance","miner_get_base_info","miner_has_min_power","miner_power","miner_sector_info","msg","msg_rct","ne","network_power","new","new_with_publisher","precommit_info","prev_beacon_entry","replay","resolve_to_key_addr","sector_size","sectors","serialize","serialize","source","tipset_state","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","validate_chain","vzip","vzip","vzip","vzip","vzip","wait_for_message","worker_key"],"q":["state_manager","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Actor for given address not found","Actor state not found at given cid","Error originating from key-value store","State manager error","Type to represent invocation of state call results.","External format for returning market balance from state.","Base miner info needed for the RPC API.","Other state manager error","Error orginating from state","State manager handles all interactions with the internal …","Error from VM execution","Performs the state transition for the tipset and applies …","","Returns a reference to the state manager’s BlockStore.","Returns the cloned Arc of the state manager’s BlockStore…","","","","","","","","","","","runs the given message and returns its result without any …","Computes message on the given Tipset state, after …","Returns reference to the state manager’s ChainStore.","Performs a state transition, and returns the state and …","","","","","","","","","","","","","","","","","","","","Checks the eligibility of the miner. This is used in the …","","","","","","","","","","","","","Gets actor from given Cid, if it exists.","Return the balance of a given address and state_cid","Returns a bls public key from provided address","Retrieves total circulating supply on the network.","Return the heaviest tipset’s balance from self.db for a …","Gets lookback tipset for block validations.","Return the state of Market Actor.","Returns a bitfield of all miner’s faulty sectors.","Returns miner info at the given Tipset’s state.","Returns bitfield of miner’s recovering sectors.","Loads sectors for miner at given Address.","Returns raw work address of a miner given the state root.","Gets miner’s worker address from state.","Returns the network name from the init actor state.","Returns network version for the given epoch.","Returns specified actor’s claimed power and total …","Returns a message receipt from a given tipset and message …","Retrieves and generates a vector of sector info for the …","Subscribes to the HeadChanges observed by the state …","","","","","","","","","","","Returns true if miner has been slashed or is considered …","Lists all miners that exist in the power actor state at …","Looks up ID Address from the state at the given Tipset.","Retrieves market balance in escrow and locked tables.","Get’s a miner’s base info from state, based on the …","Checks power actor state for if miner meets consensus …","","Returns miner’s sector info for a given index.","","","","","","Creates a constructor that passes in a HeadChange …","Returns the precommitted sector info for a miner’s …","","Replays the given message and returns the result of …","Similar to <code>resolve_to_key_addr</code> in the vm crate but does …","","","","","","Returns the pair of (parent state root, message receipt …","","","","","","","","","","","","","","","","","","","","","","","WaitForMessage blocks until a message appears on chain. …",""],"i":[1,1,1,0,0,0,0,1,1,0,1,2,3,2,2,2,3,1,4,5,2,3,1,4,5,2,2,2,2,5,2,3,1,4,5,2,3,1,4,5,4,5,2,3,1,4,5,3,2,1,4,1,1,2,3,1,1,1,1,4,5,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,1,4,5,2,3,1,4,5,2,2,2,2,2,2,3,2,4,4,1,3,2,2,2,3,2,2,3,3,4,5,1,2,1,2,3,1,4,5,2,3,1,4,5,2,3,1,4,5,2,2,3,1,4,5,2,3],"f":[null,null,null,null,null,null,null,null,null,null,null,[[["arc",3],["cid",3],["arc",3],["chainepoch",6],["bigint",3],["option",4]],[["result",4,["box"]],["box",3,["stderror"]]]],null,[[]],[[],["arc",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["arc",3],["arc",3,["tipset"]],["unsignedmessage",3],["option",4,["arc"]]]],[[["arc",3],["arc",3,["tipset"]],["chainmessage",4],["option",4,["arc"]]]],[[],["arc",3]],[[["arc",3],["arc",3],["option",4]]],[[],["marketbalance",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[],["result",4]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],null,[[["arc",3],["tipset",3],["address",3]],[["error",4],["result",4,["bool","error"]],["bool",15]]],[[["error",4]],["bool",15]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["dberr",4]]],[[["string",3]]],[[["box",3,["stderror"]],["stderror",8]]],[[]],[[]],[[]],[[["cid",3],["address",3]],[["option",4,["actorstate"]],["error",4],["result",4,["option","error"]]]],[[["cid",3],["address",3]],[["result",4,["bigint","error"]],["bigint",3],["error",4]]],[[["cid",3],["address",3]],[["result",4,["error"]],["error",4]]],[[["arc",3],["chainepoch",6],["statetree",3]],[["box",3,["stderror"]],["result",4,["tokenamount","box"]],["tokenamount",6]]],[[["address",3]]],[[["arc",3],["arc",3,["tipset"]],["chainepoch",6],["tipset",3]]],[[["tipset",3]],[["error",4],["result",4,["state","error"]],["state",4]]],[[["tipset",3],["address",3]],[["result",4,["bitfield","box"]],["bitfield",3],["box",3,["stderror"]]]],[[["tipset",3],["address",3]],[["minerinfo",3],["box",3,["stderror"]],["result",4,["minerinfo","box"]]]],[[["tipset",3],["address",3]],[["result",4,["bitfield","box"]],["bitfield",3],["box",3,["stderror"]]]],[[["option",4,["bitfield"]],["tipset",3],["address",3],["bitfield",3]],[["error",4],["vec",3,["sectoronchaininfo"]],["result",4,["vec","error"]]]],[[["cid",3],["address",3]],[["error",4],["result",4,["address","error"]],["address",3]]],[[["cid",3],["address",3]],[["error",4],["result",4,["address","error"]],["address",3]]],[[["cid",3]],[["result",4,["string","error"]],["error",4],["string",3]]],[[["chainepoch",6]],["networkversion",4]],[[["cid",3],["option",4,["address"]],["address",3]],[["option",4],["result",4,["option","error"]],["error",4]]],[[["cid",3],["tipset",3]]],[[["cid",3],["networkversion",4],["address",3],["randomness",3]],[["result",4,["vec","box"]],["box",3,["stderror"]],["vec",3,["sectorinfo"]]]],[[],[["option",4,["subscriber"]],["subscriber",3,["headchange"]]]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[["cid",3],["address",3]],[["error",4],["result",4,["bool","error"]],["bool",15]]],[[["tipset",3]],[["error",4],["result",4,["vec","error"]],["vec",3,["address"]]]],[[["tipset",3],["address",3]],[["error",4],["result",4,["option","error"]],["option",4,["address"]]]],[[["tipset",3],["address",3]],[["marketbalance",3],["result",4,["marketbalance","error"]],["error",4]]],[[["arc",3],["beaconschedule",3],["tipsetkeys",3],["chainepoch",6],["address",3]]],[[["tipset",3],["address",3]],[["result",4,["bool","box"]],["box",3,["stderror"]],["bool",15]]],null,[[["sectornumber",6],["tipset",3],["address",3]],[["result",4,["option","error"]],["option",4,["sectoronchaininfo"]],["error",4]]],null,null,[[["error",4]],["bool",15]],null,[[["chainstore",3],["arc",3,["chainstore"]]]],[[["chainstore",3],["publisher",3,["headchange"]],["headchange",4],["arc",3,["chainstore"]]]],[[["sectornumber",6],["tipset",3],["address",3]],[["result",4,["sectorprecommitonchaininfo","error"]],["sectorprecommitonchaininfo",3],["error",4]]],null,[[["arc",3],["arc",3],["cid",3]]],[[["arc",3],["arc",3],["address",3]]],null,null,[[],["result",4]],[[],["result",4]],[[],[["option",4,["error"]],["error",8]]],[[["arc",3],["arc",3]]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["arc",3],["arc",3,["tipset"]],["tipset",3],["i64",15]]],[[]],[[]],[[]],[[]],[[]],[[["arc",3],["i64",15],["cid",3]]],null],"p":[[4,"Error"],[3,"StateManager"],[3,"MiningBaseInfo"],[3,"InvocResult"],[3,"MarketBalance"]]},\
"state_migration":{"doc":"Common code that’s shared across all migration code. …","t":[17,8,3,13,13,13,13,4,13,13,3,6,6,13,13,13,3,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,3,11,11,11,11,11,11,11,11,11,5,11,11,11,11],"n":["ACTORS_COUNT","ActorMigration","ActorMigrationInput","BlockStoreRead","BlockStoreWrite","FlushFailed","IncompleteMigrationSpec","MigrationError","MigrationJobCreate","MigrationJobRun","MigrationOutput","MigrationResult","Migrator","MigratorNotFound","Other","SetActorState","StateMigration","StateTreeCreation","ThreadPoolCreation","add_migrator","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","fmt","fmt","from","from","from","from","init","init","init","init","into","into","into","into","migrate_state","migrate_state_tree","new","nv12","set_nil_migrations","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","miner","MinerMigrator","borrow","borrow_mut","deref","deref_mut","drop","from","init","into","migrate_state","miner_migrator_v4","try_from","try_into","type_id","vzip"],"q":["state_migration","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","state_migration::nv12","state_migration::nv12::miner","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","This module implements network version 12 or actorv4 …","","","","","","","","","","","","","","",""],"i":[0,0,0,1,1,1,1,0,1,1,0,0,0,1,1,1,0,1,1,2,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,1,1,2,3,4,1,2,3,4,1,2,3,4,1,5,2,2,0,2,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,0,0,6,6,6,6,6,6,6,6,6,0,6,6,6,6],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["migrator",6],["cid",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[["actormigrationinput",3],["arc",3]],[["migrationoutput",3],["migrationresult",6,["migrationoutput"]]]],[[["arc",3],["chainepoch",6],["statetree",3]],[["migrationresult",6,["cid"]],["cid",3]]],[[]],null,[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],null,null,[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],[[["actormigrationinput",3],["arc",3]],[["migrationoutput",3],["migrationresult",6,["migrationoutput"]]]],[[["cid",3]],[["actormigration",8],["arc",3,["actormigration"]]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]]],"p":[[4,"MigrationError"],[3,"StateMigration"],[3,"ActorMigrationInput"],[3,"MigrationOutput"],[8,"ActorMigration"],[3,"MinerMigrator"]]},\
"state_tree":{"doc":"","t":[3,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["StateTree","borrow","borrow_mut","clear_snapshot","delete_actor","deref","deref_mut","drop","export_state_tree","flush","for_each","from","get_actor","import_state_tree","init","into","lookup_id","mutate_actor","new","new_from_root","register_new_address","revert_to_snapshot","set_actor","snapshot","store","try_from","try_into","type_id","vzip"],"q":["state_tree","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["State tree implementation using hamt. This structure is …","","","Merges last two snap shot layers.","Delete actor for an address. Will resolve to ID address …","","","","Exports a StateTree in CAR format given the Cid to the …","Flush state tree and return Cid root.","","","Get actor state from an address. Will be resolved to ID …","Imports a StateTree given an AsyncRead that has data in …","","","Get an ID address from any Address","Mutate and set actor state for an Address.","","Constructor for a hamt state tree given an IPLD store","Register a new address through the init actor.","Revert state cache by removing last snapshot","Set actor state for an address. Will set state at ID …","Add snapshot layer to stack.","Retrieve store reference to modify db.","","","",""],"i":[0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[null,[[]],[[]],[[],[["result",4,["string"]],["string",3]]],[[["address",3]],[["box",3,["stderror"]],["result",4,["box"]]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["cid",3]]],[[],[["result",4,["cid","box"]],["cid",3],["box",3,["stderror"]]]],[[],[["box",3,["stderror"]],["result",4,["box"]]]],[[]],[[["address",3]],[["result",4,["option","box"]],["option",4,["actorstate"]],["box",3,["stderror"]]]],[[["asyncread",8],["send",8],["unpin",8]]],[[],["usize",15]],[[]],[[["address",3]],[["box",3,["stderror"]],["result",4,["option","box"]],["option",4,["address"]]]],[[["address",3]],[["box",3,["stderror"]],["result",4,["box"]]]],[[["statetreeversion",4]],[["box",3,["stderror"]],["result",4,["box"]]]],[[["cid",3]],[["box",3,["stderror"]],["result",4,["box"]]]],[[["address",3]],[["address",3],["box",3,["stderror"]],["result",4,["address","box"]]]],[[],[["result",4,["string"]],["string",3]]],[[["address",3],["actorstate",3]],[["box",3,["stderror"]],["result",4,["box"]]]],[[],[["result",4,["string"]],["string",3]]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]]],"p":[[3,"StateTree"]]},\
"statediff":{"doc":"","t":[5],"n":["print_state_diff"],"q":["statediff"],"d":["Prints a diff of the resolved state tree. If the actor’…"],"i":[0],"f":[[[["cid",3],["u64",15],["option",4,["u64"]]],[["result",4,["box"]],["box",3,["stderror"]]]]],"p":[]},\
"test_utils":{"doc":"","t":[],"n":[],"q":[],"d":[],"i":[],"f":[],"p":[]},\
"utils":{"doc":"","t":[5,5,5,5,5,5],"n":["get_home_dir","read_file_to_string","read_file_to_vec","read_toml","set_user_perm","write_to_file"],"q":["utils","","","","",""],"d":["Gets the home directory of the current system. Will …","Read file as a <code>String</code>.","Read file as a <code>Vec<u8></code>","Converts a toml file represented as a string to <code>S</code>","Restricts permissions on a file to user-only: 0600","Writes a string to a specified file. Creates the desired …"],"i":[0,0,0,0,0,0],"f":[[[],["string",3]],[[["path",3]],[["result",6,["string"]],["string",3]]],[[["path",3]],[["result",6,["vec"]],["vec",3,["u8"]]]],[[["str",15]],["result",6]],[[["file",3]],["result",6]],[[["path",3],["str",15]],[["result",6,["file"]],["file",3]]]],"p":[]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};